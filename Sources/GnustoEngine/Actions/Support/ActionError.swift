/// Enumerates errors that can occur during the execution phase of a command.
public enum ActionError: Error, Equatable, Sendable {
    // MARK: - Cases

    /// Action failed because the target container is closed.
    case containerIsClosed(ItemID)

    /// Action failed because the target container cannot hold any more items.
    case containerIsFull(ItemID)

    /// Action failed because the target container is already open (e.g., trying to close
    /// non-closeable open item).
    case containerIsOpen(ItemID)

    /// A custom message was generated by a handler, overriding default behavior.
    case customResponse(String)

    /// Movement failed because the exit in the specified direction is blocked.
    ///
    /// Includes an optional message from the Exit definition.
    case directionIsBlocked(String?)

    /// A general error occurred, with a descriptive message.
    case general(String)

    /// An unexpected internal error occurred within the engine or an action handler.
    case internalEngineError(String)

    /// The direction specified in a movement command was invalid or not recognized.
    case invalidDirection

    /// The indirect object specified in the command is invalid or missing.
    case invalidIndirectObject(String?)

    /// Action failed because the target item is already closed.
    case itemAlreadyClosed(ItemID)

    /// Action failed because the target item is already open.
    case itemAlreadyOpen(ItemID)

    /// Action failed because the player attempted to wear an item they are already wearing.
    case itemIsAlreadyWorn(ItemID)

    /// Action failed because the target item is locked.
    case itemIsLocked(ItemID)

    /// Action failed because the player attempted to remove an item they are not wearing.
    case itemIsNotWorn(ItemID)

    /// Action failed because the target item is already unlocked.
    case itemIsUnlocked(ItemID)

    /// Action failed because the target item exists but is not reachable by the player.
    case itemNotAccessible(ItemID)

    /// Action failed because the target item cannot be closed (lacks `.closeable` property,
    /// or equivalent logic).
    case itemNotCloseable(ItemID)

    /// Action failed because the target item cannot be dropped (e.g., has `.fixed` property).
    case itemNotDroppable(ItemID)

    /// Action failed because the target item cannot be eaten (lacks `.edible` property).
    case itemNotEdible(ItemID)

    /// Action failed because the player is not holding the required item.
    case itemNotHeld(ItemID)

    /// Action failed because the specified item is not inside the specified container.
    case itemNotInContainer(item: ItemID, container: ItemID)

    /// Action failed because the target item cannot be locked (lacks `.lockable` property).
    case itemNotLockable(ItemID)

    /// Action failed because the specified item is not on the specified surface.
    case itemNotOnSurface(item: ItemID, surface: ItemID)

    /// Action failed because the target item cannot be opened (lacks `.openable` property).
    case itemNotOpenable(ItemID)

    /// Action failed because the target item cannot be read (lacks `.readable` property, or text).
    case itemNotReadable(ItemID)

    /// Action failed because the target item cannot be removed (e.g., a worn, cursed item).
    case itemNotRemovable(ItemID)

    /// Action failed because the target item cannot be taken (lacks `.takable` property).
    case itemNotTakable(ItemID)

    /// Action failed because the target item cannot be unlocked (lacks `.lockable` property
    /// or key mechanism).
    case itemNotUnlockable(ItemID)

    /// Action failed because the item cannot be worn (lacks `.wearable` property).
    case itemNotWearable(ItemID)

    /// Action failed because the player cannot carry any more items (inventory capacity reached).
    case playerCannotCarryMore

    /// A generic failure because some prerequisite for the action was not met.
    ///
    /// Includes a descriptive message provided by the handler.
    case prerequisiteNotMet(String)

    /// Action failed because the current location is dark and the action requires light.
    case roomIsDark

    /// Action failed because the target item is not a container (lacks `.container` property).
    case targetIsNotAContainer(ItemID)

    /// Action failed because the target item is not a surface (lacks `.surface` property).
    case targetIsNotASurface(ItemID)

    /// A required tool for the action is missing.
    case toolMissing(String)

    /// The verb used in the command is not recognized or applicable in the current context.
    case unknownVerb(String)

    /// Action failed because the key used does not match the lock mechanism of the target item.
    case wrongKey(keyID: ItemID, lockID: ItemID)

    // MARK: - Properties

    /// A user-friendly description of the error.
    public var localizedDescription: String {
        switch self {
        case .containerIsClosed(let itemID):
            return "The \(itemID) is closed."
        case .containerIsFull(let itemID):
            return "The \(itemID) is full."
        case .containerIsOpen(let itemID):
            // Usually not shown, as actions might just do nothing silently
            return "The \(itemID) is already open."
        case .customResponse(let message):
            return message
        case .directionIsBlocked(let message):
            return message ?? "You can't go that way."
        case .general(let message):
            return message
        case .internalEngineError(let message):
            // For debugging, not usually shown to the player directly
            return "Internal error: \(message)"
        case .invalidDirection:
            return "You can't go that way."
        case .invalidIndirectObject(let object):
            let objDesc = object ?? "that"
            return "You can't use \(objDesc) for that."
        case .itemAlreadyClosed(let itemID):
            return "The \(itemID) is already closed."
        case .itemAlreadyOpen(let itemID):
            return "The \(itemID) is already open."
        case .itemIsAlreadyWorn(let itemID):
            return "You're already wearing the \(itemID)."
        case .itemIsLocked(let itemID):
            return "The \(itemID) is locked."
        case .itemIsNotWorn(let itemID):
            return "You're not wearing the \(itemID)."
        case .itemIsUnlocked(let itemID):
            return "The \(itemID) is already unlocked."
        case .itemNotAccessible(let itemID):
            // Often overridden by specific context (darkness, etc.)
            return "You can't see any \(itemID) here!"
        case .itemNotCloseable(let itemID):
            return "You can't close the \(itemID)."
        case .itemNotDroppable(let itemID):
            return "You can't drop the \(itemID)."
        case .itemNotEdible(let itemID):
            return "You can't eat the \(itemID)."
        case .itemNotHeld(let itemID):
            return "You're not holding the \(itemID)."
        case .itemNotInContainer(let item, let container):
            return "The \(item) isn't in the \(container)."
        case .itemNotLockable(let itemID):
            return "You can't lock the \(itemID)."
        case .itemNotOnSurface(let item, let surface):
            return "The \(item) isn't on the \(surface)."
        case .itemNotOpenable(let itemID):
            return "You can't open the \(itemID)."
        case .itemNotReadable(let itemID):
            return "There's nothing written on the \(itemID)."
        case .itemNotRemovable(let itemID):
            return "You can't take off the \(itemID)."
        case .itemNotTakable(let itemID):
            return "You can't take the \(itemID)."
        case .itemNotUnlockable(let itemID):
            return "You can't unlock the \(itemID)."
        case .itemNotWearable(let itemID):
            return "You can't wear the \(itemID)."
        case .playerCannotCarryMore:
            return "You're carrying too much."
        case .prerequisiteNotMet(let reason):
            return reason
        case .roomIsDark:
            // Handled specially by the engine to print the Grue message
            return "It is pitch black."
        case .targetIsNotAContainer(let itemID):
            return "The \(itemID) can't hold things."
        case .targetIsNotASurface(let itemID):
            return "You can't put things on the \(itemID)."
        case .toolMissing(let tool):
            return "You need \(tool) for that."
        case .unknownVerb(let verb):
            return "I don't know how to \"\(verb)\" something."
        case .wrongKey(let keyID, let lockID):
            return "The \(keyID) doesn't fit the lock on the \(lockID)."
        }
    }
}
