/// Enumerates errors that can occur during the execution phase of a command.
public enum ActionResponse: Error, Equatable, Sendable {
    /// Action failed because the target container is closed.
    case containerIsClosed(ItemID)

    /// Action failed because the target container is already open (e.g., trying to close
    /// non-closeable open item).
    case containerIsOpen(ItemID)

    /// A custom message was generated by a handler, overriding default behavior.
    case custom(String)

    /// Movement failed because the exit in the specified direction is blocked.
    ///
    /// Includes an optional message from the Exit definition.
    case directionIsBlocked(String?)

    /// An unexpected internal error occurred within the engine or an action handler.
    case internalEngineError(String)

    /// The direction specified in a movement command was invalid or not recognized.
    case invalidDirection

    /// The indirect object specified in the command is invalid or missing.
    case invalidIndirectObject(String?)

    /// A value provided for a state change or property update was invalid (e.g., failed validation).
    case invalidValue(String)

    /// Action failed because the target item is already closed.
    case itemAlreadyClosed(ItemID)

    /// Action failed because the target item is already open.
    case itemAlreadyOpen(ItemID)

    /// Action failed because the player attempted to wear an item they are already wearing.
    case itemIsAlreadyWorn(ItemID)

    /// Action failed because the target item is locked.
    case itemIsLocked(ItemID)

    /// Action failed because the player attempted to remove an item they are not wearing.
    case itemIsNotWorn(ItemID)

    /// Action failed because the target item is already unlocked.
    case itemIsUnlocked(ItemID)

    /// Action failed because the target item exists but is not reachable by the player.
    case itemNotAccessible(ItemID)

    /// Action failed because the target item cannot be closed (lacks `.closeable` property,
    /// or equivalent logic).
    case itemNotClosable(ItemID)

    /// Action failed because the target item cannot be dropped (e.g., has `.fixed` property).
    case itemNotDroppable(ItemID)

    /// Action failed because the target item cannot be eaten (lacks `.edible` property).
    case itemNotEdible(ItemID)

    /// Action failed because the player is not holding the required item.
    case itemNotHeld(ItemID)

    /// Action failed because the specified item is not inside the specified container.
    case itemNotInContainer(item: ItemID, container: ItemID)

    /// Action failed because the target item cannot be locked (lacks `.lockable` property).
    case itemNotLockable(ItemID)

    /// Action failed because the specified item is not on the specified surface.
    case itemNotOnSurface(item: ItemID, surface: ItemID)

    /// Action failed because the target item cannot be opened (lacks `.openable` property).
    case itemNotOpenable(ItemID)

    /// Action failed because the target item cannot be read (lacks `.readable` property, or text).
    case itemNotReadable(ItemID)

    /// Action failed because the target item cannot be removed (e.g., a worn, cursed item).
    case itemNotRemovable(ItemID)

    /// Action failed because the target item cannot be taken (lacks `.takable` property).
    case itemNotTakable(ItemID)

    /// Action failed because the target item cannot be unlocked (lacks `.lockable` property
    /// or key mechanism).
    case itemNotUnlockable(ItemID)

    /// Action failed because the item cannot be worn (lacks `.wearable` property).
    case itemNotWearable(ItemID)

    /// Action failed because the specified item cannot fit inside the specified container.
    case itemTooLargeForContainer(item: ItemID, container: ItemID)

    /// Action failed because the player cannot carry any more items (inventory capacity reached).
    case playerCannotCarryMore

    /// A generic failure because some prerequisite for the action was not met.
    ///
    /// Includes a descriptive message provided by the handler.
    case prerequisiteNotMet(String)

    /// Action failed because the current location is dark and the action requires light.
    case roomIsDark

    /// Action failed during GameState.apply because a provided `oldValue` did not match the actual current state.
    case stateValidationFailed(change: StateChange, actualOldValue: StateValue?)

    /// Action failed because the target item is not a container (lacks `.container` property).
    case targetIsNotAContainer(ItemID)

    /// Action failed because the target item is not a surface (lacks `.surface` property).
    case targetIsNotASurface(ItemID)

    /// A required tool for the action is missing.
    case toolMissing(String)

    /// Action failed because the specified item is unknown in the game.
    case unknownItem(ItemID)

    /// The verb used in the command is not recognized or applicable in the current context.
    case unknownVerb(String)

    /// Action failed because the key used does not match the lock mechanism of the target item.
    case wrongKey(keyID: ItemID, lockID: ItemID)
}
