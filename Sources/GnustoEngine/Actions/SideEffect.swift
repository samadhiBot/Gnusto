import Foundation

/// Represents an imperative action or an indirect consequence of a player's command that
/// doesn't directly modify a `GameState` property via a `StateChange`.
///
/// `SideEffect`s are used for operations like starting or stopping timed events (fuses),
/// managing background processes (daemons), or scheduling future events. They are typically
/// generated by an `ActionHandler` as part of an `ActionResult` and then processed by the
/// `GameEngine`.
public struct SideEffect: Sendable, Equatable {
    /// The specific category or kind of this side effect.
    public let type: SideEffectType

    /// The `EntityID` of the primary entity involved in or targeted by this side effect.
    /// For example, for `.startFuse`, this would be the `EntityID.fuse(fuseID)` of the fuse to start.
    /// For effects not tied to a specific entity, `.global` might be used.
    public let targetID: EntityID

    /// A dictionary holding any additional data or configuration required to execute
    /// this side effect. The keys are `String`s and values are `StateValue`s.
    /// For example, a `.startFuse` effect might include a parameter for the fuse's duration.
    public let parameters: [String: StateValue]

    /// Creates a new `SideEffect` instance.
    ///
    /// - Parameters:
    ///   - type: The `SideEffectType` categorizing this side effect.
    ///   - targetID: The `EntityID` of the entity primarily affected or involved.
    ///   - parameters: Optional. A dictionary of additional `String`-keyed `StateValue`
    ///                 parameters needed for this specific side effect. Defaults to an empty dictionary.
    public init(
        type: SideEffectType,
        targetID: EntityID,
        parameters: [String: StateValue] = [:]
    ) {
        self.type = type
        self.targetID = targetID
        self.parameters = parameters
    }
}

/// Enumerates the distinct categories of side effects that can be triggered within the game.
///
/// Each case represents a specific type of imperative action that the `GameEngine` can perform
/// in response to game events or player commands.
public enum SideEffectType: String, Codable, Sendable, Equatable {
    /// Indicates that a timed event (a "fuse") should be started.
    /// The `targetID` in the `SideEffect` should be the `EntityID.fuse(fuseID)` of the fuse.
    /// `parameters` might include the duration of the fuse (e.g., key "duration" with an `.int` value).
    case startFuse
    /// Indicates that an active fuse should be stopped before it naturally concludes.
    /// The `targetID` should be the `EntityID.fuse(fuseID)` of the fuse to stop.
    case stopFuse
    /// Indicates that a background game logic component (a "daemon") should be activated.
    /// The `targetID` should be the `EntityID.daemon(daemonID)` of the daemon to run.
    case runDaemon
    /// Indicates that an active daemon should be deactivated.
    /// The `targetID` should be the `EntityID.daemon(daemonID)` of the daemon to stop.
    case stopDaemon
    /// Indicates that a custom event should be scheduled to occur at a later time or under
    /// certain conditions. This can be used for delayed messages, recurring events, or other
    /// time-based game logic not fitting the fuse/daemon model.
    /// `targetID` and `parameters` would be defined by the specific needs of the scheduled event.
    case scheduleEvent // e.g., for delayed messages or actions
    // Add more as needed
}
