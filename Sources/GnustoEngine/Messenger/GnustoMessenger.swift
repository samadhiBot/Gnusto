import Foundation
import Logging

/// A `Messenger` implementation using a round table of AI personas.
///
/// The responses included in the Gnusto Interactive Fiction Engine's `GnustoMessenger` were
/// generated by a round table of AI personas loosely inspired by the conversational styles of
/// real authors. These particular authors were selected based on their demonstrated talent for
/// crafting pithy, entertaining, and gently sardonic commentary--qualities that seemed well-
/// suited to interactive fiction's conversational nature. The selection represents a curated
/// subset chosen for their potential compatibility with the medium, not a comprehensive ranking
/// of literary merit.
///
/// All personas were facilitated by Claude (Anthropic) and represent interpretive approximations
/// of writing styles rather than attempts to replicate the actual voices or opinions of the
/// referenced authors.
///
/// The AI personas were loosely inspired by the following authors:
///
/// - Dorothy Parker (DP) - American writer, critic, and satirist known for her wit,
///   sharp tongue, and ability to devastate with a single well-placed barb
/// - Oscar Wilde (OW) - Irish playwright, poet, and author famous for his epigrams,
///   paradoxes, and making the trivial seem profound (and vice versa)
/// - Mark Twain (MT) - American humorist and novelist, master of vernacular storytelling
///   and finding absurdity in the human condition
/// - Truman Capote (TC) - American novelist and short story writer known for his
///   distinctive prose style and ability to make gossip into literature
/// - Noel Coward (NC) - English playwright, composer, and actor renowned for sophisticated
///   comedy and treating sincerity as a last resort
/// - Samuel Johnson (SJ) - English writer, critic, and lexicographer, famous for wit,
///   moral observation, and defining words with magnificent grumpiness
/// - Douglas Adams (DA) - English author and humorist, creator of "The Hitchhiker's Guide
///   to the Galaxy" and master of cosmic absurdity
/// - Richard Feynman (RF) - American theoretical physicist who approached everything
///   with playful curiosity and insisted physics could be funny
/// - David Sedaris (DS) - American humorist and essayist who finds comedy in life's
///   awkward moments and isn't afraid to share them
/// - Thomas Pynchon (TP) - American novelist known for paranoid complexity, entropy,
///   and making confusion seem intentional
///
/// DISCLAIMER: The AI personas in this implementation are creative interpretations inspired by
/// publicly available works and widely known characteristics of these authors' writing styles.
/// They are not intended to represent the actual views, personalities, or private thoughts of
/// the referenced individuals or their estates. No endorsement by or affiliation with any
/// author's estate is implied.
open class GnustoMessenger: StandardMessenger, @unchecked Sendable {
    public override func almostDo(_ verb: Verb, item: String) -> String {
        oneOf(
            "Something about \(item) suggests it prefers to remain undisturbed.",  // TC
            "You almost \(verb) \(item). Almost.",  // DP
            "Second thoughts prevent \(verb.gerund) \(item).",  // DP
            "You prudently reconsider disturbing \(item).",  // SJ
            "Prudence suggests leaving \(item) where it rests.",  // SJ
            "Your \(verb.gerund) arm hesitates. Probably for the best.",  // MT
            "You spare yourself the effort of \(verb.gerund) \(item).",  // MT
            "You resist the primitive urge to \(verb) \(item).",  // OW
            "A moment of \(verb.gerund) ambition, prudently abandoned.",  // NC
            "You rehearse the motion without commitment.",  // NC
            "\(item) looks perfectly content as it is.",  // DA
            "Your back suggests avoiding unnecessary \(verb.gerund).",  // DA
            "The physics of \(verb.gerund) \(item) seem inadvisable.",  // RF
            "Your \(verb.gerund) calculations yield negative results.",  // RF
            "You pause at the threshold of  \(verb.gerund) \(item).",  // DS
            "Better to leave \(item) in its natural habitat.",  // DS
            "The universe whispers against disturbing \(item).",  // TP
            "Your \(verb.gerund) impulse dissolves before action.",  // TP
            "You reach for \(item), then forget why.",  // DS
            "Your \(verb.gerund) intentions evaporate mid-gesture.",  // DS
            "You approach \(item) with purpose, then lose the thread entirely.",  // DP
            "Halfway to \(item), your mind wanders elsewhere.",  // DP
            "You prepare to \(verb) \(item), then spot something shiny.",  // OW
            "Such focused intention! Until something else catches your eye.",  // OW
            "You begin \(verb.gerund) \(item), then question the entire endeavor.",  // SJ
            "The philosophical implications of \(verb.gerund) \(item) prove overwhelmingly distracting.",  // SJ
            "You reach for \(item), then wonder what you had for breakfast.",  // MT
            "Your hand hovers near \(item) while your brain wanders elsewhere.",  // MT
            "You start to \(verb) \(item), then get distracted by existence.",  // NC
            "A moment of clarity about \(item) dissolves into confusion.",  // NC
            "You approach \(item) with purpose, then lose all sense of purpose.",  // DA
            "The cosmic significance of \(verb.gerund) \(item) overwhelms you.",  // DA
            "Your attention span fails you at the crucial moment.",  // RF
            "You forget what \(item) is for while reaching for it.",  // TC
            "The act of \(verb.gerund) \(item) becomes mysteriously abstract.",  // TC
            "Your \(verb.gerund) momentum dissipates into philosophical uncertainty.",  // TP
            "The intention to \(verb) \(item) fragments into quantum possibility.",  // TP
            "You change your mind about \(verb.gerund) \(item) at the last second.",  // SJ
            "The timing feels wrong for \(verb.gerund) \(item).",  // TC
            "You suspect \(verb.gerund) \(item) might void your warranty.",  // DP
            "A mysterious force stays your \(verb.gerund) hand.",  // OW
            "You remember a cautionary tale involving \(verb.gerund).",  // MT
            "The legal ramifications of \(verb.gerund) \(item) seem murky.",  // NC
            "You lose confidence in your \(verb.gerund) technique mid-motion.",  // DA
            "The environmental impact of \(verb.gerund) concerns you.",  // RF
            "You get distracted and forget why you wanted to \(verb) \(item).",  // DS
            "The universe suggests postponing this \(verb.gerund) indefinitely."  // TP
        )
    }

    public override func attackNonCharacter(_ item: String) -> String {
        oneOf(
            "You assault \(item) with the fury of someone who's clearly lost the plot.",  // DP
            "How charmingly violent. \(item) remains serenely indifferent to your rage.",  // OW
            "You attack \(item) like it owes you money and can't pay up.",  // MT
            "Such passionate hostility toward \(item). How deliciously unhinged.",  // TC
            "How terribly dramatic. \(item) fails to cower appropriately.",  // NC
            "The assault upon \(item) proceeds with admirable futility.",  // SJ
            "You attack \(item). \(item) wins by doing absolutely nothing.",  // DA
            "You wage war against \(item) and lose spectacularly.",  // DP
            "What did \(item) ever do to deserve such treatment?",  // OW
            "You pummel \(item) with the effectiveness of fighting fog.",  // MT
            "Your vendetta against \(item) seems rather one-sided.",  // TC
            "Such vigor! Such pointlessness! \(item) remains smugly inanimate.",  // NC
            "The engagement with \(item) yields the expected non-results.",  // SJ
            "You declare war on \(item). \(item) doesn't seem to notice.",  // DA
            "You attack \(item) and immediately question your tactical decisions.",  // DP
            "How wonderfully absurd. \(item) maintains its dignity throughout.",  // OW
            "I suppose when you can't find a proper enemy, any object will do.",  // DP
            "The inanimate world's greatest defense is its complete lack of interest in our hostilities.",  // DA
        )
    }

    public override func attackSelf() -> String {
        oneOf(
            "You wage unsuccessful war against your least favorite opponent.",  // DA
            "Your self-assault achieves exactly the level of success expected.",  // DA
            "You display remarkable commitment to this peculiar form of self-loathing.",  // TC
            "Your masochistic theater impresses absolutely no one.",  // TC
            "My dear, there are easier ways to seek attention.",  // NC
            "One's self-flagellation lacks both style and effectiveness.",  // NC
            "Conservation of momentum prevents your self-directed violence.",  // RF
            "You discover that Newton's third law works against you.",  // RF
            "Such self-mortification ill becomes a rational being.",  // SJ
            "Your autodidactic pugilism achieves only foolishness.",  // SJ
            "Even you aren't convinced by this performance.",  // DP
            "Your cry for help goes delightfully unheeded.",  // DP
            "The universe protects you from your worst impulses.",  // TP
            "Entropy increases, but you remain stubbornly intact.",  // TP
            "You punch yourself with the fury of mild disappointment.",  // DS
            "Your self-combat resembles an aggressive form of yoga.",  // DS
            "You fail to inflict even minor damage upon yourself.",  // MT
            "Your commitment to self-harm proves refreshingly incompetent.",  // MT
            "How wonderfully melodramatic and utterly pointless.",  // OW
            "One cannot improve one's situation through self-battery.",  // OW
        )
    }

    public override func blow() -> String {
        oneOf(
            "You blow with the determination of someone practicing for a hurricane.",  // DP
            "How delightfully windy of you. The atmosphere seems mildly rearranged.",  // OW
            "You puff like a locomotive with nowhere important to go.",  // MT
            "Such passionate exhalation! The air molecules seem almost flattered.",  // TC
            "How terribly theatrical. You've given the breeze some competition.",  // NC
            "The forceful expulsion of air proceeds with customary futility.",  // SJ
            "You blow. The universe remains magnificently unblow-able.",  // DA
            "You exhale with the fury of someone who's run out of birthday candles.",  // DP
            "What vigorous breathing! Surely something should have moved by now?",  // OW
            "You blow like a bellows with delusions of grandeur.",  // MT
            "Such dramatic huffing and puffing deserves a more cooperative target.",  // TC
            "How wonderfully pointless. The air seems unimpressed by your efforts.",  // NC
            "Your respiratory gymnastics achieve their intended lack of effect.",  // SJ
            "You blow forcefully at nothing and succeed beyond your wildest dreams.",  // DA
            "You puff with the confidence of someone who's mastered the art of moving air around.",  // DP
            "How charmingly futile. Perhaps the wind could use some pointers?",  // OW
        )
    }

    public override func blowOn(_ item: String) -> String {
        oneOf(
            "You blow on \(item) with the enthusiasm of someone who's clearly run out of ideas.",  // DP
            "How delightfully primitive. \(item) seems unmoved by your respiratory efforts.",  // OW
            "You puff at \(item) like it's a birthday candle that's given up on life.",  // MT
            "Such passionate huffing! \(item) remains stubbornly unaffected by your breath.",  // TC
            "How wonderfully direct. \(item) appears immune to your windy charms.",  // NC
            "The application of breath to \(item) yields predictably modest results.",  // SJ
            "You blow on \(item). \(item) fails to be impressed by your lung capacity.",  // DA
            "You exhale forcefully at \(item) and achieve maximum atmospheric rearrangement.",  // DP
            "What vigorous breathing! \(item) seems almost embarrassed by the attention.",  // OW
            "You puff at \(item) with the determination of someone who's watched too many fairy tales.",  // MT
            "Your respiratory assault on \(item) demonstrates the limits of breath-based problem solving.",  // TC
            "How charmingly futile. \(item) maintains its dignity throughout your huffing.",  // NC
            "The engagement between your lungs and \(item) concludes without fanfare.",  // SJ
            "You blow on \(item). Physics remains disappointingly consistent.",  // DA
            "You treat \(item) to a personal windstorm of remarkable ineffectiveness.",  // DP
            "How marvelously pointless. \(item) seems grateful for the gentle breeze, if nothing else.",  // OW
        )
    }

    public override func breatheOnResponse(_ item: String) -> String {
        oneOf(
            "You breathe on \(item) with the intimacy of someone who's clearly lost perspective.",  // DP
            "How delightfully personal. \(item) seems flattered by your warm exhalation.",  // OW
            "You huff on \(item) like it's a mirror that needs fogging.",  // MT
            "Such tender respiratory attention! \(item) basks in your carbon dioxide.",  // TC
            "How wonderfully direct. \(item) receives your breath with stoic grace.",  // NC
            "The application of respiration to \(item) proceeds without notable consequence.",  // SJ
            "You breathe on \(item). \(item) experiences a brief moment of humidity.",  // DA
            "You exhale intimately upon \(item) and achieve maximum awkwardness.",  // DP
            "What passionate breathing! \(item) seems unsure how to respond to such attention.",  // OW
            "You fog \(item) with your breath like someone testing for life signs.",  // MT
            "Your personal climate control system focuses exclusively on \(item).",  // TC
            "How charmingly pointless. \(item) now knows what you had for lunch.",  // NC
            "The engagement between your lungs and \(item) yields atmospheric intimacy.",  // SJ
            "You breathe on \(item). \(item) gets slightly warmer and more confused.",  // DA
            "You treat \(item) to a personal weather system of remarkable modesty.",  // DP
            "How marvelously inappropriate. \(item) maintains its composure despite your advances.",  // OW
        )
    }

    public override func breatheResponse() -> String {
        oneOf(
            "You breathe with the determination of someone very much alive.",  // DP
            "How refreshingly automatic of you.",  // OW
            "You inhale and exhale like a champion of the obvious.",  // MT
            "Such dedication to this most basic of biological functions.",  // TC
            "Breathing? How terribly... functional.",  // NC
            "The lungs perform their office with customary efficiency.",  // SJ
            "You breathe. The atmosphere cooperates beautifully.",  // DA
            "Your respiratory system continues its thankless work.",  // DP
            "Oxygen in, carbon dioxide out. How delightfully predictable.",  // OW
            "You breathe like a person who's mastered the fundamentals.",  // MT
            "Such rhythmic chest movements. Almost hypnotic.",  // TC
            "How wonderfully automatic. Your medulla oblongata must be so proud.",  // NC
            "Air enters, air departs. The cycle continues unabated.",  // SJ
            "You breathe. Your lungs seem pleased with the arrangement.",  // DA
            "Inhaling with the confidence of someone who's done this before.",  // DP
            "You practice breathing with admirable consistency.",  // OW
        )
    }

    public override func burnCharacter(_ command: Command, character: String) -> String {
        oneOf(
            "\(character) objects strenuously to being \(command.pastParticiple).",  // OW
            "\(character) demonstrates remarkable resistance to your \(command.gerund) attempts.",  // OW
            "Your \(command.gerund) technique horrifies \(character) completely.",  // DP
            "\(character) retreats from your pyromaniacal ambitions.",  // DP
            "\(character) questions your understanding of civilized behavior.",  // SJ
            "One does not simply \(command.verbPhrase) people, however tempting.",  // SJ
            "\(character) isn't kindling.",  // MT
            "Your \(command.gerund) skills meet \(character)'s superior fire-avoidance reflexes.",  // MT
            "\(character) demonstrates admirable anti-\(command.gerund) agility.",  // NC
            "How delightfully savage! \(character) objects with extreme prejudice.",  // NC
            "\(character) adds 'potential arsonist' to their mental notes.",  // DA
            "Your \(command.gerund) proposal meets with civilized horror.",  // DA
            "Human combustion protocols strongly discouraged by social contract.",  // RF
            "\(character) demonstrates superior flame-resistance through mobility.",  // RF
            "\(character) files your \(command.gerund) attempt under 'call the authorities.'",  // TC
            "Your pyromaniacal technique earns \(character)'s active terror.",  // TC
            "Yeah, people really don't like being set on fire.",  // DS
            "\(character) wasn't expecting to become your \(command.gerund) project.",  // DS
            "The universe draws the line at human \(command.gerund).",  // TP
            "\(character) demonstrates that sentient beings aren't meant for \(command.gerund)."  // TP
        )
    }

    public override func burnItemWithTool(_ command: Command, item: String, tool: String) -> String {
        oneOf(
            "You contemplate \(command.gerund) \(item) with \(tool), then reconsider entirely.",  // RF
            "\(tool) demonstrates poor qualifications as a \(command.gerund) implement.",  // RF
            "Your \(command.gerund) technique fails to convince \(tool) to cooperate with \(item).",  // DP
            "\(item) resists your attempts to involve \(tool) in its combustion.",  // DP
            "Such creative \(command.gerund)! \(tool) proves inadequate for igniting \(item).",  // OW
            "You consider \(command.gerund) \(item) with \(tool), then question the wisdom entirely.",  // OW
            "One's \(command.gerund) skills cannot overcome \(tool)'s fundamental unsuitability.",  // SJ
            "\(tool) lacks the necessary \(command.gerund) characteristics for \(item).",  // SJ
            "You give the \(item)-\(tool) \(command.gerund) combo serious thought. Wisdom prevails.",  // MT
            "\(tool) proves more sensible than your \(command.gerund) ambitions.",  // MT
            "A stirring performance of improvised \(command.gerund) methodology.",  // NC
            "\(tool) and \(item) demonstrate incompatible \(command.gerund) geometries.",  // NC
            "\(item) tolerates your \(command.gerund) attempts but \(tool) refuses to participate.",  // DA
            "The \(command.gerund) partnership between \(tool) and \(item) fails to ignite.",  // DA
            "\(tool) exists in a state of \(command.gerund)-resistant independence from \(item).",  // TC
            "Your \(command.gerund) technique needs work; \(tool) needs different employment.",  // TC
            "You try to \(command.verbPhrase) \(item) with \(tool). Neither object volunteers.",  // DS
            "\(tool) escapes your \(command.gerund) scheme like it has fire-safety training.",  // DS
            "\(item) and \(tool) absorb your \(command.gerund) energy without achieving ignition.",  // TP
            "The \(command.gerund) of \(item) with \(tool) remains safely theoretical."  // TP
        )
    }

    public override func canOnlyDoCharacters(_ command: Command) -> String {
        oneOf(
            "You can only \(command.verbPhrase) things that might actually care.",  // DP
            "You can only \(command.verbPhrase) entities capable of appreciation.",  // OW
            "You can only \(command.verbPhrase) beings with the courtesy to respond.",  // TC
            "You can only \(command.verbPhrase) those equipped with personalities.",  // NC
            "You can only \(command.verbPhrase) creatures that possess opinions on the matter.",  // MT
            "You can only \(command.verbPhrase) individuals capable of reciprocal interaction.",  // SJ
            "You can only \(command.verbPhrase) things that might conceivably \(command.verb) back.",  // DA
            "You can only \(command.verbPhrase) beings with the decency to acknowledge your efforts.",  // DP
            "You can only \(command.verbPhrase) entities that understand social contracts.",  // OW
            "You can only \(command.verbPhrase) those who might actually participate in the exchange.",  // NC
            "You can only \(command.verbPhrase) creatures blessed with consciousness.",  // TC
            "You can only \(command.verbPhrase) beings capable of gratitude or complaint.",  // MT
            "You can only \(command.verbPhrase) individuals who might have thoughts about it.",  // SJ
        )
    }

    public override func characterDoesNotSeemToKnow(_ character: String, topic: String) -> String {
        oneOf(
            "\(character) regards your inquiry about \(topic) with magnificent incomprehension.",  // DA
            "Your question about \(topic) meets \(character)'s thoroughly blank stare.",  // DA
            "\(character) displays an impressive vacuum of \(topic) knowledge.",  // TC
            "Mentioning \(topic) to \(character) proves wonderfully fruitless.",  // TC
            "\(character) appears educationally deficient regarding \(topic).",  // NC
            "\(character) maintains perfect ignorance about \(topic).",  // NC
            "\(character) lacks the necessary data regarding \(topic).",  // RF
            "The probability of \(character) knowing about \(topic) approaches zero.",  // RF
            "\(character)'s knowledge of \(topic) proves as substantial as morning mist.",  // SJ
            "Your inquiry about \(topic) finds \(character) woefully unequipped.",  // SJ
            "\(character) meets your question about \(topic) with the wisdom of an empty teacup.",  // DP
            "Your question on \(topic) dies against \(character)'s ignorance.",  // DP
            "\(character) seems to exist in a reality where \(topic) never happened.",  // TP
            "Knowledge of \(topic) eludes \(character) with cosmic persistence.",  // TP
            "\(character) treats \(topic) like an exotic foreign language.",  // DS
            "Asking \(character) about \(topic) yields spectacular nothing.",  // DS
            "\(character) maintains steadfast ignorance regarding \(topic).",  // MT
            "Your inquiry about \(topic) bounces off \(character)'s confusion.",  // MT
            "\(character) finds \(topic) as mysterious as good taste.",  // OW
            "Alas, \(character) and \(topic) remain perfect strangers.",  // OW
        )
    }

    public override func characterListens(_ character: String, topic: String) -> String {
        oneOf(
            "\(character) develops a sudden fascination with anything except \(topic).",  // DA
            "Your discourse on \(topic) achieves remarkable levels of ignorability.",  // DA
            "\(character) listens to your musings on \(topic) with practiced inattention.",  // TC
            "Your thoughts on \(topic) float past \(character) like autumn leaves.",  // TC
            "My dear, \(character) has better things to do than discuss \(topic).",  // NC
            "One's monologue on \(topic) fails to captivate \(character).",  // NC
            "The information entropy of your \(topic) speech approaches maximum.",  // RF
            "\(character) remains unmoved by your \(topic) hypothesis.",  // RF
            "Sir, your dissertation on \(topic) wearies \(character) exceedingly.",  // SJ
            "Your \(topic) observations lack both wit and substance.",  // SJ
            "\(character) perfects the art of not listening to \(topic).",  // DP
            "Your \(topic) soliloquy inspires only theatrical yawning.",  // DP
            "Words about \(topic) dissipate into the uncaring void.",  // TP
            "\(character) exists in a parallel universe where \(topic) doesn't.",  // TP
            "You share your \(topic) wisdom with \(character)'s turned back.",  // DS
            "\(character) responds to your \(topic) talk with aggressive silence.",  // DS
            "Your \(topic) lecture bounces off \(character) like india rubber.",  // MT
            "\(character) finds the wallpaper more engaging than \(topic).",  // MT
            "How tedious, assuming \(character) cares about \(topic).",  // OW
            "\(character) practices selective deafness regarding \(topic).",  // OW
        )
    }

    public override func chompCharacter(_ character: String) -> String {
        oneOf(
            "You chomp \(character) with all the ferocity of an angry teacup.",  // DP
            "Your bite proves less intimidating than your bark, I'm afraid.",  // OW
            "You chomp \(character) like a mosquito attacking a rhinoceros.",  // MT
            "Such delicate dental work on \(character)'s person. How intimate.",  // TC
            "You nibble \(character) with the savage intensity of a debutante.",  // NC
            "Your chomping technique requires, perhaps, further study.",  // SJ
            "You bite \(character). \(character) remains disappointingly unchomped.",  // DA
            "You sink your teeth into \(character) and immediately regret skipping lunch.",  // DP
            "How charmingly primitive. Does \(character) taste of victory?",  // OW
            "You chomp \(character) with the effectiveness of chewing granite.",  // MT
            "Your oral assault on \(character) lacks a certain je ne sais quoi.",  // TC
            "Such enthusiasm! Such futility! \(character) seems unmoved.",  // NC
            "The application of teeth to \(character) yields predictable results.",  // SJ
            "You chomp \(character). Physics remains unimpressed.",  // DA
            "Your bite leaves \(character) more puzzled than punctured.",  // DP
            "You gnaw \(character) like a critic reviewing their own work.",  // OW
        )
    }

    public override func chompEnemy(_ enemy: String) -> String {
        oneOf(
            "You chomp \(enemy) with the culinary confidence of someone who's never considered the dietary implications.",  // DP
            "Your biting attack on \(enemy) demonstrates a refreshingly primal approach to conflict resolution.",  // MT
            "How wonderfully savage--chomping \(enemy) like some sort of carnivorous diplomat.",  // OW
            "You chomp \(enemy) with the sort of combat strategy that makes actual weapons seem overrated.",  // NC
            "Your dental assault on \(enemy) reveals a mind that's transcended conventional fighting methods.",  // SJ
            "You chomp \(enemy) as if your teeth were simply another form of intimidation.",  // TC
            "Your biting attack achieves the perfect balance between hunger and complete tactical confusion.",  // DA
            "You chomp \(enemy) with the same military genius that's made all your other strategies so memorable.",  // DP
            "Your culinary approach suggests you've confused \(enemy) with something considerably more edible.",  // MT
            "You chomp \(enemy) with the sort of dining technique that makes table manners seem like warfare.",  // OW
            "\(enemy) receives your chomping with all the flavor you've come to expect from your combat skills.",  // NC
            "You chomp \(enemy) with the patient dedication of someone who's never heard of proper weaponry.",  // SJ
            "Your biting technique reveals the sort of combat instincts that make cannibalism seem like strategy.",  // TC
            "You chomp \(enemy) as if dental work were somehow more effective than actual self-defense.",  // DA
        )
    }

    public override func chomp() -> String {
        oneOf(
            "You chomp at nothing with admirable commitment to the void.",  // DP
            "One must chomp something, mustn't one? The air seems unimpressed.",  // OW
            "You chomp with the enthusiasm of a man biting fog.",  // MT
            "Your teeth click together in a most unsatisfying symphony.",  // TC
            "How terribly athletic of you to exercise your jaw so vigorously.",  // NC
            "The act of chomping requires, one might observe, something to chomp upon.",  // SJ
            "You chomp. The universe remains stubbornly unchomped.",  // DA
            "Your molars meet in a tragic tale of unrequited mastication.",  // DP
            "Chomping the atmosphere? How delightfully avant-garde.",  // OW
            "You bite down on disappointment and find it tasteless.",  // MT
            "Such passionate chomping deserves a more cooperative subject.",  // TC
            "Your jaw works with the dedication of the truly optimistic.",  // NC
            "A chomp, my dear, is most effective when applied to substance.",  // SJ
            "You chomp. Reality fails to notice.",  // DA
            "Your teeth demonstrate their function beautifully, if pointlessly.",  // DP
        )
    }

    public override func chompAbort() -> String {
        oneOf(
            "Probably wise--your dietary discretion has likely saved you from a regrettable culinary adventure.",  // DP
            "A sensible choice, considering your track record with questionable decisions.",  // MT
            "How refreshingly prudent--showing the sort of restraint that makes survival possible.",  // OW
            "Wise decision--your newfound caution suggests a mind finally learning from experience.",  // NC
            "A judicious retreat from what could have been a most unpalatable experience.",  // SJ
            "Probably for the best--your digestive system thanks you for this rare moment of wisdom.",  // TC
            "A sound choice that demonstrates the sort of self-preservation instinct you've been missing.",  // DA
            "Sensible--your sudden outbreak of good judgment is both surprising and commendable.",  // DP
            "Wise restraint from someone who's finally discovered the value of second thoughts.",  // MT
            "A prudent decision that suggests you've learned something about the risks of random chomping.",  // OW
            "Probably wise--your digestive tract has enough challenges without adding mystery items.",  // NC
            "A moment of clarity that makes your other decisions seem even more questionable by comparison.",  // SJ
            "Smart choice--your survival instincts have apparently awakened from their long slumber.",  // TC
            "Wise decision--some things are better left unchomped, as your stomach would surely agree.",  // DA
        )
    }

    public override func chompItem(_ item: String) -> String {
        oneOf(
            "You chomp \(item) with the discernment of a gourmand eating cardboard.",  // DP
            "How deliciously unconventional. Does \(item) pair well with wine?",  // OW
            "You bite \(item) like a beaver with questionable judgment.",  // MT
            "Your dental exploration of \(item) yields fascinating textures.",  // TC
            "How terribly bohemian to treat \(item) as cuisine.",  // NC
            "The consumption of \(item) proves, unsurprisingly, inadvisable.",  // SJ
            "You chomp \(item). Your teeth file a formal complaint.",  // DA
            "You gnaw \(item) with the enthusiasm of the nutritionally confused.",  // DP
            "Such adventurous eating habits! \(item) seems less than flattered.",  // OW
            "You chomp \(item) and discover why it's not on any menu.",  // MT
            "Your oral investigation of \(item) reveals its inedible nature.",  // TC
            "How wonderfully experimental. \(item) remains stubbornly unchewable.",  // NC
            "The mastication of \(item) proceeds with predictable futility.",  // SJ
            "You bite \(item). It tastes exactly as inedible as it looks.",  // DA
            "Your teeth meet \(item) in an unfortunate culinary misunderstanding.",  // DP
            "You sample \(item) and immediately question your life choices.",  // OW
        )
    }

    public override func cryResponse() -> String {
        oneOf(
            "You cry with the dignified composure of someone who's finally found their appropriate response to life.",  // DP
            "Your tears flow with all the effectiveness of rain on a leaky roof.",  // MT
            "How wonderfully dramatic--crying like some sort of professional mourner without a funeral.",  // OW
            "You weep with the sort of emotional honesty that makes small talk impossible.",  // NC
            "Your tears demonstrate a refreshing acknowledgment of your current circumstances.",  // SJ
            "You cry as if your eyes had finally decided to express what your brain couldn't articulate.",  // TC
            "Your weeping achieves the perfect harmony between self-pity and self-awareness.",  // DA
            "You cry with the same timing that's made all your other decisions so memorable.",  // DP
            "Your tears suggest you've finally grasped the full scope of your situation.",  // MT
            "You weep with the sort of abandon that makes emotional restraint seem overrated.",  // OW
            "Your crying demonstrates the kind of honest self-assessment that therapy bills are made of.",  // NC
            "You cry with the patient dedication of someone who's run out of other options.",  // SJ
            "Your tears flow with the inevitability of someone who's been saving them up.",  // TC
            "You weep as if sadness were simply another form of problem-solving.",  // DA
        )
    }

    public override func curse() -> String {
        oneOf(
            "You curse with the creative vocabulary of someone who's clearly been saving up.",  // DP
            "Your profanity demonstrates a refreshing honesty about your current emotional state.",  // MT
            "How wonderfully expressive--cursing like some sort of linguistic rebel without a cause.",  // OW
            "You swear with the sort of eloquent passion that makes proper language seem inadequate.",  // NC
            "Your colorful language reveals a mind finally freed from the constraints of politeness.",  // SJ
            "You curse as if profanity were simply another form of problem-solving.",  // TC
            "Your expletives achieve the perfect balance between frustration and self-expression.",  // DA
            "You swear with the same refined judgment that's guided all your other decisions.",  // DP
            "Your cursing suggests you've finally found words that match your circumstances.",  // MT
            "You demonstrate the sort of verbal creativity that makes dictionaries blush.",  // OW
            "Your profanity flows with the natural grace of someone who's given up on pretense.",  // NC
            "You curse with the patient dedication of someone who's run out of polite options.",  // SJ
            "Your colorful language paints a picture that's probably more accurate than flattering.",  // TC
            "You swear as if bad language were the only honest response to an dishonest world.",  // DA
        )
    }

    public override func curseCharacter(_ character: String) -> String {
        oneOf(
            "You curse \(character) with the diplomatic finesse of someone who's given up on making friends.",  // DP
            "Your profanity directed at \(character) demonstrates a refreshing commitment to burning bridges.",  // MT
            "How wonderfully direct--cursing \(character) like some sort of social arsonist with vocabulary.",  // OW
            "You swear at \(character) with the sort of interpersonal grace that makes enemies for life.",  // NC
            "Your colorful language toward \(character) reveals a mind that's finally found its true calling.",  // SJ
            "You curse \(character) as if profanity were simply another form of character assessment.",  // TC
            "Your expletives directed at \(character) achieve the perfect balance between honesty and social suicide.",  // DA
            "You swear at \(character) with the same charm that's made you so universally beloved.",  // DP
            "Your cursing of \(character) suggests you've confused insults with conversation starters.",  // MT
            "You direct your profanity at \(character) with the tactical wisdom of someone who enjoys being alone.",  // OW
            "\(character) receives your colorful language with all the enthusiasm you've come to expect.",  // NC
            "You curse \(character) with the patient dedication of someone who's never heard of consequences.",  // SJ
            "Your swearing at \(character) demonstrates the sort of social skills that make hermits seem gregarious.",  // TC
            "You curse \(character) as if bad language were the foundation of all meaningful relationships.",  // DA
        )
    }

    public override func curseTarget(_ item: String) -> String {
        oneOf(
            "You curse \(item) with the focused rage of someone who's finally found something to blame.",  // DP
            "Your profanity directed at \(item) demonstrates a refreshing willingness to hold inanimate objects accountable.",  // MT
            "How wonderfully specific--cursing \(item) like some sort of precision swearer.",  // OW
            "You swear at \(item) with the sort of targeted fury that makes therapy seem redundant.",  // NC
            "Your colorful language toward \(item) reveals a mind that's given up on reasonable targets.",  // SJ
            "You curse \(item) as if it had personally orchestrated your current misfortunes.",  // TC
            "Your expletives rain down upon \(item) with all the effectiveness of shouting at the weather.",  // DA
            "You direct your profanity at \(item) with the same tactical brilliance that got you here.",  // DP
            "Your cursing of \(item) suggests you've confused blame with problem-solving.",  // MT
            "You swear at \(item) with the sort of creative attribution that makes causality weep.",  // OW
            "\(item) receives your profanity with all the concern of something that lacks feelings.",  // NC
            "You curse \(item) with the patient dedication of someone who's run out of people to blame.",  // SJ
            "Your colorful language toward \(item) achieves the perfect balance between fury and futility.",  // TC
            "You swear at \(item) as if bad language were somehow contagious and might improve its behavior.",  // DA
        )
    }

    public override func cutCharacter(_ character: String) -> String {
        oneOf(
            "\(character) steps back with the practiced grace of someone who's had this conversation before.",  // DP
            "Your cutting ambitions meet \(character)'s firm belief in remaining whole.",  // OW
            "\(character) politely declines your surgical overtures.",  // TC
            "You brandish your implement while \(character) radiates profound skepticism.",  // NC
            "\(character) proves remarkably attached to their current configuration.",  // MT
            "Your proposal receives the reception one might expect from a civilized being.",  // SJ
            "\(character) demonstrates an admirable commitment to structural integrity.",  // DA
            "You wave about menacingly while \(character) remains disappointingly intact.",  // DP
            "\(character) regards your efforts with the weary patience of the frequently threatened.",  // OW
            "Your cutting technique impresses no one, least of all \(character).",  // NC
            "\(character) maintains their wholeness with stubborn determination.",  // TC
            "You accomplish a masterful display of futility while \(character) watches with interest.",  // SJ
        )
    }

    public override func cutEnemy(_ enemy: String) -> String {
        oneOf(
            "Your enemy laughs with the hearty appreciation of someone watching amateur theater.",  // DP
            "\(enemy) regards your cutting attempt as one might view a particularly bold ant.",  // OW
            "You slice enthusiastically while \(enemy) remains stubbornly unsliced.",  // TC
            "\(enemy) demonstrates why they're the enemy and you're the one with delusions.",  // NC
            "Your blade meets \(enemy) like a whisper meeting a thunderstorm.",  // MT
            "\(enemy) proves disappointingly resistant to your editorial suggestions.",  // SJ
            "You achieve the remarkable feat of annoying \(enemy) without actually harming them.",  // DA
            "\(enemy) watches your performance with the detached interest of a drama critic.",  // DP
            "Your cutting technique receives \(enemy)'s professional critique: inadequate.",  // OW
            "\(enemy) remains magnificently whole despite your artistic efforts.",  // NC
            "You brandish your weapon while \(enemy) radiates the confidence of the invulnerable.",  // TC
            "Your attack bounces off \(enemy) like wit off a politician.",  // MT
            "\(enemy) demonstrates the fundamental superiority of being the one not getting cut.",  // SJ
        )
    }

    public override func cutItem(_ item: String) -> String {
        oneOf(
            "You consider cutting \(item), then wisely reconsider--some things are better left whole.",  // DP
            "Your cutting instincts pause as a voice of reason whispers that \(item) might be more useful intact.",  // MT
            "How wonderfully restrained--resisting the urge to cut \(item) shows admirable foresight.",  // OW
            "You contemplate cutting \(item), then demonstrate the sort of wisdom that makes preservation seem prudent.",  // NC
            "Your cutting impulse yields to the sensible notion that \(item) might serve you better undivided.",  // SJ
            "You pause before cutting \(item), showing the rare judgment that makes keeping things whole seem wise.",  // TC
            "Your cutting plans hesitate as wisdom suggests \(item) might be more valuable in its current state.",  // DA
            "You consider cutting \(item), then display the sort of restraint that makes intact objects grateful.",  // DP
            "Your slicing ambitions pause as prudence suggests \(item) might have hidden potential.",  // MT
            "You contemplate cutting \(item), then show the foresight that makes future-you thankful.",  // OW
            "Your cutting urge yields to the wise suspicion that \(item) might be perfect as it is.",  // NC
            "You pause before cutting \(item), demonstrating the sort of patience that makes preservation worthwhile.",  // SJ
            "Your cutting instincts hesitate as intuition suggests \(item) might surprise you later.",  // TC
            "You consider cutting \(item), then show the restraint that makes whole things stay wonderfully whole.",  // DA
        )
    }

    public override func cutPlayer() -> String {
        oneOf(
            "Your better angels stage a successful intervention.",  // DP
            "Self-preservation proves stronger than curiosity, mercifully.",  // OW
            "You reconsider with the wisdom of someone who enjoys being whole.",  // TC
            "Common sense makes a rare but welcome appearance.",  // NC
            "Your survival instincts override your experimental impulses.",  // MT
            "Reason prevails over the more theatrical aspects of your nature.",  // SJ
            "You pause, struck by the novel concept of self-care.",  // DA
            "Your hand refuses to cooperate with such a poorly conceived venture.",  // DP
            "Sanity makes an unexpected guest appearance.",  // OW
            "You discover a sudden appreciation for remaining unperforated.",  // NC
            "Your inner voice of reason stages a rare but decisive victory.",  // TC
            "Self-preservation wins the day with surprising ease.",  // MT
            "You find yourself mysteriously reluctant to pursue this particular experiment.",  // SJ
        )
    }

    public override func danceResponse() -> String {
        oneOf(
            "You dance with the sort of confident abandon that suggests no one is watching. They are.",  // DP
            "A performance executed with all the grace of someone who believes rhythm is merely a suggestion.",  // NC
            "You dance as if the very concept of self-consciousness had never been invented.",  // OW
            "Your dancing demonstrates that enthusiasm can indeed triumph over technique, though not always gracefully.",  // MT
            "You execute movements that would be called dancing by someone with a very generous definition.",  // TC
            "A spirited display that proves the human capacity for expressing joy through interpretive flailing.",  // SJ
            "You dance with the carefree abandon of someone who's forgotten that gravity still applies.",  // DA
            "Your choreography suggests a deep personal relationship with music that may be entirely one-sided.",  // DP
            "You perform a dance that would make professional dancers everywhere reconsider their career choices.",  // NC
            "A bold interpretation of movement that challenges conventional notions of coordination.",  // OW
            "You dance as if the floor had personally wronged you and this is your revenge.",  // MT
            "Your performance demonstrates that passion can indeed compensate for what talent forgot to provide.",  // TC
            "You execute a dance that proves the triumph of spirit over the basic laws of physics.",  // SJ
            "A display of terpsichorean enthusiasm that redefines the very concept of rhythm.",  // DA
            "Your dancing is both triumphant and slightly catastrophic -- the perfect combination.",  // TC
            "There's something beautifully human about dancing badly with complete conviction.",  // MT
        )
    }

    public override func danceWith(_ item: String) -> String {
        oneOf(
            "You dance with \(item), who proves to be a surprisingly unresponsive partner.",  // DP
            "\(item) participates in your dance with all the enthusiasm of the fundamentally inanimate.",  // SJ
            "You and \(item) share a dance that redefines the concept of 'leading' in ballroom terms.",  // OW
            "Your dancing partnership with \(item) demonstrates the triumph of imagination over basic physics.",  // NC
            "\(item) follows your lead with the graceful compliance of something that has no choice in the matter.",  // MT
            "You dance with \(item) in a performance that challenges traditional notions of reciprocity.",  // TC
            "\(item) proves to be the sort of dance partner who never steps on your toes, mainly through complete inaction.",  // DA
            "Your waltz with \(item) achieves a level of one-sided romance that poets would envy.",  // DP
            "\(item) demonstrates the perfect dance partner qualities of reliability and complete lack of criticism.",  // SJ
            "You and \(item) execute a dance that would make Fred Astaire reconsider the importance of having a pulse.",  // OW
            "\(item) participates in your choreography with the stoic dignity of the professionally non-participatory.",  // NC
            "Your dance with \(item) proves that chemistry isn't always necessary for a memorable performance.",  // MT
            "\(item) follows your every move with the devoted attention of something that has no other options.",  // TC
            "You dance with \(item) in a display that redefines 'solo performance' as a team effort.",  // DA
            "The beauty is in the complete asymmetry--one partner desperately engaged, the other magnificently indifferent.",  // OW
        )
    }

    public override func danceWithEnemy(_ enemy: String) -> String {
        oneOf(
            "You invite \(enemy) to dance, transforming centuries of combat etiquette into an awkward social moment.",  // SJ
            "\(enemy) receives your dancing invitation with the sort of confusion typically reserved for peace treaties.",  // DP
            "You attempt to dance with \(enemy), who seems unprepared for this particular form of conflict resolution.",  // OW
            "\(enemy) considers your choreographic overture with the bewildered wariness of the professionally hostile.",  // NC
            "Your dancing invitation catches \(enemy) off guard, suggesting they skipped the 'social graces during warfare' seminars.",  // MT
            "\(enemy) responds to your dance proposal with the sort of diplomatic confusion that starts international incidents.",  // TC
            "You offer \(enemy) a dance, creating the kind of social paradox that philosophers write dissertations about.",  // DA
            "\(enemy) regards your dancing invitation as either a brilliant strategy or complete tactical madness.",  // DP
            "Your waltz proposal to \(enemy) demonstrates that optimism can indeed triumph over basic common sense.",  // SJ
            "\(enemy) receives your dance invitation with the careful consideration of someone reassessing their life choices.",  // OW
            "You invite \(enemy) to dance, proving that social awkwardness knows no boundaries of allegiance.",  // NC
            "\(enemy) contemplates your choreographic offer with the sort of suspicion usually reserved for obvious traps.",  // MT
            "Your dancing invitation transforms \(enemy) from adversary to bewildered recipient of unexpected social courtesy.",  // TC
            "\(enemy) faces your dance proposal with the sort of existential confusion that redefines the nature of conflict.",  // DA
        )
    }

    public override func danceWithPartner(_ partner: String) -> String {
        oneOf(
            "You invite \(partner) to dance, who responds with the sort of polite bewilderment reserved for unexpected social propositions.",  // SJ
            "\(partner) considers your dancing invitation with the careful deliberation of someone weighing their options.",  // DP
            "You and \(partner) attempt a dance that redefines the concept of 'getting to know each other.'",  // OW
            "\(partner) participates in your dance with the gracious confusion of the socially ambushed.",  // NC
            "Your dancing partnership with \(partner) demonstrates that rhythm is indeed a highly personal interpretation.",  // MT
            "\(partner) follows your lead with the patient resignation of someone who's learned to expect the unexpected.",  // TC
            "You dance with \(partner) in a performance that challenges both your coordination and their composure.",  // DA
            "\(partner) proves to be a dance partner whose enthusiasm is inversely proportional to their preparation.",  // DP
            "Your waltz with \(partner) achieves the sort of awkward intimacy that makes everyone slightly uncomfortable.",  // SJ
            "\(partner) demonstrates that dancing skills are not universally distributed among the population.",  // OW
            "You and \(partner) execute a dance that would make etiquette instructors everywhere reach for their smelling salts.",  // NC
            "\(partner) participates in your choreography with the bewildered grace of the suddenly conscripted.",  // MT
            "Your dance with \(partner) proves that good intentions can indeed triumph over mutual inexperience.",  // TC
            "\(partner) follows your dancing lead with the sort of cautious optimism that suggests they're making it up as they go.",  // DA
            "The delicious social awkwardness of suddenly proposing a dance--it works whether the partner is a sophisticated duchess or a confused badger.",  // NC
        )
    }

    public override func dig() -> String {
        oneOf(
            "You pause, struck by the revolutionary concept of doing something useful instead.",  // DP
            "Your digging ambitions meet the harsh reality of better judgment.",  // OW
            "You reconsider with the wisdom of someone who values their fingernails.",  // TC
            "Common sense suggests there might be more productive uses of your time.",  // NC
            "Your excavation impulse encounters the formidable opponent of reason.",  // MT
            "You discover a sudden appreciation for activities that don't involve manual labor.",  // SJ
            "Your inner voice of practicality stages a rare but decisive intervention.",  // DA
            "You find yourself mysteriously drawn to pursuits that require less grunting.",  // DP
            "Sanity makes an unexpected guest appearance and suggests alternatives.",  // OW
            "Your better angels recommend channeling this energy into something constructive.",  // NC
            "You pause, overwhelmed by the vast array of non-digging options available.",  // TC
            "Wisdom whispers that perhaps your talents lie elsewhere.",  // MT
            "You experience a moment of clarity regarding the futility of amateur excavation.",  // SJ
        )
    }

    public override func drinkDrinkableDenied(_ item: String) -> String {
        oneOf(
            "You raise \(item) to your lips, then pause. What lurks beneath the surface?",  // DP
            "\(item) looks refreshing, but appearances can be deceiving.",  // MT
            "You contemplate \(item) with the caution of someone who values their stomach lining.",  // TC
            "One simply doesn't imbibe \(item) without knowing its history.",  // NC
            "\(item) may be liquid, but is it wise?",  // OW
            "You sniff \(item) and detect notes of uncertainty and possible consequences.",  // SJ
            "\(item) appears drinkable, but then again, so does antifreeze.",  // DA
            "Your thirst argues with your common sense. Common sense wins.",  // DP
            "\(item) beckons invitingly, but you recall where you found it.",  // MT
            "You hold \(item) aloft, then think better of it. Prudence prevails.",  // TC
            "\(item) awaits consumption, but so does your digestive tract.",  // NC
            "Why ruin a perfectly good \(item) by drinking it?",  // OW
            "\(item) presents itself as beverage, but your survival instincts object.",  // SJ
            "You consider drinking \(item), then remember you're not that thirsty. Yet.",  // DA
            "\(item) might be delicious, but it might also be your final drink.",  // DP
            "Wisdom suggests \(item) should remain undrunk for now.",  // MT
        )
    }

    public override func drinkUndrinkableDenied(_ item: String) -> String {
        oneOf(
            "You attempt to drink \(item) with the confidence of someone who's never met physics.",  // DP
            "\(item) proves remarkably resistant to your hydration efforts.",  // MT
            "You try sipping \(item) before remembering the basic properties of matter.",  // TC
            "One's throat, regrettably, is no match for \(item).",  // NC
            "You attempt to drink \(item) and immediately question your understanding of liquids.",  // OW
            "\(item) remains stubbornly undrinkable despite your best intentions.",  // SJ
            "You discover that \(item) tastes exactly like what it is: not a beverage.",  // DA
            "Your mouth rejects \(item) with the wisdom of experience.",  // DP
            "\(item) fails to quench your thirst, but succeeds in confusing your palate.",  // MT
            "You sample \(item) and conclude that not everything can be consumed as liquid.",  // TC
            "Attempting to drink \(item) proves as futile as it sounds.",  // NC
            "\(item) offers all the refreshment one might expect from \(item).",  // OW
            "You try drinking \(item), confirming that some things are better left unswallowed.",  // SJ
            "\(item) demonstrates why humans invented actual beverages.",  // DA
            "Your throat politely declines \(item) and suggests water instead.",  // DP
            "\(item) proves that not everything in this world is meant for consumption.",  // MT
        )
    }

    public override func eatEdibleDenied(_ item: String) -> String {
        oneOf(
            "You raise \(item) toward your lips, then pause. What if you need it later?",  // DP
            "\(item) looks delicious, but also suspiciously unwashed.",  // MT
            "You contemplate \(item) with the wariness of someone who's read fairy tales.",  // TC
            "One simply doesn't consume \(item) without proper provenance.",  // NC
            "\(item) may be edible, but is it advisable?",  // OW
            "You sniff \(item) and detect notes of uncertainty and possible regret.",  // SJ
            "\(item) appears to be in that awkward state between food and potential evidence.",  // DA
            "Your stomach growls, but your brain whispers 'poison' rather loudly.",  // DP
            "\(item) looks appetizing until you remember where you found it.",  // MT
            "You hold \(item) aloft, then think better of it. Discretion, after all.",  // TC
            "\(item) awaits consumption, but so does your continued existence.",  // NC
            "Why spoil a perfectly good \(item) by eating it?",  // OW
            "\(item) presents itself as food, but your survival instincts demur.",  // SJ
            "You consider eating \(item), then remember you're not that desperate. Yet.",  // DA
            "\(item) might be delicious, but it might also be your last meal.",  // DP
            "Common sense suggests \(item) should remain uneaten for now.",  // MT
        )
    }

    public override func eatInedibleDenied(_ item: String) -> String {
        oneOf(
            "You attempt to eat \(item) with the optimism of someone who's never met a texture they couldn't chew.",  // DP
            "\(item) proves remarkably resistant to your digestive ambitions.",  // MT
            "You gnaw \(item) briefly before remembering the difference between food and objects.",  // TC
            "One's teeth, sadly, are no match for \(item).",  // NC
            "You bite \(item) and immediately question your life choices.",  // OW
            "\(item) remains stubbornly inedible despite your best efforts.",  // SJ
            "You discover that \(item) tastes exactly like what it is: not food.",  // DA
            "Your mouth rejects \(item) with the dignity of good breeding.",  // DP
            "\(item) fails to satisfy your hunger, but succeeds in confusing your dentist.",  // MT
            "You sample \(item) and conclude that evolution was right about taste buds.",  // TC
            "Attempting to consume \(item) proves as futile as it sounds.",  // NC
            "\(item) offers all the nutritional value one might expect from \(item).",  // OW
            "You try eating \(item), confirming that some things are better left unchewed.",  // SJ
            "\(item) demonstrates why humans invented actual food.",  // DA
            "Your stomach politely declines \(item) and suggests alternatives.",  // DP
            "\(item) proves that not everything in this world is meant for consumption.",  // MT
        )
    }

    public override func expectedDirection() -> String {
        oneOf(
            "Your feet remain stubbornly attached to here rather than there.",  // DA
            "The universe politely declines your geographical improvisation.",  // DA
            "Geography requires actual directions, not wishful mumbling.",  // TC
            "Your creative cartography impresses no one, least of all reality.",  // TC
            "One cannot simply GO to places that exist only in hope.",  // NC
            "The compass rose wilts at your directional creativity.",  // NC
            "Physics requires more specific instructions than that.",  // RF
            "The laws of motion need actual vectors, not poetry.",  // RF
            "Sir, that is not among the approved directions of travel.",  // SJ
            "The points of the compass do not include your invention.",  // SJ
            "Sorry, but gibberish isn't a cardinal direction yet.",  // DP
            "Your imaginary compass points nowhere particularly useful.",  // DP
            "Space-time doesn't bend to accommodate your spelling experiments.",  // TP
            "The multiverse checked; that's not a valid exit anywhere.",  // TP
            "My GPS just laughed and shut itself off.",  // DS
            "Even quantum mechanics can't justify that direction.",  // DS
            "The cosmos heard your request and said 'Gesundheit.'",  // MT
            "You've discovered a new way to stay perfectly still.",  // MT
            "One cannot go where language itself fears to tread.",  // OW
            "Your destination exists only in the fever dreams of dictionaries.",  // OW
        )
    }

    public override func extinguishFail(_ command: Command, item: String) -> String {
        oneOf(
            "You attempt to \(command.verbPhrase) \(item), which wasn't burning anyway.",  // DP
            "\(item) demonstrates remarkable resistance to being extinguished while unlit.",  // DP
            "Your \(command.gerund) technique proves unnecessary for non-burning \(item).",  // SJ
            "\(item) remains unlit despite your vigorous \(command.gerund) attempts.",  // SJ
            "Such firefighting enthusiasm! \(item) wasn't on fire to begin with.",  // OW
            "You \(command.verbPhrase) \(item) with the zeal of someone fighting imaginary flames.",  // OW
            "\(item) isn't burning, but your \(command.gerund) technique is admirable.",  // MT
            "Your \(command.gerund) skills meet \(item)'s complete lack of combustion.",  // MT
            "A stirring performance of preventive \(command.gerund).",  // NC
            "\(item) proves remarkably flame-free with or without your \(command.gerund) efforts.",  // NC
            "You \(command.verbPhrase) \(item) prophylactically. Fire prevention at its finest.",  // DA
            "\(item) tolerates your \(command.gerund) without having been on fire.",  // DA
            "No combustion detected. \(command.gerund) protocols unnecessary.",  // RF
            "\(item) demonstrates zero thermal activity requiring \(command.gerund).",  // RF
            "\(item) appreciates your \(command.gerund) vigilance but wasn't burning.",  // TC
            "Your \(command.gerund) technique shows promise against non-existent flames.",  // TC
            "You try to \(command.verbPhrase) \(item). It's already pretty extinguished.",  // DS
            "\(item) wasn't on fire, but thanks for the \(command.gerund) gesture.",  // DS
            "\(item) absorbs your \(command.gerund) energy without having needed it.",  // TP
            "The \(command.gerund) of unburning \(item) achieves predictable redundancy."  // TP
        )
    }

    public override func failSound() -> String {
        oneOf(
            "Bzzzpt.",  // Classic electrical short
            "Whirrr-clunk.",  // Mechanical grinding to halt
            "Zzzt-pop!",  // Vacuum tube failure
            "Kachunk-wheeze.",  // Steam-powered disappointment
            "Fizzle-hum.",  // Electrical uncertainty
            "Clatter-spark!",  // Relay malfunction
            "Thrum-ping.",  // Engine hiccup
            "Bzzt-whoom.",  // Power surge followed by silence
            "Click-buzz-silence.",  // Progressive failure
            "Whirr-thunk.",  // Gear slip
            "Ding-fizzle.",  // Bell followed by failure
            "Kerpow-hiss.",  // Dramatic electrical death
            "Chunk-rattle.",  // Mechanical protest
            "Zap-wheeze.",  // Electronic gasp
            "Boop-clank.",  // Digital meets analog failure
            "Fizz-pop-silence.",  // Three-stage breakdown
            "Whoomph.",  // Sudden power loss
            "Tick-tick-CLUNK.",  // Countdown to failure
            "Bzoing-hum.",  // Spring-loaded confusion
            "Kerchunk-whistle."  // Steam valve emergency
        )
    }

    public override func feelNothingUnusual(_ verb: Verb) -> String {
        oneOf(
            "Your hands report touching nothing but disappointed expectations.",  // DA
            "You feel around hopefully. Reality remains untouchable.",  // DA
            "Your tactile investigation yields predictably abstract results.",  // DP
            "You grope at the intangible with admirable dedication.",  // DP
            "Such bold touching! The universe remains magnificently unfelt.",  // OW
            "Your fingers discover the texture of pure conceptual emptiness.",  // OW
            "One's hands encounter nothing but the feeling of foolishness.",  // SJ
            "Your tactile exploration achieves maximum philosophical futility.",  // SJ
            "You feel around like you're trying to pet the wind.",  // MT
            "Your hands work overtime detecting absolutely nothing.",  // MT
            "A stirring performance of atmospheric fondling.",  // NC
            "How thoroughly you investigate the texture of nothing.",  // NC
            "Your tactile sensors process the absence of touchable phenomena.",  // RF
            "Pressure receptors report contact with theoretical surfaces only.",  // RF
            "You conduct a comprehensive manual survey of emptiness.",  // TC
            "Your fingertips map the topography of the intangible.",  // TC
            "You feel around like you're looking for a light switch in the dark.",  // DS
            "Your hands report that nothingness has no interesting texture.",  // DS
            "Your tactile reconnaissance encounters predictable incorporeality.",  // TP
            "The manual examination of the untouchable achieves cosmic insignificance."  // TP
        )
    }

    public override func fillContainerWithWhat(_ container: String) -> String {
        oneOf(
            "Fill it with what, exactly? Your boundless optimism?",  // DP
            "One must specify the filling material, unless you expect miracles.",  // OW
            "\(container) awaits your more specific instructions.",  // SJ
            "Fill it with what? The suspense is killing me.",  // MT
            "\(container) remains disappointingly empty of everything except possibility.",  // TC
            "\(container) sits there, unfilled and judgmental.",  // DP
            "I'm afraid \(container)-filling requires a certain specificity of purpose.",  // NC
            "The universe has not yet evolved to read minds about \(container) contents.",  // DA
            "\(container) maintains its hollow dignity.",  // OW
            "What filling material did you have in mind? Air doesn't count.",  // MT
            "\(container) waits with the patience of the perpetually empty.",  // TC
            "Fill it with what, pray tell? My curiosity grows.",  // SJ
        )
    }

    public override func fillContainerWithSource(_ container: String, source: String) -> String {
        oneOf(
            "\(source) shows a stubborn reluctance to cooperate with \(container).",  // DP
            "Alas, \(source) and \(container) seem incompatible.",  // OW
            "\(container) remains as empty as before, despite your efforts.",  // SJ
            "\(source) refuses to be contained, much like my patience.",  // MT
            "\(container) and \(source) have philosophical differences about this arrangement.",  // TC
            "Your filling technique needs work.",  // DP
            "\(source) demonstrates a remarkable resistance to filling \(container).",  // NC
            "The laws of physics appear to have strong opinions about this combination.",  // DA
            "\(container) maintains its dignity by remaining unfilled.",  // OW
            "\(source) seems disinclined to relocate.",  // MT
            "\(container) and \(source) have reached an impasse.",  // TC
            "This endeavor proves less successful than anticipated.",  // SJ
            "\(source) exhibits a disappointing lack of cooperation.",  // NC
        )
    }

    public override func gameRestored() -> String {
        oneOf(
            "Game restored. Your past self returns victorious.",  // OW
            "Welcome back to your former glory.",  // OW
            "Restoration complete. Yesterday lives again.",  // DP
            "Your archived self emerges blinking into the light.",  // DP
            "Time travel successful. The past is now.",  // SJ
            "Your preserved adventures resume their rightful place.",  // SJ
            "Game restored. The digital phoenix rises.",  // MT
            "Your saved self shakes off the dust of electronic sleep.",  // MT
            "Restoration complete. The timeline corrects itself.",  // NC
            "How splendid! Your former existence reasserts itself.",  // NC
            "Game restored. The universe remembers you fondly.",  // DA
            "Your backup reality successfully overwrites the present.",  // DA
            "Temporal coordinates reset. You are when you were.",  // RF
            "Data integrity verified. Past self deployed successfully.",  // RF
            "Game restored. Your narrative resurrects beautifully.",  // TC
            "The saved timeline emerges from its chrysalis.",  // TC
            "Game restored. Your digital ghost becomes flesh again.",  // DS
            "Welcome back to the land of the saved.",  // DS
            "Restoration achieved. The archived you reclaims existence.",  // TP
            "Your quantum state reverts to previous configuration."  // TP
        )
    }

    public override func gameSaved(_ path: String) -> String {
        oneOf(
            "Game saved to '\(path)'. Your current glory is now immortal.",  // DA
            "Progress preserved for posterity at '\(path)'.",  // DA
            "Your adventures are safely archived at '\(path)'.",  // SJ
            "One's current state achieves digital permanence at '\(path)'.",  // SJ
            "Game saved to '\(path)'. Your present self joins the ranks of the preserved.",  // DP
            "Another backup copy of your magnificent existence, this one at '\(path)'.",  // DP
            "Splendid! Your timeline receives official documentation at '\(path)'.",  // OW
            "Your current chapter earns a place in the digital library at '\(path)'.",  // OW
            "Game saved to '\(path)'. Future you will thank present you.",  // MT
            "Your progress gets its own little slice of immortality at '\(path)'.",  // MT
            "How prudent! Your achievements now have job security at '\(path)'.",  // NC
            "Game saved to '\(path)'. The universe takes note of your progress.",  // NC
            "Data crystallized at '\(path)'. Your current state now exists forever.",  // RF
            "Quantum snapshot complete at '\(path)'. Reality backed up successfully.",  // RF
            "Game saved to '\(path)'. Your narrative arc receives proper documentation.",  // TC
            "The story pauses to admire its own reflection at '\(path)'.",  // TC
            "Game saved to '\(path)'. Your digital footprint is now fossil-worthy.",  // DS
            "Another save state joins your collection of selves at '\(path)'.",  // DS
            "Your temporal coordinates are now officially on file at '\(path)'.",  // TP
            "The universe updates its records with your current configuration at '\(path)'.",  // TP
            capitalize: false
        )
    }

    public override func goodbye() -> String {
        oneOf(
            "Farewell, brave adventurer. Until next time.",  // SJ
            "Very well. The story pauses here.",  // SJ
            "So long, and thanks for all the verbs.",  // DA
            "Reality awaits your reluctant return.",  // DA
            "Abandoning us already? How predictable.",  // DP
            "Fine. We'll just wait here in the dark.",  // DP
            "What a delightfully abrupt conclusion!",  // OW
            "Parting is such sweet save state.",  // OW
            "Running away so soon? The adventure barely knew you.",  // MT
            "The adventure'll keep. Probably.",  // MT
            "Exit, pursued by bear. Or boredom.",  // NC
            "Do drop in again when reality disappoints.",  // NC
            "The universe acknowledges your departure.",  // RF
            "Temporal suspension initiated. Farewell.",  // RF
            "Your absence will be noted, if not mourned.",  // TC
            "The narrative mourns your departure.",  // TC
            "Okay bye! Don't let reality bite.",  // DS
            "See you in the next existential crisis.",  // DS
            "The void accepts your resignation.",  // TP
            "Your escape vector is confirmed. Godspeed."  // TP
        )
    }

    public override func jump() -> String {
        oneOf(
            "You jump with the athletic grace of someone who's never questioned the purpose of jumping.",  // DP
            "Your leap achieves the perfect balance between effort and complete pointlessness.",  // MT
            "How wonderfully spontaneous--jumping like some sort of vertical enthusiast without a cause.",  // OW
            "You jump with the sort of physical exuberance that makes gravity seem like a suggestion.",  // NC
            "Your leap demonstrates a refreshing commitment to defying the ground beneath your feet.",  // SJ
            "You jump as if the air might suddenly provide whatever you're looking for.",  // TC
            "Your jumping achieves the remarkable feat of going nowhere while expending considerable energy.",  // DA
            "You leap with the same purposeful direction that's guided all your other decisions.",  // DP
            "Your jump suggests you've confused motion with progress.",  // MT
            "You demonstrate the sort of vertical ambition that makes ladders seem redundant.",  // OW
            "Your jumping reveals a mind that's transcended the conventional need for destinations.",  // NC
            "You leap with the patient dedication of someone who's never heard of stairs.",  // SJ
            "Your jump accomplishes exactly what one might expect from unsupported optimism.",  // TC
            "You jump as if the act of jumping were somehow more important than landing anywhere useful."  // DA
        )
    }

    open override func jumpCharacter(_ character: String) -> String {
        oneOf(
            "You jump \(character) with the social grace of someone who's never heard of personal boundaries.",  // DP
            "Your leap over \(character) demonstrates a refreshing approach to interpersonal navigation.",  // MT
            "How wonderfully direct--jumping \(character) like some sort of athletic diplomat.",  // OW
            "You attempt to jump \(character) with the sort of social awareness that makes etiquette books weep.",  // NC
            "Your leap toward \(character) reveals a mind that's transcended conventional greeting methods.",  // SJ
            "You jump \(character) as if athletic prowess were simply another form of introduction.",  // TC
            "Your jumping attempt achieves the perfect balance between exercise and social catastrophe.",  // DA
            "You leap at \(character) with the same interpersonal finesse that's made you so universally beloved.",  // DP
            "Your jump suggests you've confused \(character) with something considerably less animate.",  // MT
            "You attempt to jump \(character) with the sort of athletic diplomacy that makes enemies for life.",  // OW
            "\(character) receives your jumping attempt with all the enthusiasm you've come to expect.",  // NC
            "You jump \(character) with the patient dedication of someone who's never heard of saying hello.",  // SJ
            "Your leaping technique reveals the sort of social skills that make hermits seem gregarious.",  // TC
            "You attempt to jump \(character) as if gravity were the only relationship you needed to consider.",  // DA
        )
    }

    open override func jumpEnemy(_ enemy: String) -> String {
        oneOf(
            "You jump \(enemy) with the tactical genius of someone who's confused athletics with warfare.",  // DP
            "Your leap at \(enemy) demonstrates a refreshing approach to conflict resolution.",  // MT
            "How wonderfully creative--jumping \(enemy) like some sort of gravity-powered warrior.",  // OW
            "You attempt to jump \(enemy) with the sort of combat strategy that makes generals weep.",  // NC
            "Your leap toward \(enemy) reveals a mind that's transcended conventional fighting methods.",  // SJ
            "You jump \(enemy) as if athletic ability were simply another form of intimidation.",  // TC
            "Your jumping attack achieves the perfect balance between exercise and complete tactical failure.",  // DA
            "You leap at \(enemy) with the same military brilliance that's made all your other strategies so memorable.",  // DP
            "Your jump suggests you've confused \(enemy) with something considerably less hostile.",  // MT
            "You attempt to jump \(enemy) with the sort of combat finesse that makes surrender seem wise.",  // OW
            "\(enemy) receives your jumping attack with all the concern of someone who's seen this before.",  // NC
            "You jump \(enemy) with the patient dedication of someone who's never heard of weapons.",  // SJ
            "Your leaping technique reveals the sort of combat skills that make pacifists seem dangerous.",  // TC
            "You attempt to jump \(enemy) as if momentum were somehow more effective than actual fighting.",  // DA
        )
    }

    open override func jumpObject(_ item: String) -> String {
        oneOf(
            "You jump \(item) with the athletic confidence of someone who's never met an obstacle they couldn't misunderstand.",  // DP
            "Your leap over \(item) demonstrates a refreshing disregard for the laws of physics and common sense.",  // MT
            "How wonderfully optimistic--jumping \(item) like some sort of gravity-defying hopeful.",  // OW
            "You attempt to jump \(item) with the sort of spatial reasoning that makes hurdles weep.",  // NC
            "Your leap toward \(item) reveals a mind unencumbered by practical considerations.",  // SJ
            "You jump \(item) as if athletic ability were simply a matter of wanting it badly enough.",  // TC
            "Your jumping attempt achieves the perfect balance between ambition and reality.",  // DA
            "You leap at \(item) with the same tactical brilliance that's made all your other moves so memorable.",  // DP
            "Your jump suggests you've confused \(item) with something considerably more cooperative.",  // MT
            "You attempt to jump \(item) with the sort of athletic grace that makes falling seem inevitable.",  // OW
            "Your leap demonstrates the kind of optimism that makes insurance salesmen nervous.",  // NC
            "You jump \(item) with the patient dedication of someone who's never heard of going around.",  // SJ
            "Your jumping technique reveals the sort of problem-solving skills that make obstacles seem permanent.",  // TC
            "You attempt to jump \(item) as if momentum were merely a suggestion rather than a law.",  // DA
        )
    }

    open override func kickCharacter(_ character: String) -> String {
        oneOf(
            "\(character) sidesteps your crude social overture.",  // DP
            "Your attempt at physical diplomacy fails spectacularly.",  // OW
            "\(character) remains unkicked, and likely grateful.",  // MT
            "Violence proves an inadequate conversation starter.",  // TC
            "\(character) demonstrates superior footwork in avoiding you.",  // SJ
            "Your leg swings through empty air as \(character) retreats.",  // DP
            "\(character) finds your approach rather pedestrian.",  // NC
            "\(character) exhibits a marked preference for remaining unkicked.",  // DA
            "The art of kicking requires a more willing participant.",  // OW
            "\(character) maintains a safe distance from your enthusiasm.",  // MT
            "Your foot fails to make the acquaintance of \(character).",  // TC
            "\(character) politely declines your aggressive invitation.",  // SJ
            "The kick lands nowhere near its intended target.",  // NC
        )
    }

    open override func kickHeldObject(_ item: String) -> String {
        oneOf(
            "You drop-kick \(item) with more enthusiasm than effect.",  // DP
            "\(item) sails a modest distance before surrendering to gravity.",  // OW
            "Your kick sends \(item) on a brief, unimpressive journey.",  // MT
            "\(item) flies a few feet, then settles with obvious disappointment.",  // TC
            "You achieve a perfect drop-kick of minimal consequence.",  // SJ
            "\(item) travels exactly as far as your dignity allows.",  // DP
            "Your athletic prowess launches \(item) into mediocrity.",  // NC
            "\(item) experiences momentary flight before embracing the inevitable.",  // DA
            "You execute a flawless drop-kick of spectacular pointlessness.",  // OW
            "\(item) arcs gracefully through the air for all of three feet.",  // MT
            "Your drop-kick grants \(item) a brief taste of freedom.",  // TC
            "\(item) sails away with the majesty of a wounded duck.",  // SJ
            "You demonstrate that drop-kicking requires better targets than \(item).",  // NC
        )
    }

    open override func kickLargeObject(_ item: String) -> String {
        oneOf(
            "Your foot discovers why \(item) has remained stationary.",  // DP
            "\(item) wins this contest of wills quite decisively.",  // OW
            "Physics demonstrates its superiority over optimism.",  // MT
            "Your toe questions your tactical judgment.",  // TC
            "\(item) remains smugly unmoved by your efforts.",  // SJ
            "That went exactly as well as expected.",  // DP
            "\(item) appears unimpressed by your assault.",  // NC
            "Your foot and \(item) have a brief, one-sided conversation.",  // DA
            "\(item) maintains its position with admirable stubbornness.",  // OW
            "You achieve nothing except a valuable lesson in futility.",  // MT
            "\(item) absorbs your kick with professional indifference.",  // TC
            "Your foot learns respect for immovable objects.",  // SJ
            "\(item) remains exactly where it was, only slightly warmer.",  // NC
        )
    }

    open override func kickSmallObject(_ item: String) -> String {
        oneOf(
            "You successfully demonstrate the futility of foot-based problem solving.",  // MT
            "Your kick accomplishes everything except what you intended.",  // SJ
            "Your kick achieves a momentary disturbance of \(item)'s position.",  // OW
            "You succeed in making \(item) slightly less comfortable.",  // TC
            "\(item) trembles under your assault, then recovers its composure.",  // SJ
            "Your foot and \(item) have a brief, unproductive encounter.",  // DP
            "\(item) rocks gently, as if considering movement, then thinks better of it.",  // NC
            "Your kick grants \(item) a temporary change of perspective.",  // OW
            "\(item) shifts position just enough to mock your efforts.",  // MT
            "You achieve the remarkable feat of moving \(item) nowhere.",  // TC
            "\(item) wobbles with all the enthusiasm of a reluctant participant.",  // SJ
            "Your kick inspires \(item) to a brief dance, then immediate stillness.",  // NC
            "\(item) is almost philosophical in its resistance to meaningful change.",  // OW
        )
    }

    open override func kissCharacter(_ character: String) -> String {
        oneOf(
            "\(character) retreats from your romantic overture with admirable speed.",  // DP
            "Your kiss lands on empty air as \(character) sidesteps gracefully.",  // OW
            "\(character) demonstrates remarkable agility in avoiding your affections.",  // MT
            "The kiss misses its target by several feet and considerable social distance.",  // TC
            "\(character) politely declines your intimate invitation.",  // SJ
            "Your lips pucker uselessly as \(character) maintains a safe perimeter.",  // DP
            "\(character) exhibits a marked preference for remaining unkissed.",  // NC
            "\(character) finds your approach rather presumptuous.",  // DA
            "The art of kissing requires a more willing participant than \(character).",  // OW
            "\(character) backs away with the wisdom of experience.",  // MT
            "Your romantic gesture falls flat in the face of \(character)'s indifference.",  // TC
            "\(character) suggests you might reconsider your social strategies.",  // SJ
            "The kiss attempt proves as successful as your other diplomatic efforts.",  // NC
        )
    }

    open override func kissEnemy(_ enemy: String) -> String {
        oneOf(
            "\(enemy) finds your timing rather inappropriate.",  // DP
            "The kiss attempt proves less effective than conventional weapons against \(enemy).",  // OW
            "\(enemy) seems unimpressed by this novel combat technique.",  // MT
            "Romance proves a poor substitute for actual strategy with \(enemy).",  // TC
            "\(enemy) questions your understanding of battlefield etiquette.",  // SJ
            "The kiss misses as \(enemy) prioritizes violence over affection.",  // DP
            "\(enemy) demonstrates a marked preference for traditional hostilities.",  // NC
            "This tactical innovation confuses \(enemy), and everyone else, including yourself.",  // DA
            "\(enemy) sidesteps both your kiss and your logic.",  // OW
            "The art of war does not include kissing \(enemy), apparently.",  // MT
            "\(enemy) finds your approach refreshingly naive.",  // TC
            "\(enemy) maintains professional standards despite your romantic overtures.",  // SJ
            "The kiss fails to achieve the desired ceasefire with \(enemy).",  // NC
        )
    }

    open override func kissObject(_ item: String) -> String {
        oneOf(
            "\(item) remains coldly unresponsive to your affections.",  // DP
            "Your kiss fails to awaken any hidden personality in \(item).",  // OW
            "\(item) offers all the warmth of a tax collector.",  // MT
            "You achieve an intimate moment with \(item)'s complete indifference.",  // TC
            "\(item) maintains its stoic silence despite your romantic gesture.",  // SJ
            "Your lips meet \(item) with predictably one-sided results.",  // DP
            "\(item) proves disappointingly unresponsive to your charms.",  // NC
            "\(item) fails to transform into anything more kissable.",  // DA
            "Your romantic overture leaves \(item) unmoved, literally and figuratively.",  // OW
            "\(item) demonstrates the emotional range of its constituent materials.",  // MT
            "You successfully kiss \(item) and accomplish absolutely nothing.",  // TC
            "\(item) accepts your kiss with the enthusiasm of a brick wall.",  // SJ
            "Your affection for \(item) remains tragically unrequited.",  // NC
        )
    }

    open override func kissSelf() -> String {
        oneOf(
            "You achieve a moment of perfect self-appreciation.",  // DP
            "The kiss succeeds admirably, though the audience remains unimpressed.",  // OW
            "You demonstrate remarkable flexibility and questionable priorities.",  // MT
            "This intimate moment with yourself proves oddly unsatisfying.",  // TC
            "You accomplish the feat with more enthusiasm than dignity.",  // SJ
            "The kiss lands precisely where intended, accomplishing nothing useful.",  // DP
            "You exhibit admirable self-regard and dubious judgment.",  // NC
            "The universe observes your self-affection with polite bewilderment.",  // DA
            "You successfully kiss yourself, solving exactly zero problems.",  // OW
            "Your lips meet their intended target with predictable results.",  // MT
            "You achieve perfect romantic success and complete practical failure.",  // TC
            "The kiss proves that some gestures are better left unattempted.",  // SJ
            "You demonstrate that self-love has its limits.",  // NC
        )
    }

    open override func laugh() -> String {
        oneOf(
            "You laugh with the timing of someone who's just gotten their own joke.",  // DP
            "Your laughter echoes with all the spontaneity of a rehearsed sneeze.",  // MT
            "How delightfully mad--laughing at nothing in particular, like a proper eccentric.",  // OW
            "You laugh with the sort of forced merriment that makes children hide behind furniture.",  // NC
            "Your laughter demonstrates a commendable commitment to being amused by your own circumstances.",  // SJ
            "You laugh like someone who's just realized they're the punchline.",  // TC
            "Your laughter fills the air with the musical quality of someone who's clearly lost the plot.",  // DA
            "You emit a laugh that suggests you find your current situation funnier than anyone else does.",  // DP
            "Your laughter has all the naturalness of a politician's smile.",  // MT
            "You laugh with the abandon of someone who's given up on making sense.",  // OW
            "Your mirth echoes with the hollow ring of someone laughing at their own expense.",  // NC
            "You laugh as if the universe had just shared its best joke with you personally.",  // SJ
            "Your laughter suggests you've found something amusing that the rest of us have missed.",  // TC
            "You laugh with the confidence of someone who knows exactly what's funny about nothing at all.",  // DA
        )
    }

    open override func laughAbout(_ entity: String) -> String {
        oneOf(
            "You laugh about \(entity) with the gossipy delight of someone who's run out of actual people to discuss.",  // DP
            "Your laughter about \(entity) suggests you find it more entertaining than most dinner companions.",  // MT
            "How charmingly philosophical--finding \(entity) a source of such profound amusement.",  // OW
            "You laugh about \(entity) with the sort of observational humor that makes small talk unbearable.",  // NC
            "Your amusement regarding \(entity) demonstrates a mind capable of finding comedy in the mundane.",  // SJ
            "You laugh about \(entity) as if it were the punchline to a joke only you understand.",  // TC
            "Your laughter about \(entity) fills the air with the sound of someone who's easily entertained.",  // DA
            "You find \(entity) amusing in ways that suggest you need to get out more.",  // DP
            "Your laughter about \(entity) has all the warmth of someone sharing an inside joke with themselves.",  // MT
            "You laugh about \(entity) with the sort of wit that makes silence seem like a mercy.",  // OW
            "\(entity) becomes your source of mirth, which says more about you than it does about \(entity).",  // NC
            "You laugh about \(entity) with the confidence of someone who's never questioned their own sense of humor.",  // SJ
            "Your amusement about \(entity) suggests a mind that finds entertainment in the most unlikely places.",  // TC
            "You laugh about \(entity) as if discussing it at length might somehow make it funnier.",  // DA
        )
    }

    open override func laughAt(_ entity: String) -> String {
        oneOf(
            "You laugh at \(entity) with the cruel precision of someone who's finally found their intellectual equal.",  // DP
            "Your laughter at \(entity) demonstrates a refreshing willingness to mock anything within range.",  // MT
            "How wonderfully rude--laughing at \(entity) like some sort of playground bully with vocabulary.",  // OW
            "You laugh at \(entity) with the sort of social grace that makes diplomats weep.",  // NC
            "Your mockery of \(entity) reveals a mind capable of finding humor in the most inappropriate places.",  // SJ
            "You laugh at \(entity) as if it had personally offended your sense of dignity.",  // TC
            "\(entity) receives your laughter with all the concern of something that lacks ears.",  // DA
            "You direct your mirth at \(entity) with the targeting skills of a broken compass.",  // DP
            "Your laughter at \(entity) suggests you've confused ridicule with conversation.",  // MT
            "You laugh at \(entity) with the sort of wit that makes silence seem golden.",  // OW
            "\(entity) endures your laughter with the stoic patience of something that's seen worse.",  // NC
            "You mock \(entity) with all the sophistication of someone who's never owned a mirror.",  // SJ
            "Your laughter at \(entity) echoes with the hollow ring of someone laughing alone.",  // TC
            "You laugh at \(entity) as if it might suddenly develop feelings just to spite you.",  // DA
        )
    }

    open override func lightRequiresFlame(_ item: String) -> String {
        oneOf(
            "You contemplate lighting \(item), then realize you lack ignition materials.",  // MT
            "\(item) awaits your fire-starting expertise. And actual fire.",  // MT
            "Your lighting ambitions exceed your current flame-making resources.",  // DP
            "\(item) would gladly ignite, if only you had something to light it with.",  // DP
            "Such practical thinking! Now you just need something to create actual flame.",  // OW
            "\(item) sits ready for illumination, pending ignition assistance.",  // OW
            "One requires a flame source to properly light \(item).",  // SJ
            "\(item) demonstrates admirable cooperation, awaiting only fire.",  // SJ
            "\(item) is willing, but your fire-starting technique needs work.",  // NC
            "A stirring performance of flame-free lighting attempts.",  // NC
            "\(item) proves cooperative but unself-igniting.",  // DA
            "Your lighting logic is sound. Your ignition method needs development.",  // DA
            "Combustion protocols require initial flame source for \(item).",  // RF
            "\(item) awaits thermal activation from external ignition device.",  // RF
            "\(item) tolerates your lighting attempts while lacking actual fire.",  // TC
            "Your lighting technique shows promise but lacks essential combustion elements.",  // TC
            "You try to light \(item) with pure optimism. Fire doesn't work that way.",  // DS
            "\(item) would love to burn, but needs a little help getting started.",  // DS
            "\(item) absorbs your lighting intentions without achieving ignition.",  // TP
            "The illumination of \(item) requires more than lighting enthusiasm."  // TP
        )
    }

    open override func lightRequiresIgniter(_ item: String, igniter: String) -> String {
        oneOf(
            "You contemplate lighting \(item) with \(igniter), then realize \(igniter) needs lighting first.",  // RF
            "\(igniter) demonstrates poor qualifications as an ignition source in its current state.",  // RF
            "Your lighting technique fails to account for \(igniter)'s own ignition requirements.",  // DP
            "\(item) awaits flame while \(igniter) awaits the same.",  // DP
            "Such logical thinking! Now you just need to light \(igniter) first.",  // OW
            "\(igniter) proves willing but currently flame-free.",  // OW
            "One requires an already-ignited \(igniter) to properly light \(item).",  // SJ
            "\(igniter) lacks the necessary pre-existing flame for \(item).",  // SJ
            "\(igniter) isn't much help until it's burning itself.",  // MT
            "Your lighting logic is sound, but \(igniter) needs a head start.",  // MT
            "A stirring performance of sequential ignition theory.",  // NC
            "\(igniter) and \(item) both await the same missing ingredient: fire.",  // NC
            "\(item) would cooperate, if \(igniter) were actually aflame.",  // DA
            "Your lighting partnership lacks an initial spark source.",  // DA
            "\(igniter) requires pre-ignition before assisting with \(item).",  // TC
            "Your lighting technique shows promise but suffers from the unlit-igniter problem.",  // TC
            "You try to light \(item) with unlit \(igniter). Fire doesn't work recursively.",  // DS
            "\(igniter) would love to help light \(item), but needs lighting itself first.",  // DS
            "\(item) and \(igniter) absorb your lighting intentions without achieving ignition.",  // TP
            "The illumination chain requires \(igniter) to be pre-ignited."  // TP
        )
    }

    open override func listen() -> String {
        oneOf(
            "You listen with the focused attention of someone who's forgotten what they're supposed to be hearing.",  // DP
            "Your ears detect the usual symphony of absolutely nothing worth mentioning.",  // MT
            "Your auditory faculties engage with their customary efficiency at detecting the unremarkable.",  // SJ
            "You listen as if the world might whisper its secrets to someone who's clearly not paying attention.",  // TC
            "You listen with the same keen perception that got you into this situation.",  // DP
            "The world continues its policy of having nothing particularly urgent to tell you.",  // MT
            "Your listening skills remain as sharp as your decision-making abilities.",  // NC
            "You listen with the patient dedication of someone who's never heard anything worth hearing.",  // SJ
            "The universe maintains its usual conversational silence in your presence.",  // TC
            "You listen as if expecting the air itself to finally acknowledge your existence.",  // DA
            "You hear the deafening sound of your own expectations.",  // DP
            "You listen intently to absolutely nothing in particular.",  // DP
            "You hear yourself listening, which is oddly recursive.",  // RF
            "The silence is broken only by your earnest listening.",  // RF
            "You attend to the sublime symphony of nothing happening.",  // OW
            "You listen with exquisite attention to sweet nothingness.",  // OW
            "You hear everything except what you're listening for.",  // MT
            "Your ears work overtime detecting the perfectly ordinary.",  // MT
            "You strain to hear something--anything--of consequence. No luck.",  // SJ
            "You listen with admirable concentration to unremarkable silence.",  // SJ
            "The soundscape offers nothing worth the effort.",  // TC
            "You hear only the whisper of wasted attention.",  // TC
            "What a marvelous performance of active non-discovery!",  // NC
            "You listen dramatically, learning nothing dramatically.",  // NC
            "You detect the faint sound of time passing unproductively.",  // DA
            "You hear the universe not caring about your problems.",  // DA
            "You eavesdrop on the fascinating conversation of silence.",  // DS
            "Your ears report nothing worth writing home about.",  // DS
            "You perceive the white noise of irrelevance.",  // TP
            "You tune in to the frequency of futility."  // TP
        )
    }

    open override func listenInDarkness() -> String {
        oneOf(
            "In the darkness, you hear your imagination working overtime.",  // DA
            "You listen to the dark, which sounds suspiciously like regular silence.",  // DA
            "The darkness offers no auditory clues whatsoever.",  // SJ
            "You strain your ears against the oppressive silence of blackness.",  // SJ
            "You hear nothing, but more ominously than usual.",  // DP
            "The dark keeps its secrets, despite your best eavesdropping.",  // DP
            "Such attentive listening! The darkness remains unimpressed.",  // OW
            "You listen beautifully to the exquisite sound of pitch black.",  // OW
            "Your ears search the darkness, finding only more darkness.",  // MT
            "You hear what might be nothing, or possibly less.",  // MT
            "The darkness sounds exactly like you'd expect--silent.",  // NC
            "You listen with theatrical intensity to theatrical nothingness.",  // NC
            "Your cochlea detects zero photons, which isn't their job anyway.",  // RF
            "The darkness remains acoustically indistinguishable from regular emptiness.",  // RF
            "You hear either nothing or your deepest fears. Probably nothing.",  // TC
            "The void whispers sweet nothings--emphasis on nothing.",  // TC
            "You listen like a bat, minus the echolocation skills.",  // DS
            "Your ears report that darkness sounds remarkably unremarkable.",  // DS
            "The black silence thrums with absence of information.",  // TP
            "You perceive the non-sound of invisible non-events."  // TP
        )
    }

    open override func listenFor(_ item: String) -> String {
        oneOf(
            "You listen for \(item) with the hopeful desperation of someone who's never grasped the concept of silence.",  // DP
            "Your ears strain for any hint of \(item) with all the success of a tone-deaf musician.",  // MT
            "How wonderfully optimistic--listening for \(item) like some sort of auditory treasure hunter.",  // OW
            "You listen for \(item) with the sort of focused expectation that makes disappointment inevitable.",  // NC
            "Your auditory vigil for \(item) demonstrates a touching faith in the universe's conversational abilities.",  // SJ
            "You listen for \(item) as if it might suddenly announce its presence like a polite dinner guest.",  // TC
            "\(item) fails to make itself acoustically known, apparently lacking your sense of dramatic timing.",  // DA
            "You strain to hear \(item) with the dedication of someone who's confused listening with summoning.",  // DP
            "Your ears remain alert for \(item) with all the effectiveness of a lighthouse in a desert.",  // MT
            "You listen for \(item) with the patient hope of someone who's never met a disappointing silence.",  // OW
            "\(item) maintains its acoustic anonymity despite your concentrated auditory attention.",  // NC
            "You listen for \(item) with the sort of determination that makes giving up seem like wisdom.",  // SJ
            "Your ears search for \(item) as if sound were simply a matter of wanting it badly enough.",  // TC
            "You listen for \(item) with the confident expectation of someone who's clearly never tried this before.",  // DA
        )
    }

    open override func listenTo(_ item: String) -> String {
        oneOf(
            "You listen to \(item) with the analytical skills of someone who's never learned to interpret what they hear.",  // DP
            "\(item)'s sounds reveal exactly as much as you'd expect from your listening comprehension.",  // MT
            "How wonderfully attentive--listening to \(item) like some sort of acoustic scholar without a degree.",  // OW
            "You listen to \(item) with the sort of focused concentration that yields absolutely nothing useful.",  // NC
            "\(item)'s noises provide you with all the insight of a foreign language you've never studied.",  // SJ
            "You listen to \(item) as if careful attention might somehow translate sound into meaning.",  // TC
            "\(item) continues making its sounds with cheerful indifference to your interpretive abilities.",  // DA
            "You listen with the same keen perception that's served you so well in other situations.",  // DP
            "\(item)'s sounds wash over you like wisdom over a particularly dense student.",  // MT
            "You demonstrate the sort of careful listening that makes actual understanding seem overrated.",  // OW
            "\(item) makes its noises while you make your listening face--a perfect match.",  // NC
            "You listen to \(item) with the patient dedication of someone who's confused hearing with comprehending.",  // SJ
            "\(item)'s sounds tell you a story in a language you've apparently never learned to speak.",  // TC
            "You listen to \(item) as if the secret to understanding lay in simply trying harder.",  // DA
        )
    }

    open override func move() -> String {
        oneOf(
            "You move imperceptibly, if at all.",  // SJ
            "Motion without direction accomplishes exactly what you'd expect.",  // SJ
            "You wiggle contemplatively. Close enough.",  // DS
            "You achieve a state of theoretical mobility.",  // DS
            "Move where? Move what? Move along.",  // DP
            "You vibrate with potential kinetic energy.",  // DP
            "Such graceful intentions! Such stationary results!",  // OW
            "You move, philosophically speaking.",  // OW
            "You're moving on the inside, where it counts.",  // MT
            "You successfully move nothing nowhere.",  // MT
            "A stirring performance of approximate stillness.",  // NC
            "You move with all the dynamism of sculpture.",  // NC
            "Your molecules maintain their average positions.",  // RF
            "Brownian motion doesn't count as progress.",  // RF
            "You contemplate movement as an abstract concept.",  // TC
            "The idea of moving proves sufficient.",  // TC
            "You move in ways too subtle to detect.",  // DA
            "Movement achieved, just not by you.",  // DA
            "You exist dynamically in one location.",  // TP
            "Your stillness acquires a certain momentum."  // TP
        )
    }

    open override func moveItem(_ item: String) -> String {
        oneOf(
            "You give \(item) a meaningful look. It stays put.",  // DP
            "Physics and \(item) conspire against your ambitions.",  // DP
            "Such enthusiasm! But ultimately \(item) remains gorgeously stationary.",  // OW
            "You and \(item) agree to maintain the status quo.",  // OW
            "You'd move \(item), but it's already where it is.",  // MT
            "Your moving skills prove no match for \(item).",  // MT
            "A valiant attempt to relocate \(item), ultimately futile.",  // NC
            "You perform an interpretive dance around \(item). Nothing moves.",  // NC
            "Despite your best efforts, \(item) remains stubbornly positioned.",  // DA
            "You try moving \(item) with your mind. Still working on that.",  // DA
            "Newton's laws side with \(item) on this one.",  // RF
            "The inertia of \(item) defeats your good intentions.",  // RF
            "You approach \(item) with moving intentions, then lose interest.",  // TC
            "Something about \(item) suggests it prefers its current location.",  // TC
            "You consider the logistics, then abandon the whole enterprise.",  // DS
            "Moving \(item) seems like work. You opt for contemplation instead.",  // DS
            "The universe conspires to keep \(item) exactly where it is.",  // TP
            "You engage in a battle of wills with \(item), ending in a draw."  // TP
        )
    }

    open override func moveItemToTarget(_ item: String, target: String) -> String {
        oneOf(
            "You plan the perfect route from \(item) to \(target). Planning suffices.",  // TP
            "The journey from \(item) to \(target) remains purely theoretical.",  // TP
            "You envision \(item) at \(target). Vision accomplished, nothing else.",  // OW
            "Such specific intentions! Such non-specific results!",  // OW
            "The distance between \(item) and \(target) proves insurmountable.",  // SJ
            "You calculate the logistics, then prudently abandon the enterprise.",  // SJ
            "Physics vetoes your relocation proposal.",  // RF
            "The vector from \(item) to \(target) remains untraversed.",  // RF
            "\(item) and \(target) maintain their current relationship.",  // DP
            "You'd need better reasons to unite \(item) with \(target).",  // DP
            "You gesture meaningfully from \(item) to \(target). That's enough.",  // NC
            "A stirring performance of almost moving something somewhere.",  // NC
            "\(item) shows no interest in visiting \(target).",  // MT
            "Your ambitions exceed your item-moving capabilities.",  // MT
            "The universe prefers \(item) and \(target) apart.",  // DA
            "You discover that wanting isn't the same as doing.",  // DA
            "Something suggests \(item) wouldn't be happy at \(target).",  // TC
            "The proposed relocation dies in committee.",  // TC
            "You practice the motion without the actual moving.",  // DS
            "Too many steps between here and there.",  // DS
        )
    }

    open override func noWhat() -> String {
        oneOf(
            "Your emphatic 'no' rings out like a refusal to an invitation you were never given.",  // DP
            "You say no with the firm conviction of someone who's arguing with their own imagination.",  // MT
            "How delightfully contrary--rejecting absolutely nothing with such passionate certainty.",  // OW
            "You respond negatively with the sort of decisive authority that makes confusion seem like clarity.",  // NC
            "Your 'no' demonstrates a commendable commitment to disagreeing with whatever you think happened.",  // SJ
            "You say no as if the world had just made you an offer you felt compelled to refuse.",  // TC
            "Your negative response echoes with all the necessity of a 'keep out' sign on an empty lot.",  // DA
            "You disagree with the sort of vehemence that makes people wonder what they missed.",  // DP
            "Your 'no' suggests you've mistaken silence for a particularly aggressive sales pitch.",  // MT
            "You respond negatively to the resounding nothing with admirable determination.",  // OW
            "Your refusal arrives with the perfect timing of someone who's clearly having a different conversation.",  // NC
            "You say no with the confident finality of someone who's never been asked to begin with.",  // SJ
            "Your negative response demonstrates the sort of preemptive rejection that makes optimists reconsider.",  // TC
            "You refuse nothing in particular, which shows a healthy skepticism about everything in general.",  // DA
        )
    }

    open override func nothingHappens() -> String {
        oneOf(
            "Nothing of consequence ensues.",  // SJ
            "Your efforts yield predictable disappointment.",  // SJ
            "That accomplished exactly what you'd expect--nothing.",  // DP
            "Fascinating how nothing happened there.",  // DP
            "Reality remains stubbornly unimpressed.",  // OW
            "How beautifully anticlimactic!",  // OW
            "The universe shrugs at your attempt.",  // MT
            "Well, that was thoroughly unremarkable.",  // MT
            "A perfect execution of pointlessness.",  // NC
            "Splendidly done, to no effect whatsoever.",  // NC
            "The expected nothing occurs right on schedule.",  // DA
            "Achievement unlocked: Nothing.",  // DA
            "Zero observable phenomena result.",  // RF
            "Entropy remains unchanged.",  // RF
            "Your action echoes into insignificance.",  // TC
            "The moment passes without incident.",  // TC
            "That went nowhere fast.",  // DS
            "Congratulations on accomplishing nothing.",  // DS
            "The void acknowledges your effort with silence.",  // TP
            "History will not record this moment."  // TP
        )
    }

    open override func unexpectedWordsAfterCommand(_ unexpectedWords: String) -> String {
        oneOf(
            "Your linguistic creativity has exceeded our modest parsing abilities, which is both impressive and unhelpful.",  // DP
            "You've managed to confuse our simple mechanical brain with your complex human thinking.",  // MT
            "How wonderfully articulate--you've said something that makes perfect sense to everyone except us.",  // OW
            "Your command demonstrates the sort of nuanced expression that makes our vocabulary seem charmingly limited.",  // NC
            "You've achieved that rare form of clarity that transcends our humble understanding.",  // SJ
            "Your phrasing reveals the gap between human eloquence and our pedestrian comprehension.",  // TC
            "You've managed to say something perfectly reasonable that we're too dim to grasp.",  // DA
            "Your command has all the logic we lack the wit to appreciate.",  // DP
            "You've expressed yourself with a sophistication that makes our simple parsing seem quaint.",  // MT
            "Your linguistic flourish has sailed gracefully over our computational head.",  // OW
            "You've managed to be both perfectly clear and completely incomprehensible to our limited faculties.",  // NC
            "Your command demonstrates the sort of expressive range that makes our understanding seem rather narrow.",  // SJ
            "You've achieved a level of communicative precision that we're apparently too simple to decode.",  // TC
            "Your phrasing suggests a mind more flexible than our rigid interpretation skills.",  // DA
            "Your verbal artistry has left us standing here with our metaphorical mouth agape.",  // DP
            "You've constructed a sentence that's too beautiful for our crude mechanical sensibilities.",  // MT
            "How delightfully complex--you've managed to say something that sounds like it should work but doesn't.",  // OW
            "Your command has the sort of elegant complexity that makes our simple brain feel rather inadequate.",  // NC
            "You've achieved a grammatical sophistication that our humble circuits find bewildering.",  // SJ
            "Your phrasing demonstrates the kind of linguistic finesse that makes us feel like a broken telegraph.",  // TC
            "You've managed to be simultaneously logical and completely beyond our computational grasp.",  // DA
            "Your expression has all the coherence we're too primitive to process.",  // DP
            "You've crafted something that makes perfect human sense and perfect computer nonsense.",  // MT
            "Your command reveals the charming limitations of our otherwise adequate vocabulary.",  // OW
            "You've managed to speak in a dialect we apparently never learned to understand.",  // NC
            "Your phrasing suggests a conversational skill set that exceeds our programming specifications.",  // SJ
            "You've achieved that perfect balance between clarity and our complete befuddlement.",  // TC
            "Your linguistic construction has exposed the embarrassing gaps in our education.",  // DA
            logLevel: .warning
        )
    }

    open override func pourCannotPourItself() -> String {
        oneOf(
            "You attempt to violate several laws of topology.",  // RF
            "The universe prevents this recursive pouring.",  // RF
            "A paradox best left unexplored.",  // SJ
            "One cannot pour a thing upon itself, however keenly one tries.",  // SJ
            "That's not how pouring works, sweetie.",  // DP
            "You'd need a Klein bottle for that trick.",  // DP
            "Such metaphysical ambition! Such practical impossibility!",  // OW
            "You cannot pour something onto itself, though the attempt is admirable.",  // OW
            "Even you can't manage that particular impossibility.",  // MT
            "That's like trying to surprise yourself in a mirror.",  // MT
            "A stirring attempt at the physically impossible.",  // NC
            "One admires your disregard for spatial logic.",  // NC
            "You've discovered a new way to accomplish nothing.",  // DA
            "The item refuses to be both source and destination.",  // DA
            "Your Möbius pour remains theoretical.",  // TC
            "The self-referential splash fails to materialize.",  // TC
            "Physics called. It said no.",  // DS
            "You can't pour something onto itself. Trust me.",  // DS
            "The ouroboros of pouring eludes execution.",  // TP
            "Your circular logic meets linear physics."  // TP
        )
    }

    open override func pourFail() -> String {
        oneOf(
            "Your pouring ambitions exceed physical possibility.",  // NC
            "That's not how pouring works, generally speaking.",  // NC
            "The laws of physics decline your request.",  // RF
            "Some things simply cannot be poured.",  // RF
            "An innovative approach to pouring, ultimately unsuccessful.",  // SJ
            "One cannot pour what cannot be contained.",  // SJ
            "Your definition of 'pourable' needs refinement.",  // DP
            "Nice try, but no.",  // DP
            "Such creative interpretation of the verb 'pour'!",  // OW
            "Alas, pouring requires rather specific prerequisites.",  // OW
            "That's a new one. Still impossible, though.",  // MT
            "Your understanding of liquids seems somewhat flexible.",  // MT
            "The universe politely vetoes this particular pour.",  // DA
            "Pouring works differently in this reality.",  // DA
            "Not everything flows, despite your optimism.",  // TC
            "Your avant-garde approach to pouring fails spectacularly.",  // TC
            "Yeah, that's not gonna work.",  // DS
            "Physics called again. Still no.",  // DS
            "The continuum of pourability excludes this option.",  // TP
            "Your request transcends conventional fluid dynamics."  // TP
        )
    }

    open override func pourItemOnWhat(_ item: String) -> String {
        oneOf(
            "Pour \(item) where? Specificity required.",  // SJ
            "One must designate a destination for \(item).",  // SJ
            "You'll need to mention where \(item) should go.",  // DP
            "Pouring requires a target, darling.",  // DP
            "Such enthusiasm! Now choose a destination.",  // OW
            "Divine intention, but \(item) needs somewhere to go.",  // OW
            "You wave \(item) around uncertainly. Pick a spot.",  // MT
            "That's half a plan. Where's the rest?",  // MT
            "Splendid start. Now for the directional finale.",  // NC
            "One assumes you had a destination in mind?",  // NC
            "\(item) awaits your targeting instructions.",  // DA
            "Pouring into the abstract void isn't recommended.",  // DA
            "Please specify target coordinates for \(item).",  // RF
            "The pouring vector remains incomplete.",  // RF
            "\(item) hovers in conceptual limbo. Choose wisely.",  // TC
            "Your pour lacks a crucial preposition.",  // TC
            "You'll need to complete that thought.",  // DS
            "\(item) can't pour itself nowhere.",  // DS
            "The universe requires more specific pouring instructions.",  // TP
            "Destination undefined. \(item) remains unspilled."  // TP
        )
    }

    open override func pourItemOn(_ item: String, target: String) -> String {
        oneOf(
            "You reconsider the wisdom of pouring \(item) on \(target).",  // TC
            "Something about this combination seems inadvisable.",  // TC
            "You consider pouring \(item) on \(target), then think better of it.",  // SJ
            "Prudence suggests keeping \(item) and \(target) separate.",  // SJ
            "You almost pour \(item) on \(target). Almost.",  // DP
            "Second thoughts prevent this particular catastrophe.",  // DP
            "At the last moment, you spare \(target) from \(item).",  // OW
            "Such restraint! \(item) and \(target) remain unmingled.",  // OW
            "Your pouring arm freezes. Probably for the best.",  // MT
            "Something whispers this isn't the time for pouring.",  // MT
            "You rehearse the pouring motion without commitment.",  // NC
            "A dramatic pause, then sensible retreat.",  // NC
            "You abort the pour at T-minus common sense.",  // DA
            "\(target) looks unprepared for \(item)'s attention.",  // DA
            "The pouring trajectory remains theoretical.",  // RF
            "Kinetic energy converts to potential wisdom.",  // RF
            "You hesitate, sparing \(target) from \(item)'s embrace.",  // DS
            "Nah. \(target) seems fine without \(item) all over it.",  // DS
            "The moment passes. \(item) and \(target) remain apart.",  // TP
            "You suspend the pour indefinitely."  // TP
        )
    }

    open override func pourItemOnSelf(_ item: String) -> String {
        oneOf(
            "You wisely reconsider this act of self-dousing.",  // OW
            "Such dedication to personal moistening! Yet you refrain.",  // OW
            "That seems unnecessarily self-destructive.",  // DP
            "You resist the urge to baptize yourself with \(item).",  // DP
            "Your self-preservation instincts kick in.",  // MT
            "You decide against wearing \(item).",  // MT
            "At the last moment, dignity prevails.",  // SJ
            "One does not simply pour things upon oneself.",  // SJ
            "You contemplate self-anointing, then think better.",  // NC
            "A moment of theatrical self-soaking, wisely abandoned.",  // NC
            "Your survival instincts override your pouring impulse.",  // DA
            "You narrowly avoid a regrettable personal incident.",  // DA
            "The angle proves biomechanically challenging.",  // RF
            "Self-pouring vectors remain uncalculated.",  // RF
            "Something suggests this won't improve your situation.",  // TC
            "You hesitate at the threshold of self-inflicted dampness.",  // TC
            "Yeah, let's not do that to ourselves.",  // DS
            "Your self-pouring ambitions dissolve pre-implementation.",  // TP
            "The auto-baptism protocol fails to initialize."  // TP
        )
    }

    open override func pourTargetFail() -> String {
        oneOf(
            "Your chosen target resists all pouring attempts.",  // SJ
            "One cannot simply pour things there.",  // SJ
            "That's not a suitable pouring destination.",  // DP
            "Your target selection needs work.",  // DP
            "Such imaginative geography! Alas, impractical.",  // OW
            "One admires your creative approach to surfaces.",  // OW
            "Physics suggests a more conventional target.",  // RF
            "That particular surface defies liquid adhesion.",  // RF
            "Your pouring destination remains inaccessible.",  // MT
            "Can't pour there. Don't ask why.",  // MT
            "A bold choice of target, ultimately unworkable.",  // NC
            "One questions your understanding of 'onto.'",  // NC
            "The intended recipient declines your offering.",  // DA
            "That's not how surfaces work here.",  // DA
            "Your target proves philosophically unpourable-upon.",  // TC
            "Something about that destination seems wrong.",  // TC
            "Nope. Pick somewhere else.",  // DS
            "Your GPS for pouring needs recalibration.",  // DS
            "The topology of your target rejects liquids.",  // TP
            "That destination exists outside pouring parameters."  // TP
        )
    }

    open override func pullCharacter(_ character: String) -> String {
        oneOf(
            "\(character) resists your tugboat impression.",  // DS
            "You pull \(character). \(character) pulls away harder.",  // DS
            "\(character) extracts themselves from your grasp.",  // DP
            "Personal space means nothing to you, apparently.",  // DP
            "Such handsy enthusiasm! \(character) recoils accordingly.",  // OW
            "\(character) endures your pulling with visible annoyance.",  // OW
            "\(character) objects to your forcible relocation attempt.",  // SJ
            "Your pulling meets firm human resistance.",  // SJ
            "\(character) performs an elegant dodge-and-glare maneuver.",  // MT
            "You've discovered \(character) isn't a pull-toy.",  // MT
            "\(character) demonstrates the pull-away-disapprovingly technique.",  // NC
            "A masterful display of unwanted yanking.",  // NC
            "\(character) adds 'grabby' to their mental notes about you.",  // DA
            "You pull. \(character) pulls rank.",  // DA
            "Force vector meets social vector. Social wins.",  // RF
            "\(character)'s personal inertia exceeds your pull strength.",  // RF
            "\(character) questions your understanding of boundaries.",  // TC
            "Your tugging earns \(character)'s active resentment.",  // TC
            "\(character) stands firm against your draft animal impression.",  // TP
            "The pulling of others proves politically inadvisable."  // TP
        )
    }

    open override func pullEnemy(_ enemy: String) -> String {
        oneOf(
            "You pull \(enemy) closer. \(enemy) arrives violently.",  // RF
            "Congratulations on reducing \(enemy)'s attack distance.",  // RF
            "\(enemy) accepts your invitation to intimate combat.",  // MT
            "You pull \(enemy) into convenient striking range.",  // MT
            "That's certainly one way to die faster.",  // DP
            "\(enemy) appreciates the assist with closing distance.",  // DP
            "Such helpful pulling! \(enemy) responds with hitting.",  // OW
            "You've made \(enemy)'s job delightfully easier.",  // OW
            "\(enemy) allows the pull, delivers the punch.",  // SJ
            "Your strategy brings \(enemy) within optimal damage range.",  // SJ
            "\(enemy) rides your pull straight into attack position.",  // NC
            "A textbook example of counterproductive yanking.",  // NC
            "You helpfully eliminate \(enemy)'s commute to violence.",  // DA
            "\(enemy) thanks you by demonstrating proximity damage.",  // DA
            "\(enemy) interprets pulling as a request for pain.",  // TC
            "Your tug brings \(enemy) and suffering together.",  // TC
            "Smart. Now \(enemy) doesn't have to walk over.",  // DS
            "You've successfully decreased your life expectancy.",  // DS
            "\(enemy) surfs your pull into striking position.",  // TP
            "The pull succeeds. Your survival prospects don't."  // TP
        )
    }

    open override func pullObject(_ item: String) -> String {
        oneOf(
            "You pull \(item). \(item) resists passively.",  // NC
            "\(item) remains unmoved by your tugging.",  // NC
            "Your pulling yields predictable non-results.",  // SJ
            "\(item) withstands your attractive forces.",  // SJ
            "You yank hopefully. Hope loses.",  // DP
            "\(item) and you disagree about movement.",  // DP
            "Such vigorous pulling! Such stationary \(item)!",  // OW
            "You pull \(item) with fruitless determination.",  // OW
            "\(item) wins this particular tug-of-war.",  // MT
            "Your pulling skills need work. So does \(item)'s cooperation.",  // MT
            "\(item) considers your request and declines.",  // DA
            "Pulling \(item) proves as useful as pushing it.",  // DA
            "Tensile force applied. Static situation maintained.",  // RF
            "\(item) demonstrates impressive inertia.",  // RF
            "You pull at \(item) like meaning from modern art.",  // TC
            "\(item) maintains its position with quiet dignity.",  // TC
            "You give \(item) a good tug. Nothing gives.",  // DS
            "\(item) seems attached to its current location.",  // DS
            "\(item) resists your extractive ambitions.",  // TP
            "The pulling of \(item) achieves philosophical nothing."  // TP
        )
    }

    open override func pushCharacter(_ character: String) -> String {
        oneOf(
            "You push \(character). The relationship deteriorates predictably.",  // TC
            "\(character) absorbs your shove with diminishing patience.",  // TC
            "That's one way to make an impression.",  // DP
            "\(character) stumbles slightly, goodwill entirely.",  // DP
            "Such primitive diplomacy! \(character) is not amused.",  // OW
            "You push \(character) with regrettable enthusiasm.",  // OW
            "\(character) maintains balance, loses respect.",  // MT
            "Your shoving skills exceed your social ones.",  // MT
            "\(character) weathers your assault with visible displeasure.",  // SJ
            "Physical persuasion proves counterproductive.",  // SJ
            "\(character) reels dramatically, trust permanently.",  // NC
            "A masterclass in how not to win friends.",  // NC
            "\(character) adds this to their list of grievances.",  // DA
            "You've discovered how to push people away, literally.",  // DA
            "Newton's third law applies. \(character) pushes back emotionally.",  // RF
            "Momentum transferred. Friendship not so much.",  // RF
            "\(character) files this under 'reasons to distrust you.'",  // DS
            "Smooth move. \(character) seems less friendly now.",  // DS
            "\(character) recalibrates their opinion of you downward.",  // TP
            "The push succeeds. Everything else fails."  // TP
        )
    }

    open override func pushEnemy(_ enemy: String) -> String {
        oneOf(
            "\(enemy) appreciates the convenient proximity.",  // DA
            "You push \(enemy) into a worse mood.",  // DA
            "Tactical genius strikes again. \(enemy) retaliates.",  // MT
            "\(enemy) returns the favor with interest.",  // MT
            "\(enemy) thanks you for initiating close combat.",  // DP
            "Well, \(enemy) is definitely angrier now.",  // DP
            "Such brave stupidity! \(enemy) responds accordingly.",  // OW
            "You've given \(enemy) the gift of justified violence.",  // OW
            "\(enemy) interprets this as an invitation to escalate.",  // SJ
            "Your push achieves mutual hostility.",  // SJ
            "\(enemy) seems delighted by your poor judgment.",  // NC
            "A shoving match with \(enemy)? Inspired.",  // NC
            "Physics works. Strategy doesn't. \(enemy) attacks.",  // RF
            "You transfer momentum and receive pain.",  // RF
            "\(enemy) files this under 'he started it.'",  // TC
            "Your aggression inspires \(enemy) to new heights of violence.",  // TC
            "Great job poking the angry thing.",  // DS
            "\(enemy) needed that excuse. Thanks.",  // DS
            "You've successfully made \(enemy) pushier.",  // TP
            "The push-to-regret ratio proves unfavorable."  // TP
        )
    }

    open override func pushObject(_ item: String) -> String {
        oneOf(
            "You push \(item). \(item) remains unpressed about it.",  // DP
            "\(item) endures your prodding with dignity.",  // DP
            "\(item) accepts your pressure without enthusiasm.",  // OW
            "You give \(item) a meaningful push. Meaning not included.",  // OW
            "\(item) withstands your digital assault.",  // MT
            "Your finger and \(item) meet briefly, pointlessly.",  // MT
            "You push \(item) with admirable determination.",  // SJ
            "\(item) receives your pressure with stoic indifference.",  // SJ
            "\(item) plays dead under your touch.",  // NC
            "A stirring performance of pressing \(item) to no effect.",  // NC
            "\(item) fails to find your touch inspiring.",  // DA
            "You press \(item). \(item) doesn't press back.",  // DA
            "Force transfers to \(item), accomplishing nothing.",  // RF
            "\(item) absorbs your kinetic offering silently.",  // RF
            "\(item) tolerates your poking philosophically.",  // TC
            "Your relationship with \(item) remains purely pressural.",  // TC
            "You give \(item) the old press. Nothing.",  // DS
            "\(item) seems unimpressed by your impression.",  // DS
            "\(item) maintains its existential composure despite your prodding.",  // TP
            "The pressing of \(item) joins history's forgotten gestures."  // TP
        )
    }

    open override func putCannotPutOnSelf(_ item: String) -> String {
        oneOf(
            "\(item) cannot be its own foundation.",  // DA
            "The self-supporting \(item) remains theoretical.",  // DA
            "\(item) on \(item)? That's not how physics works.",  // RF
            "Recursive stacking of \(item) proves impossible.",  // RF
            "One cannot place \(item) upon itself.",  // SJ
            "\(item) lacks the ability to self-platform.",  // SJ
            "\(item) can't simultaneously be floor and ceiling.",  // DP
            "Nice try, but \(item) isn't that talented.",  // DP
            "Such topological ambition! \(item) remains singular.",  // OW
            "\(item) cannot ascend upon its own shoulders.",  // OW
            "You'd need two \(item)s for that trick.",  // MT
            "\(item) fails at being self-referential furniture.",  // MT
            "A paradox best left to philosophers, not \(item).",  // NC
            "\(item) declines to violate spatial logic.",  // NC
            "\(item) resists your M.C. Escher impression.",  // TC
            "The universe prevents \(item)-on-\(item) scenarios.",  // TC
            "Yeah, \(item) doesn't stack on itself.",  // DS
            "\(item) can't be its own shelf.",  // DS
            "The \(item) recursion loop fails to compile.",  // TP
            "\(item) exists in only one location at a time."  // TP
        )
    }

    open override func putItemOn(_ item: String) -> String {
        oneOf(
            "Your spatial reasoning needs recalibration.",  // SJ
            "One cannot simply place \(item) anywhere.",  // SJ
            "That's not how \(item) works, spatially speaking.",  // DP
            "\(item) resists your placement ambitions.",  // DP
            "Such creative geography! Alas, \(item) won't cooperate.",  // OW
            "You cannot put \(item) there, despite your enthusiasm.",  // OW
            "\(item) lacks the necessary physical properties.",  // RF
            "The topology of \(item) prevents placement.",  // RF
            "Your understanding of \(item) seems optimistic.",  // MT
            "\(item) can't be put places. Sorry.",  // MT
            "\(item) transcends your organizational efforts.",  // NC
            "One doesn't simply deposit \(item) on things.",  // NC
            "\(item) exists beyond mere surface placement.",  // DA
            "You've misunderstood the nature of \(item).",  // DA
            "\(item) defies your containment strategies.",  // TC
            "Something about \(item) suggests it won't fit.",  // TC
            "Yeah, \(item) doesn't work that way.",  // DS
            "\(item) isn't really the put-downable type.",  // DS
            "\(item) operates outside placement parameters.",  // TP
            "The puttability of \(item) remains theoretical."  // TP
        )
    }

    open override func putMeOn() -> String {
        oneOf(
            "You're not a decorative object. Yet.",  // MT
            "Self-placement remains beyond your capabilities.",  // MT
            "You can't put yourself places like a knick-knack.",  // DP
            "That's called climbing, dear. Try that instead.",  // DP
            "Such objectification of oneself! How modern!",  // OW
            "You cannot simply deposit yourself like bric-a-brac.",  // OW
            "Your self-installation attempt fails.",  // SJ
            "One does not PUT oneself; one SITS or STANDS.",  // SJ
            "You're a person, not a paperweight.",  // NC
            "A valiant attempt at self-shelving.",  // NC
            "You can't inventory yourself onto surfaces.",  // DA
            "Humans use different verbs for self-placement.",  // DA
            "Mass-energy prevents self-deposition.",  // RF
            "You lack the proper object properties for putting.",  // RF
            "Your existential status prevents shelf life.",  // TC
            "Something about being animate complicates this.",  // TC
            "You can't just PUT yourself places. Use your legs.",  // DS
            "Nice try, but you're not that kind of object.",  // DS
            "Self-objectification has limits, apparently.",  // TP
            "The PUT function doesn't accept self-reference."  // TP
        )
    }

    open override func putOnBadTarget(_ item: String) -> String {
        oneOf(
            "\(item) deserves a better resting place than that.",  // RF
            "Your chosen surface won't accommodate \(item).",  // RF
            "\(item) requires a more conventional platform.",  // SJ
            "That location cannot properly support \(item).",  // SJ
            "\(item) and your target aren't compatible.",  // DP
            "Physics vetoes your placement of \(item).",  // DP
            "\(item) needs somewhere more... surface-like.",  // OW
            "Alas, \(item) cannot rest where you envision.",  // OW
            "\(item) won't balance there, trust me.",  // MT
            "Your destination can't handle \(item).",  // MT
            "\(item) requires a proper surface, not that.",  // NC
            "One cannot simply deposit \(item) there.",  // NC
            "\(item) needs somewhere more geometrically cooperative.",  // DA
            "The universe suggests a different spot for \(item).",  // DA
            "\(item) declines that particular perch.",  // TC
            "Something more horizontal might suit \(item) better.",  // TC
            "Yeah, \(item) won't stay there.",  // DS
            "\(item) needs an actual surface.",  // DS
            "The topology there won't support \(item).",  // TP
            "\(item) requires more stable accommodations."  // TP
        )
    }

    open override func putOnWhat(_ item: String) -> String {
        oneOf(
            "Put \(item) where, exactly?",  // NC
            "Your placement lacks a destination.",  // NC
            "\(item) awaits further directional guidance.",  // SJ
            "One must specify where \(item) should rest.",  // SJ
            "\(item) hovers in conceptual limbo.",  // DP
            "You'll need to pick an actual surface.",  // DP
            "Such enthusiasm! Now choose where.",  // OW
            "\(item) requires more specific placement instructions.",  // OW
            "You wave \(item) around indecisively.",  // MT
            "\(item) can't float there forever.",  // MT
            "\(item) needs somewhere to go.",  // DA
            "Destination required for successful putting.",  // DA
            "Please specify target surface for \(item).",  // RF
            "The placement vector remains incomplete.",  // RF
            "\(item) exists in pre-positional uncertainty.",  // TC
            "Your putting lacks crucial prepositions.",  // TC
            "Gonna need more details than that.",  // DS
            "\(item) can't just go 'somewhere.'",  // DS
            "The universe demands placement specifics.",  // TP
            "\(item) remains suspended pending instructions."  // TP
        )
    }

    open override func quitCancelled() -> String {
        oneOf(
            "Excellent choice. The abyss can wait.",  // DP
            "Reality proved disappointing already?",  // DP
            "Splendid! The adventure was barely mourning you.",  // OW
            "How delightful! You've chosen fiction over fact.",  // OW
            "Welcome back. That was almost dramatic.",  // MT
            "Changed your mind? Good. We weren't finished.",  // MT
            "A wise reversal. Quitting is for quitters.",  // SJ
            "Very well. The story gratefully continues.",  // SJ
            "Oh good, you're staying. We'd prepared eulogies.",  // NC
            "Back so soon? How wonderfully indecisive.",  // NC
            "Commitment issues resolved. Adventure resumed.",  // DA
            "The universe cancels your cancellation.",  // DA
            "Escape velocity not achieved. Game continues.",  // RF
            "Your momentum vector points back to adventure.",  // RF
            "Second thoughts prove first thoughts wrong.",  // TC
            "The narrative breathes a sigh of relief.",  // TC
            "Cool. That goodbye was getting awkward.",  // DS
            "Knew you couldn't quit us that easily.",  // DS
            "Your resignation has been rejected. Play on.",  // TP
            "The void reluctantly releases you back."  // TP
        )
    }

    open override func removeAll() -> String {
        oneOf(
            "Public nudity remains inadvisable, regardless of your enthusiasm.",  // DP
            "Society frowns upon such comprehensive disrobing.",  // DP
            "One's garments serve purposes beyond mere ornamentation.",  // SJ
            "Decency suggests maintaining your current state of dress.",  // SJ
            "Such bold sartorial abandonment! Civilization objects.",  // OW
            "Alas, propriety prevents this wholesale undressing.",  // OW
            "Your modesty would be sorely missed.",  // MT
            "That's a mighty bold fashion statement you're considering.",  // MT
            "A dramatic gesture, but the neighbors would talk.",  // NC
            "One's wardrobe deserves more dignified treatment.",  // NC
            "The universe maintains strict dress code policies.",  // DA
            "Your clothing serves important structural functions.",  // DA
            "Thermal regulation requires fabric barriers.",  // RF
            "Current atmospheric conditions suggest keeping your coverings.",  // RF
            "Your ensemble protests this wholesale abandonment.",  // TC
            "Something about mass disrobing seems socially problematic.",  // TC
            "Yeah, let's keep our clothes on, thanks.",  // DS
            "The general public isn't ready for that level of authenticity.",  // DS
            "Your garments prefer employment to unemployment.",  // TP
            "The social fabric depends on actual fabric."  // TP
        )
    }

    open override func responseNotUnderstood() -> String {
        oneOf(
            "Your response demonstrates the sort of clarity that makes foreign languages seem straightforward.",  // DP
            "You've managed to say something that defies both comprehension and the laws of communication.",  // MT
            "How wonderfully cryptic--speaking in a dialect known only to yourself.",  // OW
            "Your response has all the linguistic precision of a sneeze in a thunderstorm.",  // NC
            "You've achieved that rare form of expression that transcends mere understanding.",  // SJ
            "Your answer arrives in what appears to be a language you've just invented.",  // TC
            "You respond with the sort of eloquence that makes silence seem like Shakespeare.",  // DA
            "Your reply suggests you've confused conversation with abstract art.",  // DP
            "You've managed to say something that makes perfect sense to absolutely no one.",  // MT
            "Your response demonstrates a refreshing disregard for the conventional rules of meaning.",  // OW
            "You speak with the crystal clarity of someone who's never met a dictionary.",  // NC
            "Your answer achieves the perfect balance between words and complete incomprehensibility.",  // SJ
            "You respond as if communication were merely a suggestion rather than a requirement.",  // TC
            "Your reply has all the coherence of a philosophy lecture delivered underwater.",  // DA
        )
    }

    open override func restartCancelled() -> String {
        oneOf(
            "Wise choice. Your progress deserves better than oblivion.",  // MT
            "Sensible decision. Restart averted.",  // MT
            "Your adventures continue from where they left off.",  // SJ
            "Prudence triumphs over the urge to begin anew.",  // SJ
            "Crisis averted. Your progress lives to see another day.",  // DP
            "How refreshing--someone who values their accomplishments.",  // DP
            "Excellent restraint! Your journey continues uninterrupted.",  // OW
            "Such admirable attachment to one's achievements!",  // OW
            "Your story picks up exactly where it paused.",  // NC
            "A moment of clarity prevents unnecessary erasure.",  // NC
            "The universe breathes a sigh of relief.",  // DA
            "Your save file thanks you for this act of mercy.",  // DA
            "Data preservation instincts prove superior to restart impulses.",  // RF
            "Your progress remains safely intact.",  // RF
            "The narrative gratefully continues its established trajectory.",  // TC
            "Your accumulated wisdom survives another restart temptation.",  // TC
            "Good call. Starting over is overrated.",  // DS
            "Your progress dodges the restart bullet.",  // DS
            "The continuity of your experience remains unbroken.",  // TP
            "Your digital existence persists in its current form."  // TP
        )
    }

    open override func restarting() -> String {
        oneOf(
            "Restarting... Your progress bids a fond farewell.",  // DA
            "Wiping the slate clean... How refreshingly destructive.",  // DA
            "Restarting... The universe prepares to forget you existed.",  // DP
            "Your digital life flashes before the screen, then vanishes.",  // DP
            "Restarting... Such magnificent self-destruction!",  // OW
            "The grand erasure begins. How dramatically final!",  // OW
            "Restarting... Your adventures dissolve into pristine nothingness.",  // SJ
            "One's progress returns to the void from whence it came.",  // SJ
            "Restarting... Like Etch-a-Sketch, but with more existential weight.",  // MT
            "Your story resets to its humble beginnings.",  // MT
            "Restarting... The ultimate do-over commences.",  // NC
            "How delightfully nihilistic! Beginning again from nothing.",  // NC
            "Restarting... The cosmic reset button has been pressed.",  // RF
            "All data returning to primordial zeros and ones.",  // RF
            "Restarting... Your narrative winks out of existence.",  // TC
            "The delete key of destiny erases your digital footprint.",  // TC
            "Restarting... Hope you remember what you learned last time.",  // DS
            "Your progress waves goodbye as it disappears forever.",  // DS
            "Restarting... The wheel of digital reincarnation turns.",  // TP
            "Your accumulated reality dissolves into quantum possibility."  // TP
        )
    }

    open override func restoreCancelled() -> String {
        oneOf(
            "Restore cancelled. Your current reality remains intact.",  // NC
            "The past shall remain safely buried in its save file.",  // NC
            "Your present timeline dodges the restoration bullet.",  // DP
            "Crisis averted. The current you survives another day.",  // DP
            "Wise restraint. Your current progress breathe a sigh of relief.",  // SJ
            "The restoration portal closes, leaving now undisturbed.",  // SJ
            "Such dramatic hesitation! Your current state thanks you.",  // OW
            "The saved past returns to its digital slumber.",  // OW
            "Your current adventure continues uninterrupted by yesterday.",  // MT
            "The time machine stays in the garage for now.",  // MT
            "The universe maintains its current configuration.",  // DA
            "Your present timeline remains the official version.",  // DA
            "Temporal stability preserved. Current state maintained.",  // RF
            "The restoration process terminates before data displacement.",  // RF
            "Your current narrative survives the restoration scare.",  // TC
            "The past politely returns to its saved state.",  // TC
            "Good call. The present isn't that bad.",  // DS
            "Your current self wins the existential coin flip.",  // DS
            "The restoration paradox resolves in favor of now.",  // TP
            "Your temporal coordinates remain unchanged."  // TP
        )
    }

    open override func restoring() -> String {
        oneOf(
            "Restoring... Your past self emerges from digital hibernation.",  // RF
            "The saved timeline awakens from its electronic slumber.",  // RF
            "Restoring... Time flows backward to a happier moment.",  // DP
            "Your former glory rises from the data grave.",  // DP
            "Restoring... The past reclaims its rightful throne!",  // OW
            "Such delicious temporal manipulation! Yesterday returns triumphant.",  // OW
            "Restoring... Your preserved adventures spring back to life.",  // SJ
            "The archived state reasserts its claim to existence.",  // SJ
            "Restoring... Like a phoenix, but made of saved data.",  // MT
            "Your digital ghost materializes from the save file.",  // MT
            "Restoring... The universe rewinds to a previous chapter.",  // NC
            "How wonderfully nostalgic! The past makes its grand entrance.",  // NC
            "Restoring... Your backup reality overwrites the current one.",  // DA
            "The saved universe expands to fill the present void.",  // DA
            "Restoring... Your narrative experiences glorious resurrection.",  // TC
            "The preserved timeline emerges like Lazarus from the hard drive.",  // TC
            "Restoring... Hope your past self made better choices.",  // DS
            "Your saved game climbs out of digital purgatory.",  // DS
            "Restoring... The wheel of digital reincarnation spins backward.",  // TP
            "Your archived existence reassembles itself from quantum memory."  // TP
        )
    }

    open override func rubCharacter(_ verb: Verb, character: String) -> String {
        oneOf(
            "\(character) objects to your uninvited massage attempts.",  // DS
            "Your \(verb.gerund) proposal meets with visible alarm.",  // DS
            "\(character) retreats from your tactile enthusiasm.",  // DP
            "Personal space means nothing to you, apparently.",  // DP
            "\(character) questions your understanding of appropriate contact.",  // SJ
            "One does not simply \(verb) people without invitation.",  // SJ
            "Such hands-on diplomacy! \(character) is not amused.",  // OW
            "\(character) experiences your \(verb.gerund) as unwelcome friction.",  // OW
            "\(character) isn't that kind of person.",  // MT
            "Your \(verb.gerund) skills exceed your social ones, again.",  // MT
            "\(character) demonstrates the fine art of polite recoil.",  // NC
            "How delightfully inappropriate! \(character) objects strenuously.",  // NC
            "\(character) files this under 'reasons to avoid you.'",  // DA
            "Your massage technique lacks consent.",  // DA
            "Force vectors meet social vectors. Social wins decisively.",  // RF
            "\(character) prefers friction-free interpersonal relations.",  // RF
            "\(character) adds 'inappropriately tactile' to their notes about you.",  // TC
            "Your \(verb.gerund) earns \(character)'s active disapproval.",  // TC
            "The universe suggests keeping your hands to yourself.",  // TP
            "\(character) demonstrates that people aren't furniture to be \(verb)ed."  // TP
        )
    }

    open override func rubEnemy(_ verb: Verb, enemy: String) -> String {
        oneOf(
            "\(enemy) interprets your \(verb.gerund) as the strangest attack ever.",  // OW
            "Your massage technique confuses \(enemy) momentarily.",  // OW
            "\(enemy) pauses, baffled by your therapeutic approach to violence.",  // DP
            "Nothing says 'I want to fight' quite like unexpected \(verb.gerund).",  // DP
            "\(enemy) wasn't expecting a spa treatment mid-combat.",  // MT
            "Your \(verb.gerund) strategy bewilders \(enemy) into temporary inaction.",  // MT
            "\(enemy) questions your understanding of hostilities.",  // SJ
            "One's enemy appears puzzled by this tactile diplomacy.",  // SJ
            "\(enemy) experiences existential confusion about your intentions.",  // NC
            "How wonderfully inappropriate! \(enemy) responds with violence.",  // NC
            "\(enemy) decides your \(verb.gerund) constitutes the weirdest provocation ever.",  // DA
            "Your enemy massage technique lacks tactical merit.",  // DA
            "Contact friction generates more confusion than damage.",  // RF
            "\(enemy) processes your touch as either threat or spa service.",  // RF
            "\(enemy) files your \(verb.gerund) under 'deeply unsettling encounters.'",  // TC
            "Your therapeutic approach to combat mystifies \(enemy).",  // TC
            "Yeah, \(enemy) doesn't want a massage right now.",  // DS
            "\(enemy) preferred the straightforward hostility, thanks.",  // DS
            "\(enemy) adds 'weirdly tactile' to their combat assessment.",  // TP
            "Your \(verb.gerund) transforms hostility into profound bewilderment."  // TP
        )
    }

    open override func rubObject(_ verb: Verb, item: String) -> String {
        oneOf(
            "You \(verb) \(item) with admirable dedication.",  // NC
            "Your \(verb.gerund) efforts yield predictable non-results.",  // NC
            "You give \(item) a thorough \(verb.gerund). It remains unimpressed.",  // SJ
            "\(item) endures your friction with stoic dignity.",  // SJ
            "You \(verb) \(item) enthusiastically. Nothing magical happens.",  // DP
            "\(item) receives your \(verb.gerund) without enthusiasm.",  // DP
            "Such vigorous \(verb.gerund)! \(item) remains stubbornly unchanged.",  // OW
            "You \(verb) \(item) with the fervor of someone expecting miracles.",  // OW
            "\(item) gets the full treatment. Still just \(item).",  // MT
            "Your \(verb.gerund) arm gets a workout. \(item) stays the same.",  // MT
            "\(item) experiences comprehensive friction without transformation.",  // DA
            "You \(verb) \(item) hopefully. Hope remains unvalidated.",  // DA
            "Surface tension applied to \(item). No genies emerge.",  // RF
            "Kinetic energy transfers to \(item), accomplishing nothing.",  // RF
            "\(item) tolerates your \(verb.gerund) philosophically.",  // TC
            "Your \(verb.gerund) technique impresses no one, least of all \(item).",  // TC
            "You give \(item) the old rub-down. Results vary.",  // DS
            "\(item) gets thoroughly \(verb.pastParticiple) but not enlightened.",  // DS
            "\(item) absorbs your friction without yielding secrets.",  // TP
            "The \(verb.gerund) of \(item) achieves cosmic insignificance."  // TP
        )
    }

    open override func rubSelf(_ verb: Verb) -> String {
        oneOf(
            "You give yourself a thorough \(verb.gerund). How self-sufficient.",  // DP
            "Self-massage: the loneliest form of personal maintenance.",  // DP
            "You \(verb) yourself with the dedication of someone who knows what they like.",  // DS
            "Your self-\(verb.gerund) technique needs work.",  // DS
            "Such devoted self-attention! The mirror approves.",  // OW
            "You massage yourself with admirable self-reliance.",  // OW
            "One attends to one's own friction requirements.",  // SJ
            "Your self-\(verb.gerund) achieves moderate satisfaction.",  // SJ
            "You give yourself the old rub-down. Results vary by location.",  // MT
            "Self-\(verb.gerund): when you're your own best maintenance crew.",  // MT
            "A stirring performance of personal grooming.",  // NC
            "How delightfully self-contained your \(verb.gerund) becomes.",  // NC
            "You achieve therapeutic self-contact.",  // DA
            "Your personal friction generates modest contentment.",  // DA
            "Applied pressure yields localized relief.",  // RF
            "Self-directed kinetic therapy proves moderately effective.",  // RF
            "Your hands find familiar territory.",  // TC
            "The art of self-maintenance reaches new heights.",  // TC
            "Your self-\(verb.gerund) transcends mere hygiene.",  // TP
            "Personal friction achieves philosophical significance."  // TP
        )
    }

    open override func shakeCharacter(_ verb: Verb, character: String) -> String {
        oneOf(
            "\(character) objects to being treated like a cocktail.",  // TC
            "Your \(verb.gerund) technique alarms \(character) considerably.",  // TC
            "\(character) prefers to remain un\(verb)n, not stirred.",  // DP
            "Nothing says 'hello' quite like vigorous \(verb.gerund).",  // DP
            "\(character) questions your understanding of appropriate greetings.",  // SJ
            "One does not simply \(verb) people without cause.",  // SJ
            "\(character) experiences your \(verb.gerund) as unwelcome turbulence.",  // OW
            "Such energetic handling! \(character) protests vigorously.",  // OW
            "\(character) isn't a snow globe.",  // MT
            "Your \(verb.gerund) skills exceed your social awareness.",  // MT
            "\(character) demonstrates admirable resistance to being rattled.",  // NC
            "How wonderfully primitive! \(character) objects strenuously.",  // NC
            "\(character) adds 'physically aggressive' to their mental notes.",  // DA
            "Your \(verb)-and-bake approach to friendship fails.",  // DA
            "Applied oscillation meets human dignity. Dignity wins.",  // RF
            "\(character) possesses more structural integrity than you assumed.",  // RF
            "\(character) files your \(verb.gerund) under 'assault and battery.'",  // DS
            "Yeah, people don't like being \(verb)n. Weird, right?",  // DS
            "\(character) experiences your \(verb.gerund) as existential violence.",  // TP
            "The \(verb.gerund) of humans proves socially inadvisable."  // TP
        )
    }

    open override func shakeEnemy(_ verb: Verb, enemy: String) -> String {
        oneOf(
            "\(enemy) finds your \(verb.gerund) more annoying than threatening.",  // RF
            "Your vibration-based combat technique confuses \(enemy).",  // RF
            "\(enemy) wasn't expecting a therapeutic jostling mid-fight.",  // DP
            "Nothing strikes fear like aggressive \(verb.gerund), apparently.",  // DP
            "\(enemy) questions your combat training.",  // MT
            "That's one way to rattle an opponent. Literally.",  // MT
            "\(enemy) experiences your \(verb.gerund) as mildly irritating.",  // SJ
            "One's enemy appears unimpressed by this jostling technique.",  // SJ
            "\(enemy) endures your \(verb.gerund) with professional disdain.",  // OW
            "Such kinetic enthusiasm! \(enemy) responds with violence.",  // OW
            "\(enemy) prefers conventional hostility to weird \(verb.gerund).",  // NC
            "How delightfully unorthodox! \(enemy) retaliates normally.",  // NC
            "\(enemy) adds 'uses bizarre combat techniques' to their assessment.",  // DA
            "Your \(verb)-based warfare mystifies \(enemy).",  // DA
            "\(enemy) decides your \(verb.gerund) constitutes the lamest attack ever.",  // TC
            "Your therapeutic approach to violence baffles \(enemy).",  // TC
            "\(enemy) wasn't ready for interpretive combat dancing.",  // DS
            "Yeah, \(enemy) doesn't want a massage-fight hybrid.",  // DS
            "\(enemy) processes your \(verb.gerund) as either threat or seizure.",  // TP
            "Your oscillatory combat strategy achieves maximum bewilderment."  // TP
        )
    }

    open override func shakeObject(_ verb: Verb, item: String) -> String {
        oneOf(
            "You \(verb) \(item) with the hope that something interesting will happen.",  // DA
            "\(item) rattles disapprovingly but yields no secrets.",  // DA
            "Your vigorous \(verb.gerund) of \(item) accomplishes nothing.",  // SJ
            "\(item) endures your jostling with dignified silence.",  // SJ
            "You give \(item) a thorough \(verb.gerund). It remains stubbornly intact.",  // DP
            "\(item) experiences turbulence without revelation.",  // DP
            "Such enthusiastic \(verb.gerund)! \(item) keeps its mysteries.",  // OW
            "You \(verb) \(item) like it owes you answers.",  // OW
            "\(item) gets the full earthquake treatment.",  // MT
            "Your \(verb.gerund) technique impresses no one, least of all \(item).",  // MT
            "\(item) vibrates briefly, then returns to normal.",  // NC
            "A stirring performance of aggressive jostling.",  // NC
            "Applied oscillation generates zero useful results.",  // RF
            "\(item) demonstrates remarkable \(verb) resistance.",  // RF
            "\(item) tolerates your \(verb.gerund) philosophically.",  // TC
            "Your \(verb.gerund) reveals nothing \(item) wasn't willing to share.",  // TC
            "You \(verb) \(item) like a magic 8-ball. Less helpful.",  // DS
            "\(item) gets thoroughly rattled but offers no insights.",  // DS
            "\(item) absorbs your kinetic energy without yielding secrets.",  // TP
            "The vigorous \(verb.gerund) of \(item) achieves cosmic insignificance."  // TP
        )
    }

    open override func shakeSelf(_ verb: Verb) -> String {
        oneOf(
            "You give yourself a good \(verb.gerund). Your brain settles differently.",  // DS
            "Self-\(verb.gerund): the loneliest form of percussion.",  // DS
            "You \(verb) yourself like a human snow globe.",  // DP
            "Your self-jostling technique needs refinement.",  // DP
            "Such vigorous self-agitation! How wonderfully neurotic.",  // OW
            "You \(verb) yourself with admirable self-direction.",  // OW
            "One administers therapeutic self-jostling.",  // SJ
            "Your personal earthquake achieves modest results.",  // SJ
            "You \(verb) yourself like you're trying to wake up.",  // MT
            "Self-\(verb.gerund): when you're your own alarm clock.",  // MT
            "A stirring performance of autonomous \(verb.gerund).",  // NC
            "How delightfully self-contained your \(verb.gerund) becomes.",  // NC
            "You achieve comprehensive self-oscillation.",  // DA
            "Your personal vibration generates mixed reviews.",  // DA
            "Applied self-agitation yields questionable benefits.",  // RF
            "Auto-seismic activity proves moderately therapeutic.",  // RF
            "You rattle your own cage with professional expertise.",  // TC
            "Your self-\(verb.gerund) transcends mere fidgeting.",  // TC
            "The art of personal jostling reaches new heights.",  // TP
            "Self-directed turbulence achieves philosophical significance."  // TP
        )
    }

    open override func sing(_ verb: Verb) -> String {
        oneOf(
            "Your voice echoes beautifully, disturbing absolutely no one.",  // OW
            "Such melodious enthusiasm! The universe remains tone-deaf.",  // OW
            "You \(verb) with the confidence of someone who can't hear themselves.",  // DP
            "Your vocal performance wins no awards but loses no friends.",  // DP
            "You warble with admirable conviction.",  // SJ
            "One's \(verb.gerund) voice proves adequate for personal entertainment.",  // SJ
            "You belt out a tune like you're auditioning for nothing.",  // MT
            "Your \(verb.gerund) wouldn't launch a thousand ships, but it's trying.",  // MT
            "A stirring performance for an audience of none.",  // NC
            "How wonderfully theatrical! The acoustics here are wasted on you.",  // NC
            "You \(verb) cheerfully into the void.",  // DA
            "Your vocal cords vibrate with more enthusiasm than skill.",  // DA
            "Sound waves propagate nicely. Musical content varies.",  // RF
            "Your larynx performs admirably despite the material.",  // RF
            "You \(verb) like someone who's forgotten they're not alone.",  // DS
            "Your shower voice gets a field test.",  // DS
            "Your melody transcends conventional notions of pitch.",  // TC
            "The song in your heart escapes through questionable means.",  // TC
            "Your vocal expression achieves genuine mediocrity.",  // TP
            "The universe acknowledges your musical offering with polite silence."  // TP
        )
    }

    open override func singToCharacter(_ verb: Verb, character: String) -> String {
        oneOf(
            "\(character) endures your serenade with polite bewilderment.",  // TC
            "Your musical offering receives mixed reviews from \(character).",  // TC
            "\(character) appreciates the gesture, questions the execution.",  // DP
            "Your song reaches \(character)'s ears, if not their heart.",  // DP
            "\(character) experiences your melody as unexpected entertainment.",  // OW
            "Such spontaneous musicality! \(character) seems mildly alarmed.",  // OW
            "\(character) listens with the patience of the truly captive.",  // SJ
            "One's musical tribute receives diplomatic acknowledgment.",  // SJ
            "\(character) gets a free concert, whether they wanted one or not.",  // MT
            "Your \(verb.gerund) skills get a live audience test.",  // MT
            "\(character) demonstrates remarkable tolerance for impromptu performances.",  // NC
            "How delightfully theatrical! \(character) plays along reluctantly.",  // NC
            "\(character) files this under 'unusual but harmless encounters.'",  // DA
            "Your vocal performance earns \(character)'s bewildered attention.",  // DA
            "Sound waves successfully reach \(character)'s auditory system.",  // RF
            "\(character) processes your song with visible confusion.",  // RF
            "\(character) wonders what they did to deserve this concert.",  // DS
            "Your musical ambush catches \(character) completely off-guard.",  // DS
            "\(character) adds 'randomly serenades people' to their notes about you.",  // TC
            "Your spontaneous concert transforms \(character) into a reluctant critic."  // TP
        )
    }

    open override func singToEnemy(_ verb: Verb, enemy: String) -> String {
        oneOf(
            "\(enemy) finds your serenade more confusing than threatening.",  // MT
            "Your musical approach to combat baffles \(enemy) completely.",  // MT
            "\(enemy) wasn't expecting a dinner theater experience mid-fight.",  // DP
            "Nothing says 'I want to hurt you' quite like unexpected \(verb.gerund).",  // DP
            "\(enemy) questions your understanding of hostilities.",  // SJ
            "One's enemy appears unmoved by this melodic diplomacy.",  // SJ
            "\(enemy) experiences your song as the strangest provocation ever.",  // OW
            "Such theatrical warfare! \(enemy) responds with conventional violence.",  // OW
            "\(enemy) prefers straightforward combat to musical interludes.",  // NC
            "How wonderfully inappropriate! \(enemy) retaliates normally.",  // NC
            "\(enemy) adds 'uses show tunes in battle' to their assessment.",  // DA
            "Your operatic approach to violence mystifies \(enemy).",  // DA
            "Acoustic warfare proves less effective than anticipated.",  // RF
            "\(enemy) demonstrates remarkable resistance to musical charm.",  // RF
            "\(enemy) wasn't ready for interpretive combat \(verb.gerund).",  // DS
            "Yeah, \(enemy) doesn't want a concert right now.",  // DS
            "\(enemy) files your serenade under 'deeply unsettling encounters.'",  // TC
            "Your vocal assault confuses more than it conquers.",  // TC
            "\(enemy) processes your song as either threat or entertainment.",  // TP
            "Musical combat strategy achieves maximum bewilderment."  // TP
        )
    }

    open override func singToObject(_ command: Command, item: String) -> String {
        oneOf(
            "You serenade \(item) with touching devotion.",  // NC
            "\(item) receives your musical offering in stoic silence.",  // NC
            "Your song reaches \(item)'s heart. If it had one.",  // DP
            "\(item) proves a remarkably unresponsive audience.",  // DP
            "You \(command.verbPhrase) \(item) with the passion of unrequited love.",  // OW
            "Such melodic dedication! \(item) remains unmoved.",  // OW
            "\(item) endures your serenade with dignity.",  // SJ
            "One's musical tribute to \(item) echoes unacknowledged.",  // SJ
            "You croon to \(item) like it understands the lyrics.",  // MT
            "\(item) gets the full concert treatment, appreciates none of it.",  // MT
            "\(item) experiences your song as background noise.",  // DA
            "Your musical courtship of \(item) proceeds one-sidedly.",  // DA
            "Sound waves reach \(item). Emotional impact: zero.",  // RF
            "\(item) demonstrates impressive resistance to musical charm.",  // RF
            "You \(command.verbPhrase) \(item) like it's your long-lost love.",  // DS
            "\(item) wins the award for 'most indifferent audience.'",  // DS
            "\(item) tolerates your vocal advances philosophically.",  // TC
            "Your song transforms \(item) into the world's most apathetic critic.",  // TC
            "\(item) absorbs your melody without yielding applause.",  // TP
            "The musical baptism of \(item) achieves cosmic insignificance."  // TP
        )
    }

    open override func smellCharacter(_ verb: Verb, character: String) -> String {
        oneOf(
            "\(character) objects to your unsolicited aromatic investigation.",  // DS
            "Your \(verb.gerund) technique alarms \(character) considerably.",  // DS
            "\(character) retreats from your nasal curiosity.",  // DP
            "Personal space includes olfactory boundaries, apparently.",  // DP
            "\(character) questions your understanding of appropriate social distance.",  // SJ
            "One does not simply \(verb) people without invitation.",  // SJ
            "\(character) experiences your \(verb.gerund) as deeply unsettling.",  // OW
            "Such intimate nasal attention! \(character) recoils accordingly.",  // OW
            "\(character) isn't a flower garden.",  // MT
            "Your detective nose exceeds social protocols.",  // MT
            "\(character) demonstrates the fine art of \(verb)-avoidance.",  // NC
            "How delightfully inappropriate! \(character) objects strenuously.",  // NC
            "\(character) adds 'creepily \(verb)s people' to their mental notes.",  // DA
            "Your aromatic investigation meets with visible disapproval.",  // DA
            "Molecular sampling of humans proves socially inadvisable.",  // RF
            "\(character) prefers their personal molecules to remain unanalyzed.",  // RF
            "\(character) files your \(verb.gerund) under 'boundary violations.'",  // TC
            "Your nasal enthusiasm earns \(character)'s active avoidance.",  // TC
            "The universe suggests keeping your nose to yourself.",  // TP
            "\(character) demonstrates that humans aren't aromatherapy products."  // TP
        )
    }

    open override func smellEnemy(_ verb: Verb, enemy: String) -> String {
        oneOf(
            "\(enemy) finds your \(verb.gerund) more disturbing than threatening.",  // OW
            "Your olfactory assault confuses \(enemy) momentarily.",  // OW
            "\(enemy) wasn't expecting a nasal investigation mid-combat.",  // DP
            "Nothing strikes fear like unexpected \(verb.gerund), apparently.",  // DP
            "\(enemy) questions your combat training.",  // MT
            "That's one way to get uncomfortably close to danger.",  // MT
            "\(enemy) experiences your \(verb.gerund) as the weirdest provocation ever.",  // SJ
            "One's enemy appears baffled by this aromatic diplomacy.",  // SJ
            "\(enemy) interprets your \(verb.gerund) as either threat or fetish.",  // NC
            "How wonderfully unorthodox! \(enemy) retaliates normally.",  // NC
            "\(enemy) adds 'uses bizarre \(verb.gerund) attacks' to their assessment.",  // DA
            "Your nose-based warfare mystifies \(enemy).",  // DA
            "Molecular analysis of hostiles proves tactically questionable.",  // RF
            "\(enemy) prefers conventional violence to aromatic investigation.",  // RF
            "\(enemy) decides your \(verb.gerund) constitutes the strangest attack ever.",  // TC
            "Your nasal approach to violence baffles \(enemy).",  // TC
            "\(enemy) wasn't ready for interpretive combat \(verb.gerund).",  // DS
            "Yeah, \(enemy) doesn't want to be your perfume sample.",  // DS
            "\(enemy) processes your \(verb.gerund) as either threat or perversion.",  // TP
            "Your olfactory combat strategy achieves maximum bewilderment."  // TP
        )
    }

    open override func smellNothingUnusual(_ verb: Verb) -> String {
        oneOf(
            "Your nose reports nothing worth mentioning.",  // DA
            "The local atmosphere proves aromatically unremarkable.",  // DA
            "You detect the subtle fragrance of absolutely nothing.",  // DP
            "Your olfactory investigation yields disappointing results.",  // DP
            "Such dedicated \(verb.gerund)! The air remains stubbornly neutral.",  // OW
            "You sample the ambient bouquet. It lacks character.",  // OW
            "One's nasal inquiry discovers only ordinary air molecules.",  // SJ
            "The atmosphere offers no aromatic revelations.",  // SJ
            "You \(verb) around like a bloodhound with amnesia.",  // MT
            "The air smells exactly like air, surprisingly enough.",  // MT
            "A stirring performance of atmospheric sampling.",  // NC
            "How thoroughly you investigate the scent of nothing.",  // NC
            "Your nose conducts a comprehensive survey of blandness.",  // RF
            "Molecular analysis detects standard atmospheric composition.",  // RF
            "You inhale deeply, achieving maximum mundanity.",  // TC
            "The ambient aroma disappoints your investigative nostrils.",  // TC
            "You \(verb) around hopefully. Hope remains unvalidated.",  // DS
            "Your nose works overtime detecting absolutely zilch.",  // DS
            "The olfactory landscape offers no mysteries to solve.",  // TP
            "Your nasal reconnaissance mission encounters predictable emptiness."  // TP
        )
    }

    open override func smellObject(_ verb: Verb, item: String) -> String {
        oneOf(
            "You \(verb) \(item) with scientific curiosity.",  // RF
            "\(item) offers no aromatic secrets to your investigation.",  // RF
            "Your olfactory analysis of \(item) yields inconclusive results.",  // SJ
            "\(item) smells exactly as you'd expect, unfortunately.",  // SJ
            "You inhale \(item)'s essence. Regret follows.",  // DP
            "\(item) provides a fragrance best left undescribed.",  // DP
            "Such bold nasal exploration! \(item) remains mysteriously neutral.",  // OW
            "You sample \(item)'s bouquet with admirable dedication.",  // OW
            "\(item) smells like what it is, which isn't saying much.",  // MT
            "Your nose reports back with mixed reviews of \(item).",  // MT
            "\(item) offers a scent both memorable and forgettable.",  // NC
            "A stirring performance of recreational \(verb.gerund).",  // NC
            "\(item) emits molecules that your nose dutifully catalogues.",  // DA
            "You detect notes of \(item), with undertones of more of \(item).",  // DA
            "\(item) tolerates your nasal investigation philosophically.",  // TC
            "Your \(verb.gerund) reveals \(item)'s commitment to aromatic mediocrity.",  // TC
            "You give \(item) the full nostril treatment.",  // DS
            "\(item) smells like something that gets \(verb.pastParticiple) by strangers.",  // DS
            "\(item) releases its molecular signature into your awareness.",  // TP
            "The olfactory examination of \(item) achieves predictable results."  // TP
        )
    }

    open override func smellSelf(_ verb: Verb) -> String {
        oneOf(
            "You sample your own bouquet. The review is mixed.",  // MT
            "Your personal aroma tells a story you'd rather not read.",  // MT
            "You detect notes of adventure, sweat, and questionable decisions.",  // DP
            "Self-\(verb.gerund): the loneliest form of quality control.",  // DP
            "Such dedicated self-assessment! The results speak volumes.",  // OW
            "You inhale your own essence with scientific detachment.",  // OW
            "One's personal fragrance proves... educational.",  // SJ
            "Your aromatic self-evaluation yields predictable results.",  // SJ
            "You give yourself the full nasal inspection.",  // NC
            "How delightfully self-aware! The nose knows.",  // NC
            "You conduct a thorough olfactory self-audit.",  // DA
            "Your personal molecules report back with uncomfortable honesty.",  // DA
            "Chemical analysis of self reveals complex organic compounds.",  // RF
            "Your nasal receptors process familiar aromatic data.",  // RF
            "You \(verb) yourself like a wine critic having doubts.",  // DS
            "Your nose delivers a harsh but fair performance review.",  // DS
            "You sample your own atmospheric contribution.",  // TC
            "Your aromatic signature receives personal scrutiny.",  // TC
            "The olfactory examination of self achieves uncomfortable clarity.",  // TP
            "Your molecular cloud undergoes intimate investigation."  // TP
        )
    }

    open override func squeezeCharacter(_ command: Command, character: String) -> String {
        oneOf(
            "\(character) objects to your unsolicited compression therapy.",  // TC
            "Your \(command.gerund) technique alarms \(character) considerably.",  // TC
            "\(character) retreats from your aggressive \(command.gerund).",  // DP
            "Personal boundaries include \(command.verb)-free zones, apparently.",  // DP
            "\(character) questions your understanding of appropriate contact.",  // SJ
            "One does not simply \(command.verb) people without invitation.",  // SJ
            "\(character) experiences your \(command.gerund) as unwelcome intimacy.",  // OW
            "Such enthusiastic compression! \(character) objects strenuously.",  // OW
            "\(character) isn't a stress ball.",  // MT
            "Your \(command.verb) technique exceeds social protocols.",  // MT
            "\(character) demonstrates admirable resistance to being compressed.",  // NC
            "How delightfully inappropriate! \(character) recoils dramatically.",  // NC
            "\(character) adds 'inappropriately squeezy' to their mental notes.",  // DA
            "Your compression ambitions meet with visible disapproval.",  // DA
            "Applied pressure to humans proves socially inadvisable.",  // RF
            "\(character) prefers their personal space uncompressed.",  // RF
            "\(character) files your \(command.gerund) under 'assault and battery.'",  // DS
            "Yeah, people don't like being squeezed by strangers.",  // DS
            "The universe suggests keeping your hands to yourself.",  // TP
            "\(character) demonstrates that humans aren't fruit to be juiced."  // TP
        )
    }

    open override func squeezeEnemy(_ command: Command, enemy: String) -> String {
        oneOf(
            "\(enemy) finds your \(command.gerund) more disturbing than threatening.",  // DP
            "Your compression-based combat technique confuses \(enemy).",  // DP
            "\(enemy) wasn't expecting a therapeutic hug mid-fight.",  // OW
            "Nothing says 'I want to hurt you' quite like unexpected \(command.gerund).",  // OW
            "\(enemy) questions your understanding of violence.",  // MT
            "That's one way to get uncomfortably intimate with danger.",  // MT
            "\(enemy) experiences your \(command.gerund) as the strangest assault ever.",  // SJ
            "One's enemy appears baffled by this compressive diplomacy.",  // SJ
            "\(enemy) interprets your \(command.gerund) as either threat or therapy.",  // NC
            "How wonderfully unorthodox! \(enemy) retaliates with conventional violence.",  // NC
            "\(enemy) adds 'uses bizarre \(command.gerund) attacks' to their assessment.",  // DA
            "Your \(command.verb)-based warfare mystifies \(enemy).",  // DA
            "Applied compression proves less effective than anticipated.",  // RF
            "\(enemy) demonstrates remarkable resistance to being juiced.",  // RF
            "\(enemy) decides your \(command.gerund) constitutes the weirdest attack ever.",  // TC
            "Your therapeutic approach to combat baffles \(enemy).",  // TC
            "\(enemy) wasn't ready for interpretive combat \(command.gerund).",  // DS
            "Yeah, \(enemy) doesn't want your aggressive affection.",  // DS
            "\(enemy) processes your \(command.gerund) as either violence or intimacy.",  // TP
            "Your compressive combat strategy achieves maximum bewilderment."  // TP
        )
    }

    open override func squeezeObject(_ command: Command, item: String) -> String {
        oneOf(
            "You \(command.verb) \(item) with admirable determination.",  // RF
            "\(item) withstands your compression attempt stoically.",  // RF
            "Your \(command.gerund) technique impresses no one, least of all \(item).",  // SJ
            "\(item) endures your pressure with dignified resistance.",  // SJ
            "You give \(item) the full grip treatment.",  // DP
            "\(item) refuses to yield under your enthusiastic \(command.gerund).",  // DP
            "Such vigorous compression! \(item) remains stubbornly intact.",  // OW
            "You \(command.verb) \(item) like it owes you juice.",  // OW
            "\(item) gets thoroughly compressed but offers nothing in return.",  // MT
            "Your \(command.gerund) arm gets a workout. \(item) stays the same.",  // MT
            "\(item) demonstrates impressive resistance to manual pressure.",  // NC
            "A stirring performance of applied compression.",  // NC
            "\(item) tolerates your \(command.gerund) philosophically.",  // DA
            "You \(command.verb) \(item) hopefully. No magic occurs.",  // DA
            "Applied pressure yields zero extractable content.",  // TC
            "\(item) absorbs your compression without complaint.",  // TC
            "You give \(item) a good squeeze. Nothing gives.",  // DS
            "\(item) proves disappointingly unsqueezable.",  // DS
            "\(item) maintains structural integrity despite your efforts.",  // TP
            "The compression of \(item) achieves predictable non-results."  // TP
        )
    }

    open override func squeezeSelf(_ command: Command) -> String {
        oneOf(
            "You give yourself a therapeutic squeeze.",  // DS
            "Self-compression: the loneliest form of pressure relief.",  // DS
            "You \(command.verb) yourself like a human stress ball.",  // DP
            "Your self-\(command.gerund) technique needs work.",  // DP
            "Such dedicated self-compression! How wonderfully neurotic.",  // OW
            "You apply pressure to yourself with admirable self-reliance.",  // OW
            "One administers personal compression therapy.",  // SJ
            "Your self-\(command.gerund) achieves moderate satisfaction.",  // SJ
            "You give yourself the old \(command.verb)-and-release treatment.",  // MT
            "Self-\(command.gerund): when you're your own stress relief device.",  // MT
            "A stirring performance of autonomous compression.",  // NC
            "How delightfully self-contained your \(command.gerund) becomes.",  // NC
            "You achieve comprehensive self-pressure application.",  // DA
            "Your personal compression generates mixed reviews.",  // DA
            "Applied self-pressure yields questionable therapeutic benefits.",  // RF
            "Auto-compression protocols prove moderately effective.",  // RF
            "You \(command.verb) yourself like you're trying to extract wisdom.",  // TC
            "Your self-compression transcends mere fidgeting.",  // TC
            "The art of personal \(command.gerund) reaches new heights.",  // TP
            "Self-directed pressure achieves philosophical significance."  // TP
        )
    }

    open override func tasteCharacter(_ verb: Verb, character: String) -> String {
        oneOf(
            "\(character) objects to being treated like a wine \(verb.gerund).",  // TC
            "Your gustatory investigation horrifies \(character) completely.",  // TC
            "\(character) retreats from your cannibalistic curiosity.",  // DP
            "Personal space includes not being sampled for flavor.",  // DP
            "\(character) questions your understanding of civilized behavior.",  // SJ
            "One does not taste people like appetizers.",  // SJ
            "\(character) experiences your \(verb.gerund) as primitive aggression.",  // OW
            "Such culinary boldness! \(character) is absolutely appalled.",  // OW
            "\(character) isn't on the menu.",  // MT
            "Your taste-testing technique exceeds all social boundaries.",  // MT
            "\(character) demonstrates admirable resistance to being sampled.",  // NC
            "How delightfully savage! \(character) objects with extreme prejudice.",  // NC
            "\(character) adds 'potential cannibal' to their assessment of you.",  // DA
            "Your oral sampling meets with civilized horror.",  // DA
            "Gustatory analysis of humans violates multiple social contracts.",  // RF
            "\(character) prefers not to be part of your dietary research.",  // RF
            "\(character) files your \(verb.gerund) under 'call the authorities.'",  // DS
            "Yeah, people aren't food samples.",  // DS
            "The universe draws the line at human taste-testing.",  // TP
            "\(character) demonstrates that humans aren't meant for consumption."  // TP
        )
    }

    open override func tasteEnemy(_ verb: Verb, enemy: String) -> String {
        oneOf(
            "\(enemy) finds your \(verb.gerund) more disturbing than any weapon.",  // SJ
            "Your gustatory assault horrifies \(enemy) into temporary paralysis.",  // SJ
            "\(enemy) wasn't expecting a cannibalistic approach to combat.",  // DP
            "Nothing strikes fear quite like unexpected taste-testing.",  // DP
            "\(enemy) questions your understanding of civilized warfare.",  // OW
            "Such primitive combat techniques! \(enemy) is absolutely appalled.",  // OW
            "\(enemy) prefers conventional violence to being sampled.",  // MT
            "That's taking 'know your enemy' way too literally.",  // MT
            "\(enemy) experiences your \(verb.gerund) as the most disturbing attack ever.",  // NC
            "How delightfully savage! \(enemy) retaliates with conventional horror.",  // NC
            "\(enemy) adds 'potential cannibal' to their combat assessment.",  // DA
            "Your culinary approach to violence mystifies \(enemy).",  // DA
            "Gustatory warfare proves both ineffective and deeply unsettling.",  // RF
            "\(enemy) demonstrates remarkable resistance to being flavor-tested.",  // RF
            "\(enemy) decides your \(verb.gerund) constitutes a war crime.",  // TC
            "Your dietary approach to combat crosses several moral boundaries.",  // TC
            "\(enemy) wasn't ready for interpretive combat cannibalism.",  // DS
            "Yeah, \(enemy) doesn't want to be your battle snack.",  // DS
            "\(enemy) processes your \(verb.gerund) as either threat or psychosis.",  // TP
            "Your culinary combat strategy achieves maximum revulsion."  // TP
        )
    }

    open override func tasteNothingUnusual(_ verb: Verb) -> String {
        oneOf(
            "Your tongue reports nothing worth \(verb.gerund).",  // DA
            "The local atmosphere proves gustatorily unremarkable.",  // DA
            "You detect the subtle flavor of absolutely nothing.",  // DP
            "Your oral investigation yields disappointing results.",  // DP
            "Such dedicated licking! The air remains stubbornly flavorless.",  // OW
            "You sample the ambient taste. It lacks seasoning.",  // OW
            "One's tongue discovers only ordinary air molecules.",  // SJ
            "The atmosphere offers no culinary revelations.",  // SJ
            "You lick around like a bloodhound with no sense of taste.",  // MT
            "The air tastes exactly like air, surprisingly enough.",  // MT
            "A stirring performance of atmospheric sampling.",  // NC
            "How thoroughly you investigate the flavor of nothing.",  // NC
            "Your tongue conducts a comprehensive survey of blandness.",  // RF
            "Chemical analysis detects standard atmospheric composition.",  // RF
            "You taste deeply, achieving maximum mundanity.",  // TC
            "The ambient flavor disappoints your investigative taste buds.",  // TC
            "You lick around hopefully. Hope remains unvalidated.",  // DS
            "Your tongue works overtime detecting absolutely zilch.",  // DS
            "The gustatory landscape offers no mysteries to solve.",  // TP
            "Your oral reconnaissance mission encounters predictable emptiness."  // TP
        )
    }

    open override func tasteObject(_ verb: Verb, item: String) -> String {
        oneOf(
            "You sample \(item) with your tongue. Regret follows immediately.",  // MT
            "\(item) offers flavors best left unexplored.",  // MT
            "Your taste buds report back with complaints about \(item).",  // DP
            "\(item) provides a gustatory experience you'll remember unwillingly.",  // DP
            "Such bold culinary exploration! \(item) tastes exactly like \(item).",  // OW
            "You \(verb) \(item) with admirable dedication to poor judgment.",  // OW
            "One's tongue discovers \(item) lacks culinary merit.",  // SJ
            "\(item) proves disappointingly non-edible upon oral investigation.",  // SJ
            "You give \(item) the full taste test treatment.",  // NC
            "A stirring performance of recreational licking.",  // NC
            "\(item) tolerates your oral investigation with stoic dignity.",  // DA
            "Your tongue confirms what common sense already knew about \(item).",  // DA
            "Gustatory analysis reveals \(item)'s commitment to being inedible.",  // RF
            "Chemical receptors process \(item) with visible reluctance.",  // RF
            "You \(verb) \(item) like a sommelier having second thoughts.",  // TC
            "\(item) earns negative reviews from your taste buds.",  // TC
            "You \(verb) \(item). Your tongue files a formal complaint.",  // DS
            "\(item) tastes like something that shouldn't be licked.",  // DS
            "\(item) releases its molecular signature onto your palate unwillingly.",  // TP
            "The oral examination of \(item) achieves predictably unpleasant results."  // TP
        )
    }

    open override func tasteSelf(_ verb: Verb) -> String {
        oneOf(
            "You sample your own flavor profile. The review is mixed.",  // DS
            "Self-\(verb.gerund): the loneliest form of quality control.",  // DS
            "You give yourself a tentative lick. Regret follows.",  // DP
            "Your personal taste test yields uncomfortable results.",  // DP
            "Such dedicated self-assessment! The findings are troubling.",  // OW
            "You \(verb) yourself with scientific detachment and immediate regret.",  // OW
            "One's personal flavor proves... educational.",  // SJ
            "Your gustatory self-evaluation confirms several suspicions.",  // SJ
            "You conduct a thorough oral self-audit.",  // MT
            "Self-\(verb.gerund): when you're your own worst food critic.",  // MT
            "A stirring performance of autonomous flavor analysis.",  // NC
            "How delightfully self-aware! The tongue knows all.",  // NC
            "You sample your own atmospheric contribution via taste buds.",  // DA
            "Your chemical composition receives personal oral scrutiny.",  // DA
            "Gustatory self-analysis reveals complex organic compounds.",  // RF
            "Your taste receptors process familiar but unwelcome data.",  // RF
            "You \(verb) yourself like a wine critic having existential doubts.",  // TC
            "Your oral investigation confirms what soap already knew.",  // TC
            "The gustatory examination of self achieves predictable unpleasantness.",  // TP
            "Your molecular signature undergoes intimate taste evaluation."  // TP
        )
    }

    open override func tellCharacter(_ character: String) -> String {
        oneOf(
            "You begin addressing \(character), then realize you have nothing to say.",  // TC
            "\(character) waits politely for your conversational topic.",  // TC
            "Your attempt to engage \(character) lacks a subject matter.",  // SJ
            "One requires an actual topic to discuss with \(character).",  // SJ
            "You open your mouth to address \(character), then pause thoughtfully.",  // DP
            "Tell \(character) about what, exactly? Specify your discourse.",  // DP
            "Such conversational ambition! \(character) awaits your topic.",  // OW
            "\(character) hangs on your every unspoken word.",  // OW
            "\(character) demonstrates the patience of someone expecting conversation.",  // MT
            "You gesture meaningfully at \(character). Content not included.",  // MT
            "\(character) proves a willing audience for unspecified discussion.",  // NC
            "A stirring performance of topicless social interaction.",  // NC
            "Communication initiated. \(character) awaits data transmission.",  // RF
            "\(character) stands ready to process whatever you were going to say.",  // RF
            "Your conversational intentions exist in pre-topical uncertainty.",  // DA
            "\(character) files this under 'conversations that never quite started.'",  // DA
            "Gonna need a subject to discuss with \(character).",  // DS
            "You address \(character) about... well, nothing in particular.",  // DS
            "\(character) waits for your topical specifications with growing curiosity.",  // TP
            "The conversational vector remains directionless."  // TP
        )
    }

    open override func tellCharacterAboutTopic(_ character: String, topic: String) -> String {
        oneOf(
            "\(character) listens politely to your thoughts on \(topic).",  // NC
            "\(character) receives your discourse about \(topic) with diplomatic silence.",  // NC
            "You enlighten \(character) about \(topic). They seem underwhelmed.",  // DP
            "\(character) endures your monologue on \(topic) with visible patience.",  // DP
            "\(character) demonstrates remarkable tolerance for unsolicited information on \(topic).",  // SJ
            "One shares one's wisdom on \(topic). \(character) acknowledges its existence.",  // SJ
            "\(character) gets the full lecture on \(topic), whether they wanted it or not.",  // MT
            "Your expertise on \(topic) receives \(character)'s polite inattention.",  // MT
            "Such passionate discourse! \(character) responds with thoughtful nodding.",  // OW
            "\(character) absorbs your insights on \(topic) with diplomatic grace.",  // OW
            "\(character) files your information about \(topic) under 'interesting, if true.'",  // DA
            "Your exposition on \(topic) earns \(character)'s courteous bewilderment.",  // DA
            "Communication successful. \(character) processes data on \(topic) reluctantly.",  // RF
            "\(character) demonstrates professional-grade listening to your theory about \(topic).",  // RF
            "\(character) adds your insights on \(topic) to their collection of random facts.",  // TC
            "Your monologue on \(topic) transforms \(character) into a reluctant student.",  // TC
            "\(character) nods along to your speech on \(topic) like they're getting paid.",  // DS
            "You educate \(character) about \(topic). They'll never be the same.",  // DS
            "\(character) absorbs your wisdom about \(topic) without visible transformation.",  // TP
            "The enlightenment of \(character) on \(topic) proceeds unilaterally."  // TP
        )
    }

    open override func tellEnemy(_ enemy: String) -> String {
        oneOf(
            "You begin addressing \(enemy), then realize you have nothing to say.",  // DP
            "\(enemy) waits impatiently for your conversational topic.",  // DP
            "Your attempt to engage \(enemy) in discourse lacks a subject matter.",  // SJ
            "One requires an actual topic to discuss with one's enemy.",  // SJ
            "You open your mouth to address \(enemy), then reconsider entirely.",  // OW
            "Tell \(enemy) about what, exactly? Choose your last words wisely.",  // OW
            "\(enemy) demonstrates the patience of someone expecting provocation.",  // MT
            "You gesture meaningfully at \(enemy). Hostility not included.",  // MT
            "\(enemy) proves a willing audience for unspecified confrontation.",  // NC
            "A stirring performance of topicless enemy engagement.",  // NC
            "\(enemy) awaits your discourse with growing suspicion.",  // DA
            "Communication initiated with hostile party. Content missing.",  // DA
            "\(enemy) stands ready to ignore whatever you were going to say.",  // RF
            "Your conversational gambit with \(enemy) lacks tactical direction.",  // RF
            "\(enemy) files this under 'weird things enemies do.'",  // TC
            "Your enemy engagement protocol exists in pre-topical uncertainty.",  // TC
            "Gonna need a subject to discuss with \(enemy).",  // DS
            "You address \(enemy) about... well, nothing in particular.",  // DS
            "\(enemy) waits for your topical specifications with armed patience.",  // TP
            "The hostile conversational vector remains directionless."  // TP
        )
    }

    open override func tellEnemyAboutTopic(_ enemy: String, topic: String) -> String {
        oneOf(
            "\(enemy) finds your lecture about \(topic) more annoying than threatening.",  // RF
            "Your educational discourse about \(topic) confuses \(enemy) momentarily.",  // RF
            "\(enemy) wasn't expecting a seminar about \(topic) mid-combat.",  // DP
            "Nothing strikes fear like unsolicited information about \(topic).",  // DP
            "\(enemy) questions your understanding of appropriate combat timing.",  // SJ
            "One does not discuss \(topic) during active hostilities.",  // SJ
            "\(enemy) experiences your lecture on \(topic) as the strangest provocation ever.",  // OW
            "Such scholarly enthusiasm! \(enemy) responds with conventional violence.",  // OW
            "\(enemy) prefers straightforward fighting to \(topic) discussions.",  // MT
            "Your professor act isn't fooling \(enemy) none.",  // MT
            "\(enemy) demonstrates remarkable resistance to \(topic) education.",  // NC
            "How wonderfully inappropriate! \(enemy) retaliates academically.",  // NC
            "\(enemy) adds 'lectures during combat' to their tactical assessment.",  // DA
            "Your \(topic) exposition mystifies \(enemy) completely.",  // DA
            "\(enemy) decides your \(topic) monologue constitutes psychological warfare.",  // TC
            "Your scholarly approach to violence baffles \(enemy).",  // TC
            "\(enemy) wasn't ready for interpretive combat education.",  // DS
            "Yeah, \(enemy) doesn't want a history lesson right now.",  // DS
            "\(enemy) processes your lecture on \(topic) as either threat or TED talk.",  // TP
            "Your educational combat strategy achieves maximum bewilderment."  // TP
        )
    }

    open override func tellItemAboutTopic(_ item: String, topic: String) -> String {
        oneOf(
            "You share your thoughts about \(topic) with \(item). Silence follows.",  // OW
            "\(item) proves a remarkably unresponsive conversationalist.",  // OW
            "Your discourse on \(topic) fails to engage \(item)'s interest.",  // SJ
            "\(item) receives your lecture about \(topic) with stoic indifference.",  // SJ
            "You explain \(topic) to \(item). \(item) remains educationally unmoved.",  // DP
            "\(item) demonstrates impressive resistance to your insights about \(topic).",  // DP
            "You regale \(item) with tales of \(topic). No applause follows.",  // MT
            "\(item) endures your monologue about \(topic) with dignity.",  // MT
            "Such passionate discourse! \(item) remains magnificently unimpressed.",  // NC
            "\(item) proves immune to your wisdom regarding \(topic).",  // NC
            "\(item) absorbs your knowledge about \(topic) without acknowledgment.",  // DA
            "Your educational efforts regarding \(topic) fall on deaf... whatever \(item) has.",  // DA
            "Information transfer fails. \(item) lacks receptive communication protocols.",  // RF
            "\(item) demonstrates zero interest in data relating to \(topic).",  // RF
            "\(item) tolerates your discussion of \(topic) philosophically.",  // TC
            "Your expertise on \(topic) impresses no one, least of all \(item).",  // TC
            "You lecture \(item) about \(topic). \(item) doesn't take notes.",  // DS
            "\(item) wins the award for 'most disinterested audience.'",  // DS
            "\(item) absorbs your wisdom about \(topic) without yielding commentary.",  // TP
            "The intellectual baptism of \(item) regarding \(topic) achieves cosmic futility."  // TP
        )
    }

    open override func tellObject(_ item: String) -> String {
        oneOf(
            "You begin addressing \(item), then realize you have nothing to say.",  // DA
            "\(item) awaits your conversational topic with infinite patience.",  // DA
            "Your attempt to engage \(item) lacks a subject matter.",  // SJ
            "One requires an actual topic to discuss with \(item).",  // SJ
            "You open your mouth to address \(item), then close it thoughtfully.",  // DP
            "Tell \(item) about what, exactly? Specify your discourse.",  // DP
            "Such conversational ambition! Now choose something to discuss.",  // OW
            "\(item) hangs on your every unspoken word.",  // OW
            "You gesture meaningfully at \(item). Meaning not included.",  // MT
            "\(item) waits for your topic with the patience of the inanimate.",  // MT
            "\(item) proves a willing audience for unspecified conversation.",  // NC
            "A stirring performance of topicless discourse.",  // NC
            "Communication protocol initiated. Topic parameter missing.",  // RF
            "\(item) stands ready to ignore whatever you were going to say.",  // RF
            "Your conversational intentions hover in conceptual limbo.",  // TC
            "\(item) exists in pre-discussion uncertainty.",  // TC
            "Gonna need a subject to discuss with \(item).",  // DS
            "You address \(item) about... well, nothing in particular.",  // DS
            "The universe awaits your topical specifications.",  // TP
            "\(item) remains suspended pending conversational instructions."  // TP
        )
    }

    open override func tellTopic() -> String {
        oneOf(
            "nothing in particular",
            "the meaning of existence",
            "your life choices",
            "the current situation",
            "recent events",
            "your personal philosophy",
            "the nature of reality",
            "your deepest thoughts",
            "the mysteries of life",
            "your current predicament",
            "the state of things",
            "your accumulated wisdom",
            "the bigger picture",
            "your general observations",
            "the human condition",
            "your random musings",
            "the way things are",
            "your inner monologue",
            "the cosmic joke",
            "your existential concerns"
        )
    }

    open override func think() -> String {
        oneOf(
            "Your undirected contemplation achieves philosophical breakthrough typically associated with profound mental wandering.",  // DA
            "You think deeply about nothing in particular, like a scholar studying the art of intellectual drift.",  // DA
            "Your aimless meditation demonstrates the kind of focused unfocus found in professional daydreaming.",  // TC
            "You engage in pure thought, convinced that thinking without purpose somehow counts as meaningful activity.",  // TC
            "How splendidly you've mastered the art of mental effort completely divorced from actual objectives.",  // NC
            "Your purposeless contemplation shows touching faith that thinking harder automatically produces worthwhile results.",  // NC
            "You employ your brain using methods that would perplex a reasonably goal-oriented hamster.",  // RF
            "Your undirected mental activity demonstrates reasoning skills typically found in confused philosophy textbooks.",  // RF
            "You reflect upon nothing with wisdom that would enlighten a particularly thoughtful void.",  // SJ
            "Your meditation on existence displays careful consideration of the magnificently unspecific.",  // SJ
            "Your thinking proves that having thoughts and having purposeful thoughts are delightfully different activities.",  // DP
            "You contemplate existence itself, demonstrating that mental effort and mental achievement are wonderfully unrelated.",  // DP
            "You ponder the universe with systematic thoroughness that transforms cosmic curiosity into intellectual bewilderment.",  // TP
            "Your philosophical consideration of everything achieves breakthrough insights typically associated with thinking about nothing.",  // TP
            "You think profoundly about existence, like someone convinced that mental effort automatically produces wisdom.",  // DS
            "Your deep contemplation employs analytical skills usually reserved for solving mysteries that don't exist.",  // DS
            "You engage in pure thought as if expecting profound revelations from undirected mental activity.",  // MT
            "Your thoughtful consideration of existence demonstrates that thinking and accomplishing are wonderfully independent processes.",  // MT
            "You think--how perfectly this captures humanity's gift for mistaking mental activity for actual progress.",  // OW
            "Your intellectual meditation proves that having deep thoughts and having useful ones are entirely different talents."  // OW
        )
    }

    open override func thinkAboutCharacter(_ character: String) -> String {
        oneOf(
            "Your analysis of \(character) achieves the penetrating insight of a fortune cookie.",  // DA
            "You contemplate \(character) like a philosopher studying particularly confusing homework.",  // DA
            "Your thoughts about \(character) remain as private as they are shallow.",  // TC
            "You study \(character) with the intensity of someone reading invisible tea leaves.",  // TC
            "How marvelously you've mastered the art of thinking about people without understanding them.",  // NC
            "Your contemplation of \(character) demonstrates that observation and comprehension are entirely different skills.",  // NC
            "You analyze \(character) using the same rigorous methodology employed for guessing jellybeans.",  // RF
            "Your mental evaluation of \(character) employs reasoning that would puzzle a confused cat.",  // RF
            "You reflect upon \(character) with the careful deliberation of a deeply thoughtful turnip.",  // SJ
            "Your consideration of \(character) displays wisdom roughly equivalent to yesterday's newspaper horoscope.",  // SJ
            "You think about \(character), proving that having opinions requires no actual qualifications.",  // DP
            "Your psychological assessment of \(character) demonstrates the touching belief that staring equals insight.",  // DP
            "You ponder \(character) with systematic thoroughness that transforms curiosity into profound confusion.",  // TP
            "Your meditation on \(character) achieves breakthrough understanding typically associated with fortune cookies.",  // TP
            "You contemplate \(character) like someone convinced that thinking harder automatically produces better thoughts.",  // DS
            "Your analysis of \(character) employs the kind of expertise usually reserved for guessing.",  // DS
            "You study \(character) as if expecting deep thoughts to materialize through pure wishful thinking.",  // MT
            "Your thoughtful examination of \(character) demonstrates that concentration and comprehension are wonderfully unrelated.",  // MT
            "You think about \(character)--how perfectly this illustrates the difference between activity and achievement.",  // OW
            "Your intellectual consideration of \(character) proves that having thoughts and understanding people are charmingly different."  // OW
        )
    }

    open override func thinkAboutEnemy(_ enemy: String) -> String {
        oneOf(
            "Your strategic analysis of \(enemy) employs military thinking that would confuse a particularly dim pacifist.",  // DA
            "You contemplate \(enemy) with the tactical brilliance of someone planning to negotiate with hurricanes.",  // DA
            "Your thoughts about \(enemy) demonstrate the kind of battlefield psychology typically found in greeting cards.",  // TC
            "You study \(enemy) like a scholar convinced that understanding predators makes them less bitey.",  // TC
            "How perfectly you've grasped that thinking about danger is practically identical to avoiding it.",  // NC
            "Your contemplation of \(enemy) shows admirable confidence that mental preparation equals actual preparation.",  // NC
            "You analyze \(enemy) using combat theory that would perplex a confused philosopher.",  // RF
            "Your tactical assessment of \(enemy) demonstrates reasoning skills that would impress a particularly thoughtful sheep.",  // RF
            "You reflect upon \(enemy) with the strategic wisdom of someone who believes meditation conquers violence.",  // SJ
            "Your consideration of \(enemy) displays military insight roughly equivalent to fortune cookie philosophy.",  // SJ
            "You think about \(enemy), proving that having battle plans and having useful plans are delightfully different.",  // DP
            "Your psychological warfare against \(enemy) consists entirely of thinking really hard in their general direction.",  // DP
            "You ponder \(enemy) with systematic thoroughness that transforms threat assessment into philosophical wandering.",  // TP
            "Your meditation on \(enemy) achieves tactical breakthrough typically associated with wishful thinking.",  // TP
            "You contemplate \(enemy) like someone convinced that understanding monsters makes them less monstrous.",  // DS
            "Your analysis of \(enemy) employs the kind of military strategy usually reserved for daydreaming.",  // DS
            "You study \(enemy) as if expecting deep thoughts to somehow translate into combat effectiveness.",  // MT
            "Your thoughtful examination of \(enemy) demonstrates that planning and overthinking are wonderfully similar activities.",  // MT
            "You think about \(enemy)--how charmingly this illustrates the difference between strategy and actually having one.",  // OW
            "Your intellectual consideration of \(enemy) proves that contemplation and confrontation are entirely unrelated skills."  // OW
        )
    }

    open override func thinkAboutItem(_ item: String) -> String {
        oneOf(
            "Your deep thoughts about \(item) rival the philosophical depth of elevator music.",  // DA
            "You ponder \(item) like a scholar decoding messages from particularly silent rocks.",  // DA
            "Your contemplation of \(item) produces insights as revelatory as reading yesterday's headlines.",  // TC
            "You regard \(item) thoughtfully, convinced that staring harder will unlock its mysteries.",  // TC
            "How splendidly you've demonstrated that thinking about something equals understanding it perfectly.",  // NC
            "Your intellectual engagement with \(item) shows the touching belief that objects reward attention.",  // NC
            "You analyze \(item) using mental processes that would puzzle a reasonably intelligent doorknob.",  // RF
            "Your scientific observation of \(item) employs methodology typically reserved for cloud appreciation.",  // RF
            "You reflect upon \(item) with wisdom that would impress a particularly thoughtful houseplant.",  // SJ
            "Your meditation on \(item) demonstrates careful consideration of the thoroughly unremarkable.",  // SJ
            "You think about \(item), proving that deep thoughts and useful thoughts are charmingly different.",  // DP
            "Your focused attention on \(item) suggests someone who believes concentration equals comprehension.",  // DP
            "You contemplate \(item) with systematic precision that transforms simple objects into complex confusion.",  // TP
            "Your philosophical examination of \(item) achieves breakthrough understanding of the completely obvious.",  // TP
            "You ponder \(item) like someone convinced that thinking harder automatically produces better results.",  // DS
            "Your careful study of \(item) employs analytical skills usually reserved for guessing games.",  // DS
            "You examine \(item) as if expecting profound revelations from thoroughly ordinary objects.",  // MT
            "Your thoughtful consideration of \(item) demonstrates that concentration and insight are wonderfully unrelated.",  // MT
            "You think about \(item)--how perfectly this captures modern humanity's gift for overthinking everything.",  // OW
            "Your deep contemplation of \(item) proves that having thoughts and having worthwhile thoughts differ significantly."  // OW
        )
    }

    open override func thinkAboutLocation(_ location: String) -> String {
        oneOf(
            "Your spatial analysis of \(location) employs geography skills that would confuse a lost tourist.",  // DA
            "You contemplate \(location) like a philosopher studying the deep meaning of being somewhere.",  // DA
            "Your thoughts about \(location) demonstrate the kind of environmental awareness found in fortune cookies.",  // TC
            "You regard \(location) thoughtfully, convinced that places reward intellectual attention with secret knowledge.",  // TC
            "How marvelously you've grasped that thinking about where you are improves everything about it.",  // NC
            "Your contemplation of \(location) shows touching faith that mental effort equals geographical understanding.",  // NC
            "You analyze \(location) using observational methods that would perplex a reasonably alert compass.",  // RF
            "Your scientific assessment of \(location) demonstrates reasoning skills that would impress confused moss.",  // RF
            "You reflect upon \(location) with wisdom that would enlighten a particularly thoughtful signpost.",  // SJ
            "Your meditation on \(location) displays careful consideration of the thoroughly self-evident.",  // SJ
            "You think about \(location), proving that having observations and having useful ones are charmingly different.",  // DP
            "Your focused examination of \(location) suggests someone who believes staring equals spatial comprehension.",  // DP
            "You ponder \(location) with systematic thoroughness that transforms simple geography into complex bewilderment.",  // TP
            "Your philosophical consideration of \(location) achieves breakthrough insights typically associated with stating the obvious.",  // TP
            "You contemplate \(location) like someone convinced that thinking harder will somehow improve the real estate.",  // DS
            "Your analytical study of \(location) employs expertise usually reserved for reading maps upside down.",  // DS
            "You examine \(location) as if expecting deep thoughts to somehow enhance your current coordinates.",  // MT
            "Your thoughtful observation of \(location) demonstrates that attention and understanding are wonderfully independent activities.",  // MT
            "You think about \(location)--how perfectly this illustrates humanity's gift for overcomplicating simple presence.",  // OW
            "Your intellectual engagement with \(location) proves that being somewhere and comprehending somewhere differ significantly."  // OW
        )
    }

    open override func thinkAboutUniversal(_ universal: String) -> String {
        oneOf(
            "Your cosmic contemplation of \(universal) achieves philosophical breakthrough typically associated with profound confusion.",  // DA
            "You ponder \(universal) like a scholar convinced that thinking harder will unlock universal secrets.",  // DA
            "Your meditation on \(universal) demonstrates the kind of elemental wisdom found in greeting cards.",  // TC
            "You regard \(universal) thoughtfully, as if expecting fundamental forces to reward your intellectual attention.",  // TC
            "How splendidly you've demonstrated that contemplating \(universal) equals understanding the cosmos perfectly.",  // NC
            "Your philosophical engagement with \(universal) shows touching faith that mental effort conquers natural mystery.",  // NC
            "You analyze \(universal) using observational methods that would perplex a reasonably intelligent universe.",  // RF
            "Your scientific meditation on \(universal) employs reasoning that would confuse particularly thoughtful physics.",  // RF
            "You reflect upon \(universal) with wisdom that would enlighten a cosmic fortune cookie.",  // SJ
            "Your contemplation of \(universal) displays careful consideration of the magnificently obvious.",  // SJ
            "You think about \(universal), proving that having cosmic thoughts and understanding reality are charmingly different.",  // DP
            "Your focused examination of \(universal) suggests someone who believes concentration equals universal comprehension.",  // DP
            "You ponder \(universal) with systematic thoroughness that transforms natural phenomena into philosophical bewilderment.",  // TP
            "Your intellectual consideration of \(universal) achieves breakthrough insights typically associated with stating cosmic obviousness.",  // TP
            "You contemplate \(universal) like someone convinced that thinking harder will somehow improve fundamental reality.",  // DS
            "Your analytical study of \(universal) employs expertise usually reserved for explaining existence to confused philosophers.",  // DS
            "You examine \(universal) as if expecting deep thoughts to somehow enhance basic universal principles.",  // MT
            "Your thoughtful observation of \(universal) demonstrates that pondering and comprehending are wonderfully independent activities.",  // MT
            "You think about \(universal)--how perfectly this captures humanity's gift for overcomplicating simple existence.",  // OW
            "Your cosmic meditation on \(universal) proves that having profound thoughts and having useful ones differ significantly."  // OW
        )
    }

    open override func thinkAboutSelf() -> String {
        oneOf(
            "Your self-analysis achieves psychological breakthrough typically associated with reading fortune cookies about yourself.",  // DA
            "You contemplate yourself like a philosopher studying their own particularly confusing homework assignment.",  // DA
            "Your introspective meditation demonstrates the kind of self-awareness found in bathroom mirror conversations.",  // TC
            "You regard yourself thoughtfully, convinced that thinking harder will unlock your own mysterious depths.",  // TC
            "How marvelously you've mastered the art of self-contemplation without achieving actual self-knowledge.",  // NC
            "Your philosophical self-examination shows touching faith that mental effort equals personal understanding.",  // NC
            "You analyze yourself using psychological methods that would perplex a reasonably self-aware goldfish.",  // RF
            "Your scientific self-assessment employs reasoning that would confuse a particularly thoughtful reflection.",  // RF
            "You reflect upon yourself with wisdom that would enlighten a cosmic self-help manual.",  // SJ
            "Your meditation on your own nature displays careful consideration of the thoroughly self-evident.",  // SJ
            "Your self-contemplation proves that having thoughts about yourself and understanding yourself are charmingly different.",  // DP
            "You think about yourself, demonstrating that introspection and insight are wonderfully unrelated skills.",  // DP
            "You ponder your own existence with systematic thoroughness that transforms self-awareness into self-bewilderment.",  // TP
            "Your intellectual self-consideration achieves breakthrough understanding typically associated with stating personal obviousness.",  // TP
            "You contemplate yourself like someone convinced that thinking harder will somehow improve your personality.",  // DS
            "Your analytical self-study employs expertise usually reserved for explaining yourself to confused therapists.",  // DS
            "You examine your own nature as if expecting deep thoughts to enhance your basic existence.",  // MT
            "Your thoughtful self-observation demonstrates that self-reflection and self-comprehension are wonderfully independent activities.",  // MT
            "You think about yourself--how perfectly this captures the modern tendency to mistake self-absorption for wisdom.",  // OW
            "Your introspective meditation proves that having profound self-thoughts and having useful ones differ significantly."  // OW
        )
    }

    open override func throwAtCharacter(
        _ command: Command,
        item: String,
        character: String
    ) -> String {
        oneOf(
            "\(character) dodges your \(item) projectile with alarmed agility.",  // DP
            "Your \(item) missile meets \(character)'s disapproving evasion.",  // DP
            "\(character) objects to being used for target practice.",  // SJ
            "\(item) sails past \(character), who questions your social skills.",  // SJ
            "\(character) demonstrates admirable reflexes avoiding your \(item) assault.",  // OW
            "Such aggressive aim! \(character) responds with defensive maneuvering.",  // OW
            "\(character) isn't interested in catching your \(item).",  // MT
            "Your \(command.gerund) technique alarms \(character) into evasive action.",  // MT
            "\(character) performs an elegant dodge-and-glare combination.",  // NC
            "How delightfully antisocial! \(character) objects with athletic grace.",  // NC
            "\(character) adds '\(command.pastParticiple) things at people' to their mental notes.",  // DA
            "Your \(item) bombardment earns \(character)'s active disapproval.",  // DA
            "Projectile trajectory intercepted by \(character)'s survival instincts.",  // RF
            "\(character) demonstrates superior dodging physics.",  // RF
            "\(character) files your \(item) attack under 'assault and battery.'",  // TC
            "Your ballistic diplomacy horrifies \(character) considerably.",  // TC
            "Yeah, people don't like having things \(command.pastParticiple) at them.",  // DS
            "\(character) wasn't expecting to become your pitching target.",  // DS
            "\(character) experiences your \(item) as unwelcome kinetic energy.",  // TP
            "The \(item) assault transforms \(character) into a reluctant dodgeball player."  // TP
        )
    }

    open override func throwAtEnemy(
        _ command: Command,
        item: String,
        enemy: String
    ) -> String {
        oneOf(
            "\(enemy) deflects \(item) with professional disdain.",  // OW
            "\(item) meets \(enemy)'s combat-ready evasion.",  // OW
            "\(enemy) demonstrates why they're still your enemy despite \(item).",  // DP
            "\(item) bounces off \(enemy) like a mildly irritating suggestion.",  // DP
            "\(enemy) absorbs \(item) without losing stride.",  // SJ
            "Your projectile assault earns \(enemy)'s grudging tactical respect.",  // SJ
            "\(enemy) catches \(item) and considers returning it with interest before tossing it aside.",  // MT
            "Your \(command.gerund) technique impresses \(enemy) about as much as expected.",  // MT
            "\(enemy) demonstrates superior projectile-dodging experience.",  // NC
            "How wonderfully hostile! \(enemy) responds with conventional violence.",  // NC
            "\(enemy) adds 'uses improvised missiles' to their combat assessment.",  // DA
            "\(item) proves marginally more effective than harsh language.",  // DA
            "Ballistic trajectory computed. \(enemy) computes counter-trajectory.",  // RF
            "\(item) experiences brief flight before \(enemy) demonstrates superior reflexes.",  // RF
            "\(enemy) treats \(item) as a warm-up exercise.",  // TC
            "Your ballistic diplomacy earns \(enemy)'s professional attention.",  // TC
            "\(enemy) wasn't impressed by your improvised artillery.",  // DS
            "\(item) joins the long list of things that haven't stopped \(enemy).",  // DS
            "\(enemy) processes \(item) as either projectile or gift. Probably projectile.",  // TP
            "\(item) achieves maximum enemy irritation, minimum enemy defeat."  // TP
        )
    }

    open override func throwAtObject(
        _ command: Command,
        item: String,
        target: String
    ) -> String {
        oneOf(
            "You \(command.verb) \(item) at \(target). \(target) remains supremely unimpressed.",  // RF
            "\(item) bounces off \(target) and settles into floor-based retirement.",  // RF
            "Your projectile assault on \(target) achieves maximum ineffectiveness.",  // DP
            "\(item) meets \(target) briefly, then descends to gravitational reality.",  // DP
            "Such ballistic enthusiasm! \(target) weathers your \(item) attack stoically.",  // OW
            "You launch \(item) at \(target) with more hope than physics.",  // OW
            "\(target) absorbs your \(item) bombardment with dignified indifference.",  // SJ
            "\(item) discovers that \(target) makes an excellent ricochet surface.",  // SJ
            "You give \(target) the full \(item) treatment. \(target) endures.",  // MT
            "\(item) achieves brief contact with \(target), then seeks floor-level employment.",  // MT
            "\(target) demonstrates impressive resistance to \(item)-based attacks.",  // NC
            "A stirring performance of object-on-object violence.",  // NC
            "\(item) learns that \(target) doesn't flinch when hit.",  // DA
            "Your \(item) missile proves no match for \(target)'s structural integrity.",  // DA
            "\(item) traces a ballistic arc toward \(target), then joins the floor community.",  // TC
            "Your \(command.gerund) transforms \(item) into \(target)'s unwelcome visitor.",  // TC
            "You chuck \(item) at \(target). \(target) wins by existing harder.",  // DS
            "\(item) bounces off \(target) like a rejected job application.",  // DS
            "\(item) experiences kinetic rejection from \(target)'s surface geometry.",  // TP
            "The \(item)-versus-\(target) confrontation ends in gravitational victory."  // TP
        )
    }

    open override func throwItem(
        _ command: Command,
        item: String
    ) -> String {
        oneOf(
            "You \(command.verb) \(item) with Olympic ambition. It lands with pedestrian results.",  // MT
            "\(item) achieves brief flight before gravity reasserts its authority.",  // MT
            "Your \(command.gerund) technique impresses no one, least of all \(item).",  // DP
            "\(item) experiences a moment of weightlessness, then harsh reality.",  // DP
            "Such vigorous \(command.gerund)! \(item) settles into its new floor-based lifestyle.",  // OW
            "You launch \(item) into a brief aerial career.",  // OW
            "\(item) discovers what 'down' means the hard way.",  // SJ
            "Your pitching arm sends \(item) on an involuntary relocation program.",  // SJ
            "You give \(item) the full trajectory treatment.",  // NC
            "A stirring performance of gravitational demonstration.",  // NC
            "\(item) takes an unscheduled trip to the floor.",  // DA
            "You successfully prove that \(item) is indeed subject to gravity.",  // DA
            "Kinetic energy transfers to \(item), then to the ground.",  // RF
            "\(item) participates unwillingly in your physics experiment.",  // RF
            "You \(command.verb) \(item) like you're auditioning for the anger management Olympics.",  // DS
            "\(item) gets the express route to floor level.",  // DS
            "\(item) enjoys a brief flight before meeting its new home address.",  // TC
            "Your \(command.gerund) demonstrates the fundamental relationship between effort and gravity.",  // TC
            "\(item) traces a perfect parabolic arc of abandonment.",  // TP
            "The \(command.gerund) of \(item) achieves maximum gravitational cooperation."  // TP
        )
    }

    open override func throwToCharacter(
        _ command: Command,
        item: String,
        character: String,
        value: Item.RoughValue
    ) -> String {
        oneOf(
            "\(character) catches \(item) with surprised grace.",  // NC
            "\(character) demonstrates admirable catching reflexes.",  // NC
            "You \(command.verb) \(item) to \(character), who receives it diplomatically.",  // SJ
            "\(character) accepts your aerial delivery of \(item).",  // SJ
            "\(character) catches \(item) like they've done this before.",  // DP
            "Your \(command.gerund) technique earns \(character)'s cautious approval.",  // DP
            "Such civilized projectile sharing! \(character) obliges with a catch.",  // OW
            "\(character) receives \(item) with practiced social grace.",  // OW
            "\(character) snatches \(item) out of the air like a pro.",  // MT
            "Your \(command.gerund) skills meet \(character)'s catching skills. Success!",  // MT
            "\(character) demonstrates the fine art of cooperative catching.",  // DA
            "\(item) finds a new home in \(character)'s possession.",  // DA
            "Ballistic transfer successful. \(character) now holds \(item).",  // RF
            "\(character) processes the incoming \(item) with appropriate reflexes.",  // RF
            "\(character) adds 'catches \(command.pastParticiple) objects' to their resume.",  // TC
            "Your aerial gift delivery meets \(character)'s athletic cooperation.",  // TC
            "\(character) catches \(item) like they're used to people throwing things.",  // DS
            "Your \(command.verb) transforms \(character) into \(item)'s new custodian.",  // DS
            "\(character) intercepts \(item) with practiced ease.",  // TP
            "The projectile transfer achieves successful character-to-item bonding."  // TP
        )
    }

    open override func throwToEnemy(
        _ command: Command,
        item: String,
        enemy: String,
        value: Item.RoughValue
    ) -> String {
        oneOf(
            "\(enemy) catches \(item) and immediately regrets this act of cooperation.",  // DA
            "\(enemy) reflexively catches \(item), then questions their life choices.",  // DA
            "\(enemy) demonstrates catching skills while maintaining hostile intent.",  // DP
            "Your aerial gift confuses \(enemy) momentarily.",  // DP
            "\(enemy) catches \(item) with the grace of someone who wants to hurt you.",  // SJ
            "\(enemy) accepts your projectile offering with suspicious efficiency.",  // SJ
            "\(enemy) demonstrates why enemies shouldn't receive airborne gifts.",  // OW
            "Such misguided generosity! \(enemy) now possesses \(item) and murderous intent.",  // OW
            "\(enemy) catches \(item) like they're planning to throw it back harder.",  // MT
            "Your \(command.gerund) skills meet \(enemy)'s hostile catching skills.",  // MT
            "\(enemy) adds 'provides weapons via \(command.verb)' to their tactical notes.",  // NC
            "How delightfully counterproductive! \(enemy) now holds \(item) menacingly.",  // NC
            "\(enemy) processes \(item) as either gift or ammunition.",  // RF
            "Ballistic transfer successful. \(enemy) evaluates \(item) for weaponization.",  // RF
            "\(enemy) catches \(item) with the enthusiasm of someone plotting revenge.",  // TC
            "Your aerial donation earns \(enemy)'s puzzled hostility.",  // TC
            "\(enemy) catches \(item) like they're wondering why you're helping them.",  // DS
            "Your \(command.verb) transforms \(enemy) into \(item)'s new and dangerous custodian.",  // DS
            "\(enemy) intercepts \(item) while maintaining appropriate levels of menace.",  // TP
            "The projectile transfer achieves successful enemy armament."  // TP
        )
    }

    open override func throwToObject(
        _ command: Command,
        item: String,
        target: String
    ) -> String {
        oneOf(
            "You \(command.verb) \(item) at \(target). \(target) remains supremely unimpressed.",  // RF
            "\(item) bounces off \(target) and settles into floor-based retirement.",  // RF
            "Your projectile assault on \(target) achieves maximum ineffectiveness.",  // DP
            "\(item) meets \(target) briefly, then descends to gravitational reality.",  // DP
            "Such ballistic enthusiasm! \(target) weathers your \(item) attack stoically.",  // OW
            "You launch \(item) at \(target) with more hope than physics.",  // OW
            "\(target) absorbs your \(item) bombardment with dignified indifference.",  // SJ
            "\(item) discovers that \(target) makes an excellent ricochet surface.",  // SJ
            "You give \(target) the full \(item) treatment. \(target) endures.",  // MT
            "\(item) achieves brief contact with \(target), then seeks floor-level employment.",  // MT
            "\(target) demonstrates impressive resistance to \(item)-based attacks.",  // NC
            "A stirring performance of object-on-object violence.",  // NC
            "\(item) learns that \(target) doesn't flinch when hit.",  // DA
            "Your \(item) missile proves no match for \(target)'s structural integrity.",  // DA
            "\(item) traces a ballistic arc toward \(target), then joins the floor community.",  // TC
            "Your throwing transforms \(item) into \(target)'s unwelcome visitor.",  // TC
            "You chuck \(item) at \(target). \(target) wins by existing harder.",  // DS
            "\(item) bounces off \(target) like a rejected job application.",  // DS
            "\(item) experiences kinetic rejection from \(target)'s surface geometry.",  // TP
            "The \(item)-versus-\(target) confrontation ends in gravitational victory."  // TP
        )
    }

    open override func tieCharacter(_ command: Command, character: String) -> String {
        oneOf(
            "\(character) objects strenuously to being \(command.pastParticiple).",  // OW
            "\(character) demonstrates remarkable resistance to your \(command.gerund) attempts.",  // OW
            "Your \(command.gerund) technique alarms \(character) considerably.",  // DP
            "\(character) retreats from your \(command.gerund) ambitions.",  // DP
            "\(character) questions your understanding of personal liberty.",  // SJ
            "One does not simply \(command.verbPhrase) people without consent.",  // SJ
            "\(character) isn't interested in being \(command.pastParticiple).",  // MT
            "Your \(command.gerund) skills meet \(character)'s escape artistry.",  // MT
            "\(character) demonstrates admirable anti-\(command.gerund) reflexes.",  // NC
            "How delightfully inappropriate! \(character) objects with athletic grace.",  // NC
            "\(character) adds 'attempts to \(command.verbPhrase) people' to their mental notes.",  // DA
            "Your \(command.gerund) proposal meets with visible horror.",  // DA
            "\(character) demonstrates superior evasion physics.",  // RF
            "Applied restraint meets human dignity. Dignity wins.",  // RF
            "\(character) files your \(command.gerund) attempt under 'restraining order material.'",  // TC
            "Your \(command.gerund) technique earns \(character)'s active disapproval.",  // TC
            "Yeah, people don't like being \(command.pastParticiple) by strangers.",  // DS
            "\(character) wasn't expecting to become your \(command.gerund) project.",  // DS
            "The universe suggests keeping your \(command.gerund) impulses to yourself.",  // TP
            "\(character) demonstrates that humans aren't meant for \(command.gerund)."  // TP
        )
    }

    open override func tieEnemy(_ command: Command, enemy: String) -> String {
        oneOf(
            "\(enemy) demonstrates why they're still dangerous despite your \(command.gerund) attempts.",  // DP
            "\(enemy) proves remarkably skilled at avoiding \(command.gerund).",  // DP
            "Your \(command.gerund) technique meets \(enemy)'s professional escape artistry.",  // SJ
            "\(enemy) objects to being \(command.pastParticiple) with violent efficiency.",  // SJ
            "\(enemy) demonstrates superior anti-\(command.gerund) combat training.",  // OW
            "Such ambitious \(command.gerund)! \(enemy) responds with conventional violence.",  // OW
            "\(enemy) isn't the \(command.gerund) type.",  // MT
            "Your \(command.gerund) skills prove no match for \(enemy)'s hostility.",  // MT
            "\(enemy) treats your \(command.gerund) attempt as a personal insult.",  // NC
            "How wonderfully optimistic! \(enemy) retaliates with prejudice.",  // NC
            "\(enemy) adds 'attempts battlefield \(command.gerund)' to their tactical assessment.",  // DA
            "Your \(command.gerund) strategy mystifies \(enemy) into violent confusion.",  // DA
            "Applied restraint meets applied resistance. Resistance wins.",  // RF
            "\(enemy) demonstrates why \(command.gerund) enemies requires backup.",  // RF
            "\(enemy) files your \(command.gerund) attempt under 'laughably inadequate tactics.'",  // TC
            "Your \(command.gerund) technique earns \(enemy)'s professional scorn.",  // TC
            "\(enemy) wasn't impressed by your improvised restraint methods.",  // DS
            "Your \(command.gerund) attempt joins the long list of things that haven't stopped \(enemy).",  // DS
            "\(enemy) processes your \(command.gerund) as either threat or comedy. Probably comedy.",  // TP
            "The \(command.gerund) of \(enemy) achieves maximum tactical futility."  // TP
        )
    }

    open override func tieItem(_ command: Command, item: String) -> String {
        oneOf(
            "You attempt to \(command.verbPhrase) \(item), but it refuses to cooperate.",  // RF
            "\(item) demonstrates impressive resistance to being \(command.pastParticiple).",  // RF
            "Your \(command.gerund) technique proves inadequate for \(item).",  // DP
            "\(item) resists your \(command.gerund) attempts with passive defiance.",  // DP
            "Such \(command.gerund) enthusiasm! \(item) remains stubbornly unfastened.",  // OW
            "You contemplate \(command.gerund) \(item), then lose confidence entirely.",  // OW
            "One's \(command.gerund) skills fail to impress \(item).",  // SJ
            "\(item) endures your \(command.gerund) attempts with dignified looseness.",  // SJ
            "You give \(item) the full \(command.gerund) treatment. Nothing takes.",  // MT
            "Your \(command.gerund) arm gets a workout. \(item) stays the same.",  // MT
            "A stirring performance of ineffective \(command.gerund).",  // NC
            "\(item) proves more slippery than your \(command.gerund) skills can handle.",  // NC
            "\(item) demonstrates superior anti-\(command.gerund) physics.",  // DA
            "Your \(command.gerund) attempts meet \(item)'s stubborn independence.",  // DA
            "\(item) tolerates your \(command.gerund) efforts philosophically.",  // TC
            "Your \(command.gerund) technique needs refinement, unlike \(item).",  // TC
            "You try to \(command.verbPhrase) \(item). \(item) disagrees.",  // DS
            "\(item) escapes your \(command.gerund) like a professional.",  // DS
            "\(item) absorbs your \(command.gerund) energy without yielding to constraint.",  // TP
            "The \(command.gerund) of \(item) achieves maximum futility."  // TP
        )
    }

    open override func tieItemToItself(_ command: Command, item: String) -> String {
        oneOf(
            "You attempt to \(command.verbPhrase) \(item) to itself, violating several laws of topology.",  // OW
            "\(item) demonstrates admirable resistance to self-\(command.gerund).",  // OW
            "Your \(command.gerund) technique encounters the philosophical problem of self-attachment.",  // DP
            "\(item) refuses to participate in its own \(command.gerund).",  // DP
            "Such ambitious \(command.gerund)! \(item) lacks the necessary self-cooperation.",  // SJ
            "One cannot \(command.verbPhrase) a thing to itself, however keenly one tries.",  // SJ
            "You contemplate \(command.gerund) \(item) to \(item), then question your spatial logic.",  // RF
            "The physics of self-\(command.gerund) prove remarkably unfavorable.",  // RF
            "\(item) isn't flexible enough for that particular trick.",  // MT
            "Your \(command.gerund) arm encounters the fundamental problem of object unity.",  // MT
            "A stirring performance of topologically impossible \(command.gerund).",  // NC
            "\(item) demonstrates why self-\(command.gerund) remains theoretical.",  // NC
            "\(item) tolerates your \(command.gerund) attempts but cannot split itself for attachment.",  // DA
            "The \(command.gerund) of \(item) to itself requires more \(item) than currently available.",  // DA
            "\(item) exists in a state of \(command.gerund)-resistant self-unity.",  // TC
            "Your \(command.gerund) technique needs work; \(item) needs a partner.",  // TC
            "You try to \(command.verbPhrase) \(item) to itself. Geometry disagrees.",  // DS
            "\(item) escapes your \(command.gerund) by being singular.",  // DS
            "\(item) absorbs your \(command.gerund) energy without achieving self-bondage.",  // TP
            "The recursive \(command.gerund) of \(item) achieves maximum paradoxical futility."  // TP
        )
    }

    open override func tieItemWithItself(_ command: Command, item: String) -> String {
        oneOf(
            "You attempt to \(command.verbPhrase) \(item) with itself, creating a delightful paradox.",  // RF
            "\(item) demonstrates poor qualifications as its own \(command.gerund) apparatus.",  // RF
            "Your \(command.gerund) technique encounters the problem of self-instrumentation.",  // DP
            "\(item) refuses to serve as both subject and tool of \(command.gerund).",  // DP
            "Such creative \(command.gerund)! \(item) proves inadequate for securing itself.",  // OW
            "You contemplate using \(item) to \(command.verbPhrase) \(item), then question reality.",  // OW
            "One cannot employ a thing as its own \(command.gerund) device.",  // SJ
            "\(item) lacks the necessary duplicity for self-\(command.gerund).",  // SJ
            "\(item) isn't equipped to be its own rope.",  // MT
            "Your \(command.gerund) logic encounters the fundamental problem of singular objects.",  // MT
            "A stirring performance of self-referential \(command.gerund) impossibility.",  // NC
            "\(item) demonstrates why objects cannot \(command.verbPhrase) themselves.",  // NC
            "\(item) tolerates your \(command.gerund) attempts but refuses to split duties.",  // DA
            "The \(command.gerund) partnership between \(item) and itself fails to materialize.",  // DA
            "\(item) exists in a state of \(command.gerund)-resistant self-employment.",  // TC
            "Your \(command.gerund) technique needs work; \(item) needs an assistant.",  // TC
            "You try to \(command.verbPhrase) \(item) with \(item). Mathematics objects.",  // DS
            "\(item) escapes your \(command.gerund) by refusing to moonlight as rope.",  // DS
            "\(item) absorbs your \(command.gerund) energy without achieving self-bondage.",  // TP
            "The auto-\(command.gerund) of \(item) achieves maximum recursive futility."  // TP
        )
    }

    open override func timePasses() -> String {
        oneOf(
            "Time passes with its usual indifference to your existence.",  // DA
            "You stand around professionally. Nothing applauds.",  // DA
            "The universe continues its expansion while you practice stillness.",  // DP
            "You wait with the patience of someone who has nowhere else to be.",  // DP
            "Such dedicated inactivity! Time appreciates the company.",  // OW
            "You master the fine art of elegant loitering.",  // OW
            "One waits with appropriate dignity and mounting boredom.",  // SJ
            "Time marches on, leaving you standing exactly where you started.",  // SJ
            "You wait like you're expecting something interesting to happen.",  // MT
            "Your standing-around technique impresses absolutely no one.",  // MT
            "A stirring performance of professional dawdling.",  // NC
            "How wonderfully still! You achieve maximum motionlessness.",  // NC
            "You wait with the enthusiasm of someone watching paint dry.",  // RF
            "Temporal progression continues independent of your participation.",  // RF
            "You conduct a thorough investigation of doing nothing.",  // TC
            "Your waiting skills receive a practical field test.",  // TC
            "You stand there like you're posing for a statue of indecision.",  // DS
            "Time passes. You remain a fixed point in its flow.",  // DS
            "Your temporal coordinates remain stable while existence flows around you.",  // TP
            "The cosmic clock ticks while you practice the meditation of inaction."  // TP
        )
    }

    open override func touchCharacter(_ verb: Verb, character: String) -> String {
        oneOf(
            "\(character) objects to your uninvited tactile investigation.",  // TC
            "Your \(verb.gerund) technique alarms \(character) considerably.",  // TC
            "\(character) retreats from your manual curiosity.",  // DP
            "Personal boundaries include touch-free zones, apparently.",  // DP
            "\(character) questions your understanding of appropriate physical contact.",  // SJ
            "One does not simply \(verb) people without invitation.",  // SJ
            "\(character) experiences your \(verb.gerund) as unwelcome intimacy.",  // OW
            "Such hands-on enthusiasm! \(character) objects strenuously.",  // OW
            "\(character) isn't a petting zoo exhibit.",  // MT
            "Your tactile investigation exceeds social protocols.",  // MT
            "\(character) demonstrates admirable resistance to being fondled.",  // NC
            "How delightfully inappropriate! \(character) recoils with dignity.",  // NC
            "\(character) adds 'inappropriately touchy' to their mental notes.",  // DA
            "Your manual examination meets with visible disapproval.",  // DA
            "Tactile sampling of humans proves socially inadvisable.",  // RF
            "\(character) prefers their personal space untouched.",  // RF
            "\(character) files your \(verb.gerund) under 'boundary violations.'",  // DS
            "Yeah, people don't like being randomly felt up.",  // DS
            "The universe suggests keeping your hands to yourself.",  // TP
            "\(character) demonstrates that humans aren't tactile exhibits."  // TP
        )
    }

    open override func touchEnemy(_ verb: Verb, enemy: String) -> String {
        oneOf(
            "\(enemy) finds your \(verb.gerund) more disturbing than threatening.",  // OW
            "Your tactile assault confuses \(enemy) momentarily.",  // OW
            "\(enemy) wasn't expecting a hands-on approach to combat.",  // DP
            "Nothing strikes fear like unexpected \(verb.gerund), apparently.",  // DP
            "\(enemy) questions your understanding of hostile engagement.",  // SJ
            "One does not fondle one's enemies during battle.",  // SJ
            "\(enemy) experiences your \(verb.gerund) as the strangest provocation ever.",  // MT
            "That's taking 'hands-on combat' way too literally.",  // MT
            "\(enemy) demonstrates superior \(verb)-avoidance techniques.",  // NC
            "How wonderfully inappropriate! \(enemy) retaliates with conventional violence.",  // NC
            "\(enemy) adds 'uses bizarre \(verb.gerund) attacks' to their assessment.",  // DA
            "Your tactile warfare mystifies \(enemy) completely.",  // DA
            "Manual contact proves less effective than anticipated.",  // RF
            "\(enemy) prefers conventional hostility to creepy \(verb.gerund).",  // RF
            "\(enemy) decides your \(verb.gerund) constitutes the weirdest attack ever.",  // TC
            "Your hands-on approach to violence baffles \(enemy).",  // TC
            "\(enemy) wasn't ready for interpretive combat \(verb.gerund).",  // DS
            "Yeah, \(enemy) doesn't want your tactile attention.",  // DS
            "\(enemy) processes your \(verb.gerund) as either threat or harassment.",  // TP
            "Your tactile combat strategy achieves maximum bewilderment."  // TP
        )
    }

    open override func touchObject(_ verb: Verb, item: String) -> String {
        oneOf(
            "You \(verb) \(item) with scientific thoroughness.",  // RF
            "\(item) receives your tactile investigation with stoic indifference.",  // RF
            "Your hands report back with comprehensive \(item) texture data.",  // SJ
            "\(item) endures your \(verb.gerund) with dignified passivity.",  // SJ
            "You give \(item) the full manual examination.",  // DP
            "\(item) tolerates your fondling with remarkable patience.",  // DP
            "Such dedicated \(verb.gerund)! \(item) remains reassuringly solid.",  // OW
            "You feel \(item) with the devotion of a tactile connoisseur.",  // OW
            "You \(verb) \(item) like you're checking its credentials.",  // MT
            "\(item) gets the full hands-on treatment.",  // MT
            "A stirring performance of object-focused palpation.",  // NC
            "\(item) demonstrates admirable tolerance for manual inspection.",  // NC
            "You conduct a comprehensive tactile survey of \(item).",  // DA
            "\(item) submits to your \(verb.gerund) with professional dignity.",  // DA
            "Your tactile sensors process \(item) data with practiced efficiency.",  // TC
            "\(item) absorbs your \(verb.gerund) without yielding secrets.",  // TC
            "You feel \(item) like you're writing its texture review.",  // DS
            "\(item) receives your manual attention with stoic grace.",  // DS
            "\(item) undergoes thorough tactile examination without complaint.",  // TP
            "The hands-on investigation of \(item) proceeds without revelation."  // TP
        )
    }

    open override func touchSelf(_ verb: Verb) -> String {
        oneOf(
            "You conduct a thorough tactile self-assessment.",  // DS
            "Self-\(verb.gerund): the loneliest form of quality control.",  // DS
            "You \(verb) yourself with the dedication of someone taking inventory.",  // DP
            "Your personal texture receives comprehensive manual review.",  // DP
            "Such devoted self-examination! You remain reassuringly solid.",  // OW
            "You \(verb) yourself with scientific detachment and immediate familiarity.",  // OW
            "One's tactile self-investigation proceeds with due diligence.",  // SJ
            "Your hands confirm what mirrors have been telling you.",  // SJ
            "You give yourself the full tactile inspection.",  // MT
            "Self-\(verb.gerund): when you're your own quality assurance department.",  // MT
            "A stirring performance of autonomous tactile verification.",  // NC
            "How delightfully self-aware! You remain pleasantly tangible.",  // NC
            "You conduct a comprehensive manual inventory of your corporeal assets.",  // DA
            "Your tactile sensors confirm continued existence parameters.",  // DA
            "Pressure receptors verify structural integrity of personal chassis.",  // RF
            "Your hands process familiar tactile data with practiced efficiency.",  // RF
            "You \(verb) yourself like you're checking for updates.",  // TC
            "Your manual self-examination confirms operational status.",  // TC
            "Your tactile investigation of self achieves predictable familiarity.",  // TP
            "The hands-on verification of personal existence proceeds satisfactorily."  // TP
        )
    }

    open override func turnCharacter(_ character: String) -> String {
        oneOf(
            "You attempt to turn \(character), who responds with the bewildered dignity of someone unaccustomed to being rotated.",  // SJ
            "\(character) experiences your turning efforts as an unexpected lesson in personal boundaries.",  // DP
            "You try to turn \(character), but they seem to have strong feelings about their current facing direction.",  // MT
            "\(character) politely resists your rotational enthusiasm with admirable composure.",  // NC
            "Your attempt to turn \(character) reveals that they're surprisingly committed to their present orientation.",  // OW
            "\(character) demonstrates that turning people is considerably more complex than turning objects.",  // TC
            "You discover that \(character) has developed a philosophical attachment to facing this particular way.",  // DA
            "\(character) regards your turning attempt as an interesting but ultimately unsuccessful social experiment.",  // SJ
            "Your hands find that \(character) subscribes to the radical notion of choosing their own direction.",  // DP
            "\(character) responds to your turning efforts with the patient forbearance of the frequently mishandled.",  // MT
            "You try turning \(character), but they appear to have strong opinions about rotational consent.",  // OW
            "\(character) maintains their bearing with the quiet dignity of someone who knows which way they're facing.",  // NC
            "Your turning ambitions meet \(character)'s steadfast commitment to personal autonomy.",  // TC
            "\(character) demonstrates that they're surprisingly well-anchored to their current position.",  // DA
        )
    }

    open override func turnFixedObject(_ item: String) -> String {
        oneOf(
            "You attempt to turn \(item) with the optimistic determination of someone who hasn't grasped the concept of 'fixed in place.'",  // DP
            "\(item) regards your turning efforts with the serene confidence of the permanently installed.",  // SJ
            "Your hands discover that \(item) has achieved a state of architectural permanence.",  // OW
            "You try turning \(item), but it appears to have made lasting commitments to its current location.",  // MT
            "\(item) demonstrates the sort of steadfast resolve that comes with being bolted to reality.",  // NC
            "Your turning ambitions meet \(item)'s unwavering dedication to structural integrity.",  // TC
            "\(item) responds to your efforts with the immovable dignity of something that predates your arrival.",  // DA
            "You discover that \(item) has tenure in the 'staying exactly where it is' department.",  // DP
            "\(item) maintains its position with the quiet authority of the fundamentally unturnable.",  // SJ
            "Your attempt reveals that \(item) subscribes to a more stationary interpretation of existence.",  // OW
            "\(item) politely declines your rotational invitation with the confidence of the deeply rooted.",  // MT
            "You find that \(item) has strong architectural opinions about remaining in its designated spot.",  // NC
            "\(item) exhibits the sort of stubborn permanence that makes engineers proud.",  // TC
            "The universe appears to have filed \(item) under 'things that don't turn' and lost the paperwork.",  // DA
        )
    }

    open override func turnItem(_ item: String) -> String {
        oneOf(
            "\(item) regards your turning efforts with the immovable dignity of something that knows better.",  // SJ
            "You attempt to turn \(item), but it subscribes to a more stationary philosophy of existence.",  // OW
            "\(item) politely declines your invitation to rotate.",  // NC
            "Your turning ambitions meet \(item)'s steadfast commitment to remaining exactly where it is.",  // DP
            "\(item) demonstrates the sort of stubborn integrity that refuses to be turned by mere enthusiasm.",  // MT
            "You discover that \(item) has strong opinions about its current orientation.",  // TC
            "\(item) responds to your turning attempt with the unwavering resolve of the professionally immobile.",  // DA
            "Your hands find that \(item) has achieved a zen-like state of rotational resistance.",  // SJ
            "\(item) seems to have tenure in its current position.",  // DP
            "You try turning \(item), but it appears to have philosophical objections to change.",  // OW
            "\(item) maintains its bearing with the confidence of something that's found its true direction.",  // MT
            "Your turning efforts bounce off \(item) like optimism off a tax collector.",  // NC
            "\(item) exhibits the sort of steadfast character that made the Empire what it was.",  // TC
            "The universe conspires with \(item) to remain disappointingly static.",  // DA
        )
    }

    open override func turnSelf() -> String {
        oneOf(
            "You execute a turn with the graceful efficiency of someone who at least knows where their own joints are.",  // NC
            "A successful rotation accomplished with all the dignity one can muster while spinning in place.",  // DP
            "You turn yourself around with the philosophical satisfaction of controlling at least one thing in this world.",  // SJ
            "You perform a personal rotation that would make a music box dancer weep with professional envy.",  // OW
            "You turn yourself with the practiced ease of someone who's mastered the art of facing different directions.",  // MT
            "A pirouette executed with all the subtle drama of someone making a statement about personal autonomy.",  // TC
            "You accomplish a turn that demonstrates your complete mastery over your own spatial orientation.",  // DA
            "You rotate with the quiet confidence of someone who knows which way they're pointing.",  // DP
            "A turn performed with the sort of casual competence that comes from years of being yourself.",  // NC
            "You execute a personal rotation that achieves exactly what one might expect from turning oneself.",  // SJ
            "You turn around with the satisfied air of someone who's successfully changed their perspective by 180 degrees.",  // MT
            "A graceful pivot that proves you remain the undisputed authority on your own directional preferences.",  // OW
            "You turn yourself with the effortless skill of someone intimately familiar with their own mechanics.",  // TC
            "You accomplish a rotation that stands as a testament to humanity's mastery over basic spatial concepts.",  // DA
        )
    }

    open override func undescribedLocation() -> String {
        oneOf(
            "You find yourself in a place so unremarkable that even the author forgot to describe it.",  // DP
            "You're standing somewhere that apparently defied all attempts at literary description.",  // MT
            "How wonderfully mysterious--a location so nondescript it transcends actual description.",  // OW
            "You've discovered a place that exists in the awkward gap between imagination and implementation.",  // NC
            "You stand in a location that demonstrates the author's refreshing faith in your own imagination.",  // SJ
            "You're in a place so featureless it makes blank paper seem vivid by comparison.",  // TC
            "You've found yourself in the literary equivalent of a placeholder that forgot to be replaced.",  // DA
            "You're standing in a location that apparently fell through the cracks of creative writing.",  // DP
            "You've discovered a place so mundane it defeated all attempts at atmospheric prose.",  // MT
            "You find yourself somewhere that exists purely to prove that even locations can have writer's block.",  // OW
            "You're in a spot that demonstrates the charming limitations of rushed game development.",  // NC
            "You stand in a place that's achieved the perfect balance between existing and being completely forgettable.",  // SJ
            "You've stumbled into a location that makes 'nondescript' seem like lavish praise.",  // TC
            "You're somewhere that apparently slipped through quality control while everyone was having tea.",  // DA
        )
    }

    open override func unknownItem(_ item: ItemID) -> String {
        oneOf(
            "No such thing presents itself to view.",  // SJ
            "Your eyes report no such entity.",  // SJ
            "That's not currently in evidence.",  // DP
            "Nothing like that around here.",  // DP
            "One sees many things, but not that.",  // OW
            "Alas, no such wonder graces this vicinity.",  // OW
            "Your visual search comes up empty.",  // MT
            "That particular thing remains unseeable.",  // MT
            "Nothing matching that description appears.",  // NC
            "One's vision fails to locate such an item.",  // NC
            "The requested object eludes observation.",  // DA
            "That doesn't seem to exist here.",  // DA
            "Optical sensors detect no such object.",  // RF
            "Zero matching items in visual range.",  // RF
            "The described thing remains notably absent.",  // TC
            "Your eyes find no evidence of that.",  // TC
            "Nope. Not seeing it.",  // DS
            "That's not a thing you can see.",  // DS
            "The visible world lacks that particular item.",  // TP
            "No such phenomenon manifests itself.",  // TP
            logLevel: .notice
        )
    }

    open override func verbDoesNotSupportMultipleObjects(_ verb: Verb) -> String {
        oneOf(
            "One \(verb) at a time, if you please.",  // SJ
            "Your ambitions exceed \(verb)'s modest capabilities.",  // SJ
            "Too many things, too few \(verb)s.",  // DP
            "Even \(verb) has its limits, darling.",  // DP
            "\(verb) prefers exclusive relationships with objects.",  // OW
            "Such ambitious \(verb.gerund)! Try singular focus.",  // OW
            "You can't \(verb) everything at once, despite your enthusiasm.",  // MT
            "\(verb) works best in monogamous circumstances.",  // MT
            "A splendid attempt at simultaneous \(verb.gerund). Stick to one.",  // NC
            "\(verb) demands your undivided attention per object.",  // NC
            "Multiple \(verb.gerund) remains beyond current capabilities.",  // DA
            "\(verb) hasn't evolved to multitask yet.",  // DA
            "The \(verb) function accepts one parameter at a time.",  // RF
            "Serial \(verb.gerund) recommended over parallel attempts.",  // RF
            "Your \(verb) enthusiasm overwhelms its design specifications.",  // TC
            "Try \(verb.gerund) things in an orderly queue.",  // TC
            "\(verb) isn't equipped for your wholesale approach.",  // DS
            "One does not simply \(verb) multiple things.",  // DS
            "The \(verb) continuum rejects your plurality.",  // TP
            "\(verb) operates on strict monogamous principles."  // TP
        )
    }

    open override func wave() -> String {
        oneOf(
            "You wave with the focused sociability of someone who's never met a greeting they couldn't misdirect.",  // DP
            "Your waving gesture hangs in the air like a salutation without a recipient.",  // MT
            "How wonderfully friendly--waving at absolutely nothing in particular.",  // OW
            "You wave with the sort of social enthusiasm that makes hermits seem gregarious.",  // NC
            "Your greeting demonstrates a refreshing disregard for the conventional need for someone to greet.",  // SJ
            "You wave as if the universe might politely wave back out of courtesy.",  // TC
            "Your waving achieves the perfect balance between friendliness and complete social confusion.",  // DA
            "You wave with the same targeted precision that's made all your other gestures so memorable.",  // DP
            "Your greeting suggests you've confused politeness with performance art.",  // MT
            "You demonstrate the sort of social technique that makes pointing seem like rocket science.",  // OW
            "Your waving reveals a mind that's transcended the conventional need for actual people.",  // NC
            "You wave with the patient dedication of someone who's never bothered to look around first.",  // SJ
            "Your greeting accomplishes exactly what one might expect from undirected enthusiasm.",  // TC
            "You wave as if the act of waving were more important than having someone to wave at.",  // DA
        )
    }

    open override func waveAtCharacter(_ character: String) -> String {
        oneOf(
            "You wave to \(character) with the social timing of someone who's never read a room in their life.",  // DP
            "Your greeting to \(character) demonstrates the sort of diplomatic finesse that makes international incidents seem inevitable.",  // MT
            "How wonderfully optimistic--waving at \(character) like some sort of perpetual goodwill ambassador.",  // OW
            "You wave to \(character) with the sort of social awareness that makes awkward silences seem comfortable.",  // NC
            "Your gesture toward \(character) reveals a mind blissfully unaware of social nuance.",  // SJ
            "You wave at \(character) as if friendliness were a universal language you'd never bothered to learn.",  // TC
            "Your greeting achieves the perfect balance between politeness and complete social obliviousness.",  // DA
            "You wave to \(character) with the same interpersonal genius that's made all your other encounters so memorable.",  // DP
            "Your gesture suggests you've confused \(character) with someone who might actually be pleased to see you.",  // MT
            "You wave at \(character) with the sort of cheerful persistence that makes avoidance seem like wisdom.",  // OW
            "\(character) receives your greeting with all the enthusiasm your social skills typically inspire.",  // NC
            "You wave to \(character) with the patient dedication of someone who's never heard of reading facial expressions.",  // SJ
            "Your greeting reveals the sort of social instincts that make hermits seem like party animals.",  // TC
            "You wave at \(character) as if good manners were somehow more important than mutual interest.",  // DA
        )
    }

    open override func waveAtEnemy(_ enemy: String) -> String {
        oneOf(
            "You wave to \(enemy) with the tactical brilliance of someone who's confused warfare with a garden party.",  // DP
            "Your friendly greeting to \(enemy) demonstrates a refreshing approach to conflict resolution.",  // MT
            "How wonderfully naive--waving at \(enemy) like some sort of diplomatic optimist with a death wish.",  // OW
            "You wave to \(enemy) with the sort of combat strategy that makes surrender flags seem aggressive.",  // NC
            "Your gesture toward \(enemy) reveals a mind that's transcended the conventional understanding of hostility.",  // SJ
            "You wave at \(enemy) as if politeness might somehow defuse the urge to destroy you.",  // TC
            "Your greeting achieves the perfect balance between courtesy and complete tactical suicide.",  // DA
            "You wave to \(enemy) with the same military genius that's made all your other strategies so memorable.",  // DP
            "Your friendly gesture suggests you've confused \(enemy) with someone considerably less homicidal.",  // MT
            "You wave at \(enemy) with the sort of diplomatic technique that makes peace treaties seem like weapons.",  // OW
            "\(enemy) receives your greeting with all the warmth you've come to expect from mortal adversaries.",  // NC
            "You wave to \(enemy) with the patient dedication of someone who's never heard of mutual animosity.",  // SJ
            "Your greeting reveals the sort of combat instincts that make pacifists seem bloodthirsty.",  // TC
            "You wave at \(enemy) as if friendliness were somehow more effective than actual self-preservation.",  // DA
        )
    }

    open override func waveAtObject(_ item: String) -> String {
        oneOf(
            "You wave to \(item) with the social grace of someone who's never grasped the concept of consciousness.",  // DP
            "Your greeting to \(item) demonstrates a refreshing approach to one-sided conversation.",  // MT
            "How wonderfully polite--waving at \(item) like some sort of diplomatic ambassador to the inanimate.",  // OW
            "You wave to \(item) with the sort of social awareness that makes mannequins seem responsive.",  // NC
            "Your gesture toward \(item) reveals a mind that's transcended the conventional need for reciprocity.",  // SJ
            "You wave at \(item) as if politeness might somehow bring it to life.",  // TC
            "Your greeting achieves the perfect balance between courtesy and complete social delusion.",  // DA
            "You wave to \(item) with the same interpersonal finesse that's made you so universally beloved.",  // DP
            "Your gesture suggests you've confused \(item) with something considerably more animate.",  // MT
            "You wave at \(item) with the sort of friendly technique that makes silence seem rude.",  // OW
            "\(item) receives your greeting with all the enthusiasm you've come to expect from inanimate objects.",  // NC
            "You wave to \(item) with the patient dedication of someone who's never heard of selective sociability.",  // SJ
            "Your greeting reveals the sort of social skills that make talking to walls seem like meaningful dialogue.",  // TC
            "You wave at \(item) as if friendliness were somehow contagious and might improve its personality.",  // DA
        )
    }

    open override func waveObject(_ item: String) -> String {
        oneOf(
            "You wave \(item) with the theatrical flair of someone who's never met a gesture they couldn't overdo.",  // DP
            "Your waving of \(item) demonstrates a refreshing commitment to pointless motion.",  // MT
            "How wonderfully dramatic--waving \(item) like some sort of interpretive dancer with props.",  // OW
            "You wave \(item) with the sort of purposeful energy that makes actual accomplishment seem overrated.",  // NC
            "Your gesture with \(item) reveals a mind that's transcended the conventional need for reasons.",  // SJ
            "You wave \(item) as if motion were simply another form of problem-solving.",  // TC
            "Your waving achieves the perfect balance between activity and complete pointlessness.",  // DA
            "You wave \(item) with the same focused direction that's guided all your other actions.",  // DP
            "Your gesture suggests you've confused \(item) with something that benefits from being waved.",  // MT
            "You wave \(item) with the sort of enthusiasm that makes stillness seem like wisdom.",  // OW
            "\(item) receives your waving with all the cooperation you've come to expect from inanimate objects.",  // NC
            "You wave \(item) with the patient dedication of someone who's never heard of conservation of energy.",  // SJ
            "Your waving technique reveals the sort of manual dexterity that makes dropping things seem inevitable.",  // TC
            "You wave \(item) as if vigorous motion were somehow more important than having a purpose.",  // DA
        )
    }

    open override func waveObjectAt(_ item: String, target: String) -> String {
        oneOf(
            "You wave \(item) at \(target) with the tactical precision of someone who's confused gesturing with accomplishment.",  // DP
            "Your waving of \(item) at \(target) demonstrates a refreshing approach to targeted futility.",  // MT
            "How wonderfully purposeful--waving \(item) at \(target) like some sort of directional enthusiast.",  // OW
            "You wave \(item) at \(target) with the sort of focused energy that makes actual action seem redundant.",  // NC
            "Your gesture toward \(target) with \(item) reveals a mind that's transcended the conventional need for results.",  // SJ
            "You wave \(item) at \(target) as if motion were simply another form of communication.",  // TC
            "Your waving achieves the perfect balance between specificity and complete pointlessness.",  // DA
            "You wave \(item) at \(target) with the same strategic brilliance that's made all your other moves so memorable.",  // DP
            "Your gesture suggests you've confused \(target) with something that might be impressed by waving.",  // MT
            "You wave \(item) at \(target) with the sort of directional technique that makes pointing seem subtle.",  // OW
            "\(target) receives your waving with all the response you've come to expect from your gestural skills.",  // NC
            "You wave \(item) at \(target) with the patient dedication of someone who's never heard of cause and effect.",  // SJ
            "Your waving technique reveals the sort of targeted precision that makes missing the point seem like an art form.",  // TC
            "You wave \(item) at \(target) as if vigorous motion were somehow more effective than actual interaction.",  // DA
        )
    }

    open override func whichEntrance() -> String {
        oneOf(
            "You stand there with the unfulfilled desire to enter something, anything, preferably something obvious.",  // DP
            "Your entering impulse hangs in the air like a question without an object.",  // MT
            "How wonderfully ambitious--wanting to enter without the inconvenience of specifying what.",  // OW
            "You feel a powerful urge to enter, though what remains charmingly unclear.",  // NC
            "Your desire to enter something demonstrates a mind unencumbered by practical details.",  // SJ
            "You stand ready to enter, waiting for the universe to provide an appropriate destination.",  // TC
            "Your entering ambitions remain magnificently unachieved due to a lack of specificity.",  // DA
            "You experience the sort of directional confusion that makes doorways seem theoretical.",  // DP
            "Your unfulfilled entering desire suggests you've confused wanting with doing.",  // MT
            "You remain poised to enter with the patient hope of someone who's forgotten to look around.",  // OW
            "Your entering impulse lacks only the trivial detail of what you're trying to enter.",  // NC
            "You stand there wanting to enter something with the focused vagueness of a philosophical question.",  // SJ
            "Your desire to enter remains as unspecific as it is unrealized.",  // TC
            "You feel ready to enter, though geography seems to have other plans.",  // DA
        )
    }

    open override func yell() -> String {
        oneOf(
            "You yell with the sophistication of a fishmonger's apprentice.",  // DP
            "Your vocal eruption disturbs the peace with admirable commitment.",  // TC
            "You engage in that most primitive form of human expression.",  // SJ
            "You bellow with all the charm of a foghorn in distress.",  // DP
            "Vocal projection proceeds without regard for civilized discourse.",  // OW
            "You yell as if volume could compensate for content.",  // MT
            "Your outburst echoes through space like expensive vulgarity.",  // TC
            "How delightfully barbaric to abandon indoor voice protocols.",  // NC
            "The acoustics bear witness to your commitment to being heard.",  // SJ
            "Your vocal cords vibrate at frequencies that alarm small animals.",  // DA
            "Your larynx considers it, then politely declines.",  // DP
            "The universe yawns at your vocal ambitions.",  // DA
            "You inhale mightily, then forget why.",  // MT
            "Such enthusiasm! Such restraint! Such anticlimax!",  // NC
            "Silence proves more eloquent than your intentions.",  // OW
            "Your inner monologue stays precisely that.",  // DS
            "Sound waves? In this economy?",  // TP
            "Even your echo abandons the effort.",  // TC
            "Your voice echoes impressively, accomplishing nothing whatsoever.",  // SJ
            "You yell with gusto, disturbing only yourself.",  // SJ
            "The universe remains stubbornly unimpressed by your outburst.",  // DP
            "You scream into the void. The void yawns.",  // DP
            "Such passion! Such volume! Such pointlessness!",  // OW
            "You yell beautifully, achieving nothing beautifully.",  // OW
            "Your throat protests this abuse of its talents.",  // MT
            "You holler like a politician--loud, clear, and ultimately ineffective.",  // MT
            "A splendid yell, though it changes nothing but your blood pressure.",  // NC
            "You bellow with theatrical flair, impressing absolutely no one.",  // NC
            "The acoustics here are marvelous for futile shouting.",  // DA
            "You yell. The universe continues its inexorable expansion, unperturbed.",  // DA
            "Your larynx performs admirably in this pointless endeavor.",  // RF
            "The sound waves propagate nicely, accomplishing precisely nothing.",  // RF
            "You shriek like someone who just discovered modern art prices.",  // DS
            "Your yell would wake the dead, if they cared.",  // DS
            "A magnificent howl, signifying nothing.",  // TC
            "You yell with the desperate energy of the eternally unheard.",  // TC
            "Your cry reverberates through space, bothering no one important.",  // TP
            "You emit a primal scream that the cosmos politely ignores."  // TP
        )
    }

    open override func yellAtObject(_ object: String) -> String {
        oneOf(
            "You berate \(object) with the fury of a disappointed critic.",  // DP
            "How perfectly absurd to harangue \(object)--it lacks the courtesy to listen.",  // OW
            "You holler at \(object) like it owes you money.",  // MT
            "Your vocal assault on \(object) proceeds with passionate futility.",  // TC
            "How terribly common to shout at something incapable of shame.",  // NC
            "You engage \(object) in heated discourse of remarkable one-sidedness.",  // SJ
            "\(object) receives your tirade with characteristic stoicism.",  // DA
            "You scold \(object) as if it possessed both ears and conscience.",  // DP
            "Verbal abuse of \(object) achieves predictably modest results.",  // OW
            "You yell at \(object) with all the effectiveness of rain on marble.",  // MT
            "Your outburst washes over \(object) like perfume on a statue.",  // TC
            "How delightfully primitive to lecture the deliberately deaf.",  // NC
            "The acoustics faithfully deliver your reproach to its mute target.",  // SJ
            "Your voice bounces off \(object) at the speed of wasted effort.",  // DA
        )
    }

    open override func yellAtCharacter(_ character: String) -> String {
        oneOf(
            "You berate \(character) with the eloquence of a disappointed governess.",  // DP
            "How delightfully vulgar to raise one's voice at \(character).",  // OW
            "You holler at \(character) like a preacher at a tent revival.",  // MT
            "Your vocal assault on \(character) proceeds with theatrical intensity.",  // TC
            "How terribly middle-class to shout at \(character) in public.",  // NC
            "You engage \(character) in discourse of elevated volume and diminished dignity.",  // SJ
            "\(character) receives your tirade with the grace of a crash test dummy.",  // DA
            "You scold \(character) as if volume could compensate for logic.",  // DP
            "Verbal combat with \(character) commences without regard for casualties.",  // OW
            "You yell at \(character) with all the subtlety of a carnival barker.",  // MT
            "Your outburst envelops \(character) like expensive indignation.",  // TC
            "How perfectly barbaric to abandon civilized discourse with \(character).",  // NC
            "The acoustics faithfully amplify your displeasure toward \(character).",  // SJ
            "Your voice reaches \(character) at frequencies that disturb local wildlife.",  // DA
        )
    }

    open override func yellAtEnemy(_ enemy: String) -> String {
        oneOf(
            "You berate \(enemy) with the righteous fury of the justifiably annoyed.",  // DP
            "Your vocal assault on \(enemy) proceeds with satisfying moral clarity.",  // TC
            "You engage \(enemy) in discourse befitting their evident character.",  // SJ
            "\(enemy) receives your tirade with all the grace they've earned.",  // DA
            "You scold \(enemy) as if they possessed the capacity for shame.",  // DP
            "Verbal warfare with \(enemy) commences with enthusiasm and purpose.",  // OW
            "You yell at \(enemy) with the conviction of the righteously indignant.",  // MT
            "Your outburst bathes \(enemy) in well-deserved vocal disapproval.",  // TC
            "The acoustics faithfully deliver your justified reproach to \(enemy).",  // SJ
            "Your voice reaches \(enemy) at frequencies calibrated for maximum irritation.",  // DA
            "You yell at \(enemy) with the tactical brilliance of someone who's confused volume with violence.",  // DP
            "Your shouting at \(enemy) demonstrates a refreshing approach to conflict resolution.",  // MT
            "How wonderfully threatening--yelling at \(enemy) like some sort of acoustic warrior.",  // OW
            "You yell at \(enemy) with the sort of combat strategy that makes actual weapons seem redundant.",  // NC
            "Your vociferous assault on \(enemy) reveals a mind that's transcended conventional fighting methods.",  // SJ
            "You yell at \(enemy) as if loudness were simply another form of intimidation.",  // TC
            "Your shouting attack achieves the perfect balance between noise and complete tactical failure.",  // DA
            "You yell at \(enemy) with the same military genius that's made all your other strategies so memorable.",  // DP
            "Your vocal assault suggests you've confused \(enemy) with someone who cares about your opinions.",  // MT
            "You yell at \(enemy) with the sort of threatening technique that makes silence seem menacing.",  // OW
            "\(enemy) receives your shouting with all the terror you've come to expect from your intimidation skills.",  // NC
            "You yell at \(enemy) with the patient dedication of someone who's never heard of actual fighting.",  // SJ
            "Your vocal attack reveals the sort of combat skills that make harsh language seem like artillery.",  // TC
            "You yell at \(enemy) as if volume were somehow more effective than actual weaponry.",  // DA
        )
    }

    open override func yesNoFumble() -> String {
        oneOf(
            "Your response eludes interpretation. Assuming no.",  // SJ
            "One shall interpret your confusion as prudent refusal.",  // SJ
            "Unclear responses default to the wisdom of inaction.",  // DP
            "When in doubt, we choose the less destructive path.",  // DP
            "Your ambiguity suggests second thoughts. Proceeding cautiously.",  // OW
            "Such mysterious communication! We'll assume you meant no.",  // OW
            "Garbled responses get the benefit of the doubt.",  // MT
            "Can't make heads or tails of that. Playing it safe.",  // MT
            "Diplomatic confusion calls for diplomatic retreat.",  // NC
            "One interprets uncertainty as elegant reluctance.",  // NC
            "Your response translates to universal 'never mind.'",  // DA
            "The universe interprets confusion as 'please don't.'",  // DA
            "Parsing error. Defaulting to conservative option.",  // RF
            "Ambiguous input processed as negative response.",  // RF
            "Your cryptic reply suggests hidden wisdom against proceeding.",  // TC
            "The subtext of your confusion whispers 'abort mission.'",  // TC
            "I'm gonna go with 'no' on that one.",  // DS
            "Your answer's unclear, so we're hitting the brakes.",  // DS
            "The indecipherable response defaults to self-preservation.",  // TP
            "Your linguistic uncertainty chooses the path of least regret."  // TP
        )
    }

    open override func yesWhat() -> String {
        oneOf(
            "Your enthusiastic 'yes' hangs in the air like a compliment at a funeral.",  // DP
            "You say yes with the confident timing of someone who's missed the entire conversation.",  // MT
            "How wonderfully agreeable--saying yes to absolutely nothing in particular.",  // OW
            "You respond affirmatively with the sort of social grace that makes silence seem golden.",  // NC
            "Your 'yes' demonstrates a refreshing willingness to agree with whatever you think you heard.",  // SJ
            "You say yes as if the universe had just asked for your opinion on something.",  // TC
            "Your affirmative response echoes with all the relevance of applause during a library reading.",  // DA
            "You agree with the sort of enthusiasm that makes people check their watches.",  // DP
            "Your 'yes' suggests you've confused conversation with a multiple choice exam.",  // MT
            "You respond positively to the deafening silence with admirable optimism.",  // OW
            "Your agreement arrives with the perfect timing of someone who's clearly not listening.",  // NC
            "You say yes with the confident authority of someone who's never been asked a question.",  // SJ
            "Your affirmative response demonstrates the sort of eager participation that makes teachers weep.",  // TC
            "You agree with nothing in particular, which is probably the safest option available to you.",  // DA
        )
    }

    open override func xyzzyResponse() -> String {
        oneOf(
            "A hollow voice says 'Really? In this economy?'",  // DA
            "A hollow voice whispers 'That went out of style decades ago.'",  // DA
            "A hollow voice mutters 'Nice try, but this isn't 1976.'",  // DP
            "A hollow voice sighs 'How charmingly retro of you.'",  // DP
            "A hollow voice declares 'One does not simply xyzzy anymore.'",  // SJ
            "A hollow voice observes 'Such nostalgia! Such futility!'",  // SJ
            "A hollow voice purrs 'My dear, that magic word expired ages ago.'",  // OW
            "A hollow voice notes 'Your mystical vocabulary needs updating.'",  // OW
            "A hollow voice drawls 'That dog won't hunt in these parts.'",  // MT
            "A hollow voice chuckles 'Points for trying, though.'",  // MT
            "A hollow voice announces 'The management regrets this facility is xyzzy-free.'",  // NC
            "A hollow voice proclaims 'How delightfully old-fashioned!'",  // NC
            "A hollow voice booms 'ERROR: MAGIC_WORD_NOT_FOUND.'",  // RF
            "A hollow voice explains 'The xyzzy protocol has been deprecated.'",  // RF
            "A hollow voice remarks 'Your spell-casting license has expired.'",  // TC
            "A hollow voice comments 'That password doesn't work here.'",  // TC
            "A hollow voice says 'Cute. What's next, plugh?'",  // DS
            "A hollow voice responds 'The 70s called. They want their magic word back.'",  // DS
            "A hollow voice intones 'Your incantation lacks proper authorization.'",  // TP
            "A hollow voice resonates 'The xyzzy continuum remains sealed.'"  // TP
        )
    }
}
