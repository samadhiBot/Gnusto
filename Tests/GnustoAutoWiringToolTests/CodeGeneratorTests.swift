import Testing

@testable import GnustoAutoWiringTool

@Suite("CodeGenerator Tests")
struct CodeGeneratorTests {

    @Test("CodeGenerator produces basic ID extensions")
    func testBasicIDExtensions() {
        var gameData = GameData()
        gameData.locationIDs = ["room", "hall"]
        gameData.itemIDs = ["chair", "table"]

        let generator = CodeGenerator()
        let generatedCode = generator.generate(from: gameData)

        // Should contain proper headers
        #expect(generatedCode.contains("// Generated by GnustoAutoWiringPlugin"))
        #expect(generatedCode.contains("import GnustoEngine"))

        // Should contain LocationID extension
        #expect(generatedCode.contains("extension LocationID {"))
        #expect(generatedCode.contains("static let room = LocationID(\"room\")"))
        #expect(generatedCode.contains("static let hall = LocationID(\"hall\")"))

        // Should contain ItemID extension
        #expect(generatedCode.contains("extension ItemID {"))
        #expect(generatedCode.contains("static let chair = ItemID(\"chair\")"))
        #expect(generatedCode.contains("static let table = ItemID(\"table\")"))
    }

    @Test("CodeGenerator handles empty GameData")
    func testEmptyGameData() {
        let gameData = GameData()
        let generator = CodeGenerator()
        let generatedCode = generator.generate(from: gameData)

        // Should contain headers and no-content message
        #expect(generatedCode.contains("// Generated by GnustoAutoWiringPlugin"))
        #expect(generatedCode.contains("import GnustoEngine"))
        #expect(
            generatedCode.contains(
                "// No ID constants or GameBlueprint extensions need to be generated."))

        // Should NOT contain any extensions
        #expect(!generatedCode.contains("extension LocationID"))
        #expect(!generatedCode.contains("extension ItemID"))
    }

    @Test("CodeGenerator produces sorted output")
    func testSortedOutput() {
        var gameData = GameData()
        // Add in non-alphabetical order to test sorting
        gameData.locationIDs = ["zebra", "alpha", "beta"]
        gameData.itemIDs = ["yankee", "xray", "zulu"]

        let generator = CodeGenerator()
        let generatedCode = generator.generate(from: gameData)

        // Should be sorted alphabetically
        let lines = generatedCode.components(separatedBy: .newlines)
        let locationLines = lines.filter { $0.contains("static let") && $0.contains("LocationID") }
        let itemLines = lines.filter { $0.contains("static let") && $0.contains("ItemID") }

        // Check LocationID sorting
        #expect(locationLines.count == 3)
        #expect(locationLines[0].contains("alpha"))
        #expect(locationLines[1].contains("beta"))
        #expect(locationLines[2].contains("zebra"))

        // Check ItemID sorting
        #expect(itemLines.count == 3)
        #expect(itemLines[0].contains("xray"))
        #expect(itemLines[1].contains("yankee"))
        #expect(itemLines[2].contains("zulu"))
    }

    @Test("CodeGenerator handles all ID types")
    func testAllIDTypes() {
        var gameData = GameData()
        gameData.locationIDs = ["room"]
        gameData.itemIDs = ["chair"]
        gameData.globalIDs = ["score"]
        gameData.fuseIDs = ["bomb"]
        gameData.daemonIDs = ["timer"]
        gameData.verbIDs = ["dance"]

        let generator = CodeGenerator()
        let generatedCode = generator.generate(from: gameData)

        // Should contain all extension types
        #expect(generatedCode.contains("extension LocationID {"))
        #expect(generatedCode.contains("extension ItemID {"))
        #expect(generatedCode.contains("extension GlobalID {"))
        #expect(generatedCode.contains("extension FuseID {"))
        #expect(generatedCode.contains("extension DaemonID {"))
        #expect(generatedCode.contains("extension Verb {"))

        // Should contain all expected constants
        #expect(generatedCode.contains("static let room = LocationID(\"room\")"))
        #expect(generatedCode.contains("static let chair = ItemID(\"chair\")"))
        #expect(generatedCode.contains("static let score = GlobalID(\"score\")"))
        #expect(generatedCode.contains("static let bomb = FuseID(\"bomb\")"))
        #expect(generatedCode.contains("static let timer = DaemonID(\"timer\")"))
        #expect(generatedCode.contains("static let dance = Verb(\"dance\")"))
    }

    @Test("Area instances are only created when needed per property collection")
    func testAreaInstancesOptimization() {
        var gameData = GameData()

        // Set up a GameBlueprint type
        gameData.gameBlueprintTypes = ["TestGame"]

        // Set up areas and properties
        gameData.gameAreaTypes = ["CoalMine", "Forest"]

        // CoalMine has non-static locations (needs instance for locations)
        gameData.locations = ["batRoom", "deadEnd5"]
        gameData.locationToAreaMap = ["batRoom": "CoalMine", "deadEnd5": "CoalMine"]
        gameData.propertyIsStatic = ["batRoom": false, "deadEnd5": false]

        // Forest has static combat system (no instance needed for combatSystems)
        gameData.combatSystems = ["thiefCombatSystem"]
        gameData.handlerToAreaMap = ["thiefCombatSystem": "Forest"]
        gameData.propertyIsStatic = ["thiefCombatSystem": true]

        let generator = CodeGenerator()
        let generatedCode = generator.generate(from: gameData)

        // Should create CoalMine instance in locations property
        #expect(generatedCode.contains("public var locations: [Location] {"))
        #expect(generatedCode.contains("let coalMine = CoalMine()"))
        #expect(generatedCode.contains("coalMine.batRoom"))
        #expect(generatedCode.contains("coalMine.deadEnd5"))

        // Should NOT create CoalMine instance in combatSystems property
        #expect(generatedCode.contains("public var combatSystems: [ItemID: any CombatSystem] {"))
        #expect(
            !generatedCode.contains(
                "public var combatSystems: [ItemID: any CombatSystem] {\n        let coalMine = CoalMine()"
            ))

        // Should use static access for Forest combat system
        #expect(generatedCode.contains("Forest.thiefCombatSystem"))
    }
}
