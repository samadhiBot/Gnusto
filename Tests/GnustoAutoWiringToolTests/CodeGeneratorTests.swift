import CustomDump
import Testing

@testable import GnustoAutoWiringTool

@Suite("CodeGenerator Tests")
struct CodeGeneratorTests {

    @Test("CodeGenerator produces basic ID extensions")
    func testBasicIDExtensions() {
        var gameData = GameData()
        gameData.locationIDs = ["room", "hall"]
        gameData.itemIDs = ["chair", "table"]

        let generator = CodeGenerator()
        let generatedCode = generator.generate(from: gameData)

        expectNoDifference(
            generatedCode,
            """
            // Generated by GnustoAutoWiringPlugin
            // Do not edit this file manually

            import GnustoEngine

            extension LocationID {
                static let hall = LocationID("hall")
                static let room = LocationID("room")
            }

            extension ItemID {
                static let chair = ItemID("chair")
                static let table = ItemID("table")
            }

            """
        )
    }

    @Test("CodeGenerator handles empty GameData")
    func testEmptyGameData() {
        let gameData = GameData()
        let generator = CodeGenerator()
        let generatedCode = generator.generate(from: gameData)

        expectNoDifference(
            generatedCode,
            """
            // Generated by GnustoAutoWiringPlugin
            // Do not edit this file manually

            import GnustoEngine

            // No ID constants or GameBlueprint extensions need to be generated.

            """
        )
    }

    @Test("CodeGenerator produces sorted output")
    func testSortedOutput() {
        var gameData = GameData()
        // Add in non-alphabetical order to test sorting
        gameData.locationIDs = ["zebra", "alpha", "beta"]
        gameData.itemIDs = ["yankee", "xray", "zulu"]

        let generator = CodeGenerator()
        let generatedCode = generator.generate(from: gameData)

        expectNoDifference(
            generatedCode,
            """
            // Generated by GnustoAutoWiringPlugin
            // Do not edit this file manually

            import GnustoEngine

            extension LocationID {
                static let alpha = LocationID("alpha")
                static let beta = LocationID("beta")
                static let zebra = LocationID("zebra")
            }

            extension ItemID {
                static let xray = ItemID("xray")
                static let yankee = ItemID("yankee")
                static let zulu = ItemID("zulu")
            }

            """
        )
    }

    @Test("CodeGenerator handles all ID types")
    func testAllIDTypes() {
        var gameData = GameData()
        gameData.locationIDs = ["room"]
        gameData.itemIDs = ["chair"]
        gameData.globalIDs = ["score"]
        gameData.fuseIDs = ["bomb"]
        gameData.daemonIDs = ["timer"]
        gameData.verbIDs = ["dance"]

        let generator = CodeGenerator()
        let generatedCode = generator.generate(from: gameData)

        expectNoDifference(
            generatedCode,
            """
            // Generated by GnustoAutoWiringPlugin
            // Do not edit this file manually

            import GnustoEngine

            extension LocationID {
                static let room = LocationID("room")
            }

            extension ItemID {
                static let chair = ItemID("chair")
            }

            extension GlobalID {
                static let score = GlobalID("score")
            }

            extension FuseID {
                static let bomb = FuseID("bomb")
            }

            extension DaemonID {
                static let timer = DaemonID("timer")
            }

            extension Verb {
                static let dance = Verb("dance")
            }

            """
        )
    }

    @Test("Area instances are only created when needed per property collection")
    func testAreaInstancesOptimization() {
        var gameData = GameData()

        // Set up a GameBlueprint type
        gameData.gameBlueprintTypes = ["TestGame"]

        // Set up areas and properties
        gameData.gameAreaTypes = ["CoalMine", "Forest"]

        // CoalMine has non-static locations (needs instance for locations)
        gameData.locations = ["batRoom", "deadEnd5"]
        gameData.locationToAreaMap = ["batRoom": "CoalMine", "deadEnd5": "CoalMine"]

        // Forest has static combat system (no instance needed for combatSystems)
        gameData.combatSystems = ["thiefCombatSystem"]
        gameData.handlerToAreaMap = ["thiefCombatSystem": "Forest"]

        // Set up static vs non-static properties
        gameData.propertyIsStatic = [
            "batRoom": false,
            "deadEnd5": false,
            "thiefCombatSystem": true,
        ]

        let generator = CodeGenerator()
        let generatedCode = generator.generate(from: gameData)

        expectNoDifference(
            generatedCode,
            """
            // Generated by GnustoAutoWiringPlugin
            // Do not edit this file manually

            import GnustoEngine

            extension TestGame {
                public var locations: [Location] {
                    let coalMine = CoalMine()

                    return [
                        coalMine.batRoom,
                        coalMine.deadEnd5,
                    ]
                }

                public var combatSystems: [ItemID: any CombatSystem] {
                    [
                        .thief: Forest.thiefCombatSystem,
                    ]
                }

            }

            """
        )
    }
}
