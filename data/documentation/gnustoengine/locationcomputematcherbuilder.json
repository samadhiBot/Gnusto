{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/LocationComputeMatcherBuilder"},"topicSections":[{"title":"Type Methods","generated":true,"identifiers":["doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/LocationComputeMatcherBuilder\/buildBlock(_:)"],"anchor":"Type-Methods"}],"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LocationComputeMatcherBuilder"}],"modules":[{"name":"GnustoEngine"}],"roleHeading":"Structure","symbolKind":"struct","navigatorTitle":[{"text":"LocationComputeMatcherBuilder","kind":"identifier"}],"title":"LocationComputeMatcherBuilder","role":"symbol","externalID":"s:12GnustoEngine29LocationComputeMatcherBuilderV"},"hierarchy":{"paths":[["doc:\/\/GnustoEngine\/documentation\/GnustoEngine"]]},"abstract":[{"type":"text","text":"Result builder for creating clean, declarative location property computing."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/gnustoengine\/locationcomputematcherbuilder"]}],"kind":"symbol","sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"attribute","text":"@resultBuilder"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LocationComputeMatcherBuilder"}],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This builder allows you to write location computers in a declarative way:"}]},{"syntax":"swift","code":["static let enchantedForestComputer = LocationComputer(for: .enchantedForest) {","    locationProperty(.description) { context in","        let timeOfDay = try await context.gameState.value(of: .timeOfDay) ?? \"day\"","        return .string(timeOfDay == \"night\" ? \"Dark woods loom.\" : \"Sunlight filters through trees.\")","    }","    ","    locationProperty(.isLit) { context in","        let timeOfDay = try await context.gameState.value(of: .timeOfDay) ?? \"day\"","        return .bool(timeOfDay == \"day\")","    }","}"],"type":"codeListing"}],"kind":"content"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://GnustoEngine/documentation/GnustoEngine/LocationComputeMatcherBuilder":{"identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/LocationComputeMatcherBuilder","role":"symbol","navigatorTitle":[{"text":"LocationComputeMatcherBuilder","kind":"identifier"}],"url":"\/documentation\/gnustoengine\/locationcomputematcherbuilder","kind":"symbol","type":"topic","abstract":[{"text":"Result builder for creating clean, declarative location property computing.","type":"text"}],"title":"LocationComputeMatcherBuilder","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LocationComputeMatcherBuilder","kind":"identifier"}]},"doc://GnustoEngine/documentation/GnustoEngine/LocationComputeMatcherBuilder/buildBlock(_:)":{"type":"topic","title":"buildBlock(_:)","url":"\/documentation\/gnustoengine\/locationcomputematcherbuilder\/buildblock(_:)","role":"symbol","abstract":[],"identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/LocationComputeMatcherBuilder\/buildBlock(_:)","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"buildBlock","kind":"identifier"},{"text":"(","kind":"text"},{"text":"LocationComputeMatcher","preciseIdentifier":"s:12GnustoEngine22LocationComputeMatchera","kind":"typeIdentifier"},{"text":"...) -> [","kind":"text"},{"text":"LocationComputeMatcher","preciseIdentifier":"s:12GnustoEngine22LocationComputeMatchera","kind":"typeIdentifier"},{"text":"]","kind":"text"}]},"doc://GnustoEngine/documentation/GnustoEngine":{"type":"topic","url":"\/documentation\/gnustoengine","abstract":[],"kind":"symbol","identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine","title":"GnustoEngine","role":"collection"}}}