{"kind":"article","sections":[],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Phase-1-Centralized-State-Mutation-via-GameState","text":"Phase 1: Centralized State Mutation via `GameState`","level":2},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Goal:","type":"text"}]},{"type":"text","text":" Ensure all modifications to the game state are channeled through a single, controlled mechanism within the "},{"type":"codeVoice","code":"GameState"},{"type":"text","text":" struct, guaranteeing that every change is recorded in the "},{"type":"codeVoice","code":"changeHistory"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Steps:"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Generalize "},{"type":"codeVoice","code":"StateChange"},{"type":"text","text":" Identifier:"}],"type":"strong"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Define "},{"type":"codeVoice","code":"EntityID"},{"type":"text","text":" enum ("},{"code":".item(ItemID)","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":".location(LocationID)"},{"type":"text","text":", "},{"type":"codeVoice","code":".player"},{"text":", ","type":"text"},{"type":"codeVoice","code":".global"},{"text":") in ","type":"text"},{"type":"codeVoice","code":"ActionResult.swift"},{"type":"text","text":"."}],"type":"paragraph"}],"checked":true},{"content":[{"type":"paragraph","inlineContent":[{"text":"Update ","type":"text"},{"type":"codeVoice","code":"StateChange"},{"type":"text","text":" struct to use "},{"code":"entityID: EntityID","type":"codeVoice"},{"text":" instead of ","type":"text"},{"code":"objectId: ItemID","type":"codeVoice"},{"type":"text","text":"."}]}],"checked":true},{"content":[{"inlineContent":[{"text":"Review and update ","type":"text"},{"type":"codeVoice","code":"StatePropertyKey"},{"text":" enum cases to align with ","type":"text"},{"code":"EntityID","type":"codeVoice"},{"text":" (e.g., ensure keys clearly map to item, location, player, or global state). Add missing keys like ","type":"text"},{"type":"codeVoice","code":".exits"},{"type":"text","text":" if needed, along with corresponding "},{"code":"StateValue","type":"codeVoice"},{"text":" cases.","type":"text"}],"type":"paragraph"}],"checked":true}],"type":"unorderedList"}],"checked":true},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Implement "},{"type":"codeVoice","code":"GameState.apply(_:)"},{"type":"text","text":":"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add "},{"type":"codeVoice","code":"public private(set)"},{"text":" access control to core state properties in ","type":"text"},{"type":"codeVoice","code":"GameState"},{"type":"text","text":" ("},{"code":"items","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"locations"},{"type":"text","text":", "},{"code":"flags","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"player"},{"type":"text","text":", "},{"type":"codeVoice","code":"activeFuses"},{"text":", ","type":"text"},{"code":"activeDaemons","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"pronouns"},{"text":", ","type":"text"},{"type":"codeVoice","code":"globalState"},{"type":"text","text":", "},{"code":"changeHistory","type":"codeVoice"},{"text":").","type":"text"}]}],"checked":true},{"content":[{"inlineContent":[{"type":"text","text":"Create a "},{"type":"codeVoice","code":"public mutating func apply(_ change: StateChange) throws"},{"type":"text","text":" method within "},{"type":"codeVoice","code":"GameState"},{"type":"text","text":"."}],"type":"paragraph"}],"checked":true},{"content":[{"inlineContent":[{"text":"Move the ","type":"text"},{"type":"codeVoice","code":"switch change.propertyKey"},{"type":"text","text":" logic from "},{"type":"codeVoice","code":"GameEngine.applyStateChange"},{"text":" into ","type":"text"},{"type":"codeVoice","code":"GameState.apply"},{"type":"text","text":"."}],"type":"paragraph"}],"checked":true},{"checked":true,"content":[{"type":"paragraph","inlineContent":[{"text":"Ensure ","type":"text"},{"type":"codeVoice","code":"GameState.apply"},{"text":" validates ","type":"text"},{"code":"change.oldValue","type":"codeVoice"},{"type":"text","text":" against the current state before applying the mutation."}]}]},{"checked":true,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure "},{"type":"codeVoice","code":"GameState.apply"},{"type":"text","text":" appends the "},{"code":"change","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"changeHistory","type":"codeVoice"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"after"}]},{"text":" a successful mutation.","type":"text"}]}]}]}],"checked":true},{"checked":true,"content":[{"inlineContent":[{"inlineContent":[{"text":"Refactor ","type":"text"},{"code":"GameEngine","type":"codeVoice"},{"text":":","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"checked":true,"content":[{"inlineContent":[{"text":"Modify ","type":"text"},{"code":"GameEngine.applyStateChange","type":"codeVoice"},{"text":" to be a simple forwarding call: ","type":"text"},{"code":"try gameState.apply(change)","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"checked":true,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify all methods\/code locations within "},{"type":"codeVoice","code":"GameEngine"},{"type":"text","text":" that directly modify "},{"code":"gameState","type":"codeVoice"},{"type":"text","text":" or its contained objects (e.g., "},{"type":"codeVoice","code":"updateItemParent"},{"text":", ","type":"text"},{"code":"setFlagValue","type":"codeVoice"},{"type":"text","text":", player move increments, fuse\/daemon updates in "},{"type":"codeVoice","code":"tickClock"},{"type":"text","text":", etc.)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Refactor these locations to:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Determine the ","type":"text"},{"type":"codeVoice","code":"oldValue"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Construct the appropriate "},{"type":"codeVoice","code":"StateChange"},{"type":"text","text":" object (using "},{"type":"codeVoice","code":"EntityID"},{"text":", ","type":"text"},{"type":"codeVoice","code":"StatePropertyKey"},{"text":", ","type":"text"},{"type":"codeVoice","code":"oldValue"},{"text":", ","type":"text"},{"type":"codeVoice","code":"newValue"},{"text":").","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Call ","type":"text"},{"code":"try gameState.apply(change)","type":"codeVoice"},{"text":" instead of performing direct mutation.","type":"text"}],"type":"paragraph"}]}]}],"checked":true},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create ergonomic helper methods in ","type":"text"},{"type":"codeVoice","code":"GameEngine"},{"text":" (e.g., ","type":"text"},{"code":"applyFlagChange","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"applyScoreUpdate"},{"text":", ","type":"text"},{"code":"applyItemMove","type":"codeVoice"},{"type":"text","text":") that encapsulate "},{"type":"codeVoice","code":"StateChange"},{"type":"text","text":" creation and the call to "},{"code":"gameState.apply","type":"codeVoice"},{"type":"text","text":" for common mutations needed by game logic (daemons, fuses, handlers)."}]}],"checked":true},{"content":[{"inlineContent":[{"text":"Ensure ","type":"text"},{"type":"codeVoice","code":"GameEngine.execute"},{"type":"text","text":" correctly calls "},{"type":"codeVoice","code":"gameState.apply(change)"},{"type":"text","text":" for changes originating from "},{"code":"ActionHandler","type":"codeVoice"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ActionResult"},{"text":"s (confirming the current implementation which looks correct).","type":"text"}],"type":"paragraph"}],"checked":true}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Testing:","type":"text"}]}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Add comprehensive unit tests for "},{"type":"codeVoice","code":"GameState.apply"},{"text":" covering all ","type":"text"},{"code":"StatePropertyKey","type":"codeVoice"},{"type":"text","text":" cases, including "},{"code":"oldValue","type":"codeVoice"},{"text":" validation.","type":"text"}],"type":"paragraph"}],"checked":true},{"content":[{"inlineContent":[{"type":"text","text":"Update\/add integration tests to ensure actions and engine operations correctly modify state and update "},{"type":"codeVoice","code":"changeHistory"},{"type":"text","text":" via the new mechanism."}],"type":"paragraph"}],"checked":true}],"type":"unorderedList"}],"checked":true}]},{"anchor":"Phase-2-Convert-Core-Models-to-Structs","type":"heading","text":"Phase 2: Convert Core Models to Structs","level":2},{"inlineContent":[{"inlineContent":[{"text":"Goal:","type":"text"}],"type":"strong"},{"text":" Leverage value semantics for ","type":"text"},{"code":"Item","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Location","type":"codeVoice"},{"text":" to further enhance predictability, simplify ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" conformance, and remove the need for snapshot types. (To be undertaken "},{"type":"emphasis","inlineContent":[{"type":"text","text":"after"}]},{"type":"text","text":" Phase 1 is complete and stable)."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Steps:"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Convert "},{"code":"Item","type":"codeVoice"},{"text":" to Struct:","type":"text"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Change "},{"type":"codeVoice","code":"Item"},{"type":"text","text":" declaration from "},{"type":"codeVoice","code":"class"},{"type":"text","text":" to "},{"type":"codeVoice","code":"struct"},{"text":".","type":"text"}],"type":"paragraph"}],"checked":true},{"content":[{"inlineContent":[{"type":"text","text":"Update all code that interacts with "},{"code":"Item","type":"codeVoice"},{"type":"text","text":" instances to handle value semantics (mutations will require replacing the instance in "},{"type":"codeVoice","code":"GameState.items"},{"type":"text","text":")."}],"type":"paragraph"}],"checked":true},{"checked":true,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adjust "},{"code":"GameState.apply","type":"codeVoice"},{"type":"text","text":" logic for item-related keys to replace the item struct in the dictionary."}]}]}]}],"checked":true},{"checked":true,"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Convert ","type":"text"},{"code":"Location","type":"codeVoice"},{"type":"text","text":" to Struct:"}]}],"type":"paragraph"},{"items":[{"checked":true,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Change "},{"type":"codeVoice","code":"Location"},{"text":" declaration from ","type":"text"},{"code":"class","type":"codeVoice"},{"type":"text","text":" to "},{"code":"struct","type":"codeVoice"},{"text":".","type":"text"}]}]},{"checked":true,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update all code that interacts with "},{"type":"codeVoice","code":"Location"},{"type":"text","text":" instances to handle value semantics."}]}]},{"checked":true,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adjust "},{"type":"codeVoice","code":"GameState.apply"},{"type":"text","text":" logic for location-related keys to replace the location struct in the dictionary."}]}]}],"type":"unorderedList"}]},{"checked":true,"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Remove Snapshot Types:"}]}]},{"type":"unorderedList","items":[{"checked":true,"content":[{"type":"paragraph","inlineContent":[{"text":"Delete ","type":"text"},{"type":"codeVoice","code":"ItemSnapshot.swift"},{"type":"text","text":"."}]}]},{"checked":true,"content":[{"type":"paragraph","inlineContent":[{"text":"Delete ","type":"text"},{"type":"codeVoice","code":"LocationSnapshot.swift"},{"type":"text","text":"."}]}]},{"checked":true,"content":[{"type":"paragraph","inlineContent":[{"text":"Update all code (primarily in ","type":"text"},{"type":"codeVoice","code":"GameEngine"},{"text":") that used snapshots to use the ","type":"text"},{"code":"Item","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Location","type":"codeVoice"},{"type":"text","text":" structs directly."}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Review ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" Conformance:"}]}]},{"type":"unorderedList","items":[{"checked":true,"content":[{"type":"paragraph","inlineContent":[{"text":"Verify ","type":"text"},{"code":"Item","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Location"},{"type":"text","text":", and "},{"type":"codeVoice","code":"GameState"},{"text":" conform to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" correctly."}]}]}]}],"checked":true},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Testing:"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Update existing tests to reflect the use of structs instead of classes\/snapshots."}],"type":"paragraph"}],"checked":true},{"checked":true,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add tests specifically verifying value semantics (ensuring mutations don’t have unintended side effects)."}]}]}],"type":"unorderedList"}],"checked":true}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/gnustoengine\/state_refactor_plan"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/STATE_REFACTOR_PLAN"},"metadata":{"title":"State Management Refactoring Plan [DONE]","role":"article","modules":[{"name":"GnustoEngine"}],"roleHeading":"Article"},"abstract":[{"text":"This document outlines the phased plan to refactor the Gnusto Engine’s state management for increased robustness, testability, and clarity, while maintaining good developer ergonomics.","type":"text"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/GnustoEngine\/documentation\/GnustoEngine"]]},"references":{"doc://GnustoEngine/documentation/GnustoEngine":{"type":"topic","identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine","abstract":[],"url":"\/documentation\/gnustoengine","title":"GnustoEngine","role":"collection","kind":"symbol"}}}