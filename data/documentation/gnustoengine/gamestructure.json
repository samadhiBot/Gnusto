{"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"content":[{"type":"heading","anchor":"Organizing-Your-Game","level":2,"text":"Organizing Your Game"},{"inlineContent":[{"type":"image","identifier":"gnusto-proxies.png"}],"type":"paragraph"},{"inlineContent":[{"text":"Gnusto separates your game into two layers: ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"static definitions"}]},{"text":" that describe your game world’s initial state, and ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"dynamic proxies"}]},{"text":" that represent the living, evolving world during gameplay. This architecture lets you write clean, declarative game content while enabling sophisticated runtime behaviors through event handlers and computed properties.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"The-Game-Blueprint","level":3,"text":"The Game Blueprint"},{"inlineContent":[{"text":"Your ","type":"text"},{"identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/GameBlueprint","type":"reference","isActive":true},{"text":" serves as the entry point, containing essential metadata and the initial game configuration. Most of the game blueprint can be generated automatically by the ","type":"text"},{"identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/GnustoAutoWiringPlugin","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["public struct CloakOfDarkness: GameBlueprint {","    public let title = \"Cloak of Darkness\"","    public let abbreviatedTitle = \"Cloak\"","    public let introduction = \"\"\"","        A basic IF demonstration.","","        Hurrying through the rainswept November night, you're glad to see the","        bright lights of the Opera House...","        \"\"\"","    public let release = \"0.0.3\"","    public let maximumScore = 2","    public let player = Player(in: .foyer)","","    \/\/ Note: All game content registration (items, locations, handlers, etc.)","    \/\/ is automatically handled by GnustoAutoWiringPlugin","}"]},{"type":"heading","anchor":"Structuring-Your-World","level":3,"text":"Structuring Your World"},{"inlineContent":[{"type":"text","text":"Organize your "},{"identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/Item","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/Location","type":"reference","isActive":true},{"type":"text","text":" definitions in logical groupings that represent your game world. The framework is flexible, so choose the structure that makes sense for your game’s scope and complexity."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Large games"}]},{"type":"text","text":" like "},{"type":"emphasis","inlineContent":[{"text":"Zork","type":"text"}]},{"type":"text","text":" benefit from regional organization, with special files for complex entities:"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["Zork1\/","├── main.swift","├── World","│   ├── BeneathHouse.swift     # Underground areas","│   ├── Dam.swift              # Dam complex","│   ├── Forest.swift           # Forest region","│   ├── ...","│   ├── Thief.swift            # Complex NPC with behaviors","│   └── Troll.swift            # Another complex NPC","├── Zork1.swift                # Game blueprint","└── ZorkMessenger.swift        # Custom Zork-specific responses"]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Smaller games"}]},{"type":"text","text":" like "},{"type":"emphasis","inlineContent":[{"text":"Cloak of Darkness","type":"text"}]},{"type":"text","text":" can fit everything in a single world file:"}],"type":"paragraph"},{"code":["CloakOfDarkness\/","├── CloakOfDarkness.swift      # Game blueprint","├── OperaHouse.swift           # All locations and items","└── main.swift"],"type":"codeListing","syntax":null},{"text":"Defining Static Content","level":3,"type":"heading","anchor":"Defining-Static-Content"},{"type":"paragraph","inlineContent":[{"text":"Your static definitions describe the initial state of the world – how things are when the adventure begins. For example, inside the Opera House in ","type":"text"},{"inlineContent":[{"type":"text","text":"Cloak of Darkness"}],"type":"emphasis"},{"text":", there is a cloakroom, and in that cloakroom there is a small brass hook screwed to the wall:","type":"text"}]},{"code":["struct OperaHouse {","    \/\/ ...","    let cloakroom = Location(.cloakroom)","        .name(\"Cloakroom\")","        .description(","            \"\"\"","            The walls of this small room were clearly once lined with hooks,","            though now only one remains. The exit is a door to the east.","            \"\"\"","        )","        .east(.foyer)","        .inherentlyLit","","    let hook = Item(.hook)","        .adjectives(\"small\", \"brass\")","        .in(.cloakroom)","        .omitDescription","        .isSurface","        .name(\"small brass hook\")","        .synonyms(\"peg\")","    \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"These definitions are just the starting point. Once the game begins, everything becomes dynamic.","type":"text"}]},{"text":"The Living World: Dynamic Proxies","level":2,"type":"heading","anchor":"The-Living-World-Dynamic-Proxies"},{"type":"paragraph","inlineContent":[{"type":"text","text":"During gameplay, you never work with static "},{"identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/Item","type":"reference","isActive":true},{"type":"text","text":" or "},{"identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/Location","type":"reference","isActive":true},{"type":"text","text":" objects directly. Instead, the engine provides "},{"inlineContent":[{"text":"proxy objects","type":"text"}],"type":"strong"},{"type":"text","text":" – "},{"identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/ItemProxy","type":"reference","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/LocationProxy","type":"reference","isActive":true},{"type":"text","text":", and "},{"identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/PlayerProxy","type":"reference","isActive":true},{"type":"text","text":" – that represent the current, evolving state of your world."}]},{"text":"Why Proxies?","level":3,"type":"heading","anchor":"Why-Proxies"},{"type":"paragraph","inlineContent":[{"text":"Proxies bridge the gap between your static definitions and the dynamic game world. They:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Track current state"}]},{"type":"text","text":": Is the door open? Is the room lit? Where is the sword now?"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Apply context","type":"text"}],"type":"strong"},{"text":": A room’s lighting depends on ","type":"text"},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"text":" light sources present, not just a static flag","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Enable intervention","type":"text"}]},{"text":": Event handlers can modify behaviors on the fly","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Compute properties"}],"type":"strong"},{"text":": Descriptions can change based on game state","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Ensure safety","type":"text"}],"type":"strong"},{"type":"text","text":": Handle concurrent access in Swift 6’s strict concurrency model"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Static vs. Dynamic Properties","level":3,"type":"heading","anchor":"Static-vs-Dynamic-Properties"},{"type":"paragraph","inlineContent":[{"text":"Learning this distinction is key to understanding Gnusto:","type":"text"}]},{"text":"Static properties","level":4,"type":"heading","anchor":"Static-properties"},{"items":[{"content":[{"inlineContent":[{"text":"Defined at compile time","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initial flags: "},{"type":"codeVoice","code":".isTakable"},{"type":"text","text":", "},{"type":"codeVoice","code":".isLightSource"},{"type":"text","text":", "},{"type":"codeVoice","code":".isContainer"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Starting descriptions, names, adjectives and synonyms","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Base item properties and initial locations"}]}]}],"type":"unorderedList"},{"text":"Dynamic properties","level":4,"type":"heading","anchor":"Dynamic-properties"},{"items":[{"content":[{"inlineContent":[{"text":"Computed at runtime through proxies","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"isLit","type":"codeVoice"},{"text":": Considers all light sources, darkness effects, and conditions","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"isVisible","type":"codeVoice"},{"type":"text","text":": Accounts for darkness, container states, and concealment"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"description"},{"type":"text","text":": Can change based on world state via property computers"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"currentLoad","type":"codeVoice"},{"type":"text","text":"\/"},{"code":"isEmpty","type":"codeVoice"},{"type":"text","text":": Reflect actual container contents"}]}]},{"content":[{"inlineContent":[{"code":"isProvidingLight","type":"codeVoice"},{"text":": Whether an item is actually illuminating (e.g. lit lamp vs. unlit lamp)","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Making Things Happen: Event Handlers","level":2,"type":"heading","anchor":"Making-Things-Happen-Event-Handlers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Event handlers intercept player commands and add dynamic behaviors to your items and locations. They work exclusively with proxy objects to access and modify the current game state."}]},{"text":"Item Event Handlers","level":3,"type":"heading","anchor":"Item-Event-Handlers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Make items respond intelligently to player actions:"}]},{"code":["let cloakHandler = ItemEventHandler(for: .cloak) {","    before(.drop, .insert) { context, _ in","        guard await context.player.location == .cloakroom else {","            throw ActionResponse.feedback(","                \"This isn't the best place to leave a smart cloak lying around.\"","            )","        }","        return nil  \/\/ Pass control back to default action handling","    }","","    after { context, command in","        guard await context.player.location == .cloakroom else {","            return nil","        }","","        if command.hasIntent(.drop, .insert) {","            var changes = [","                await context.location(.bar).setFlag(.isLit)","            ]","            if await context.player.score < 1 {","                changes.append(await context.player.updateScore(by: 1))","            }","            return ActionResult(changes: changes)","        }","","        if command.hasIntent(.take) {","            return await ActionResult(","                context.location(.bar).clearFlag(.isLit)","            )","        }","","        return nil","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Notice how the handler uses proxies throughout: "},{"code":"context.player","type":"codeVoice"},{"type":"text","text":" is a "},{"isActive":true,"identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/PlayerProxy","type":"reference"},{"type":"text","text":", "},{"code":"context.player.location","type":"codeVoice"},{"type":"text","text":" is a "},{"isActive":true,"identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/LocationProxy","type":"reference"},{"type":"text","text":", and these proxies know the current state of the world."}]},{"text":"Location Event Handlers","level":3,"type":"heading","anchor":"Location-Event-Handlers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create rooms that respond to their environment:"}]},{"code":["let barHandler = LocationEventHandler(for: .bar) {","    \/\/ First: if location is lit, yield to normal processing","    beforeTurn { context, _ in","        if await context.location.isLit {","            return ActionResult.yield","        }","        return nil  \/\/ not handled, try next matcher","    }","","    \/\/ Second: handle north movement in dark","    beforeTurn(.move) { context, command in","        if command.direction == .north {","            return ActionResult.yield","        } else {","            return ActionResult(","                \"Blundering around in the dark isn't a good idea!\",","                await context.engine.adjustGlobal(.barMessageDisturbances, by: 2)","            )","        }","    }","","    \/\/ Third: handle meta commands in dark","    beforeTurn(.meta) { _, _ in","        return ActionResult.yield","    }","","    \/\/ Fourth: catch-all for other commands in dark","    beforeTurn { context, _ in","        return ActionResult(","            \"In the dark? You could easily disturb something!\",","            await context.engine.adjustGlobal(.barMessageDisturbances, by: 1)","        )","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Computed Properties","level":2,"type":"heading","anchor":"Computed-Properties"},{"type":"paragraph","inlineContent":[{"text":"While event handlers respond to commands, property computers calculate dynamic values on demand:","type":"text"}]},{"code":["let kitchenComputer = LocationComputer(for: .kitchen) {","    locationProperty(.description) { context in","        let kitchenWindow = await context.item(.kitchenWindow)","        let windowState = await kitchenWindow.isOpen ? \"open\" : \"slightly ajar\"","        return .string(","            \"\"\"","            You are in the kitchen of the white house. A table seems to","            have been used recently for the preparation of food. A passage","            leads to the west and a dark staircase can be seen leading","            upward. A dark chimney leads down and to the east is a small","            window which is \\(windowState).","            \"\"\"","        )","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The proxy system seamlessly integrates computed properties – when you access ","type":"text"},{"code":"kitchen.description","type":"codeVoice"},{"type":"text","text":", the proxy checks for a computed property first, and falls back to the static definition if none exists."}]},{"text":"Time-Based Behaviors: Daemons","level":2,"type":"heading","anchor":"Time-Based-Behaviors-Daemons"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Daemons run independently of player actions, using proxies to implement autonomous behaviors:"}]},{"code":["let swordDaemon = Daemon { engine, state in","    let currentLocation = await engine.player.location","    var newGlowLevel: SwordBrightness = .notGlowing","","    \/\/ Check for monsters in current location (highest priority)","    for item in await currentLocation.items where await item.isCharacter {","        newGlowLevel = .glowingBrightly","        break","    }","","    if newGlowLevel != .glowingBrightly {","        \/\/ Check adjacent locations for monsters","        for exit in await currentLocation.exits {","            guard let destination = exit.destinationID else { continue }","            let adjacentLocation = await engine.location(destination)","            for item in await adjacentLocation.items where await item.isCharacter {","                newGlowLevel = .glowingFaintly","                break","            }","        }","    }","","    \/\/ Always update the glow level and show message if glowing","    let currentGlowLevel = state.getPayload(as: SwordBrightness.self) ?? .notGlowing","","    \/\/ Do nothing if the glow level has not changed","    if newGlowLevel == currentGlowLevel { return nil }","","    \/\/ Update and announce the glow level if it has changed","    return try ActionResult(","        newGlowLevel.description,","        .updateDaemonState(","            daemonID: .swordDaemon,","            daemonState: state.updatingPayload(newGlowLevel)","        )","    )","}"],"type":"codeListing","syntax":"swift"},{"text":"Putting It All Together","level":2,"type":"heading","anchor":"Putting-It-All-Together"},{"type":"paragraph","inlineContent":[{"text":"The power of Gnusto’s architecture becomes clear when these pieces work together:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"You define","type":"text"}]},{"type":"text","text":" clean, declarative items and locations"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"The auto-wiring plugin generates"}]},{"type":"text","text":" strongly-typed IDs and connective boilerplate"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Proxies provide"}],"type":"strong"},{"text":" access to the living, dynamic world","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Event handlers"}],"type":"strong"},{"text":" add sophisticated behaviors","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Property computers","type":"text"}]},{"text":" make descriptions and states contextual","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Daemons and Fuses"}],"type":"strong"},{"text":" create autonomous, time-based effects","type":"text"}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This separation keeps your code organized, maintainable, and powerful – letting you focus on crafting compelling interactive fiction rather than wrestling with infrastructure."}]},{"text":"Next Steps","level":2,"type":"heading","anchor":"Next-Steps"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"State Changes and the Action Pipeline","type":"text"}]},{"type":"text","text":": Safely modifying game state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Advanced Event Handling","type":"text"}],"type":"strong"},{"type":"text","text":": Complex command interception patterns"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Custom Properties"}],"type":"strong"},{"text":": Extending the proxy system with your own computations","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Combat Systems"}]},{"type":"text","text":": Building interactive combat with proxies and handlers"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"metadata":{"roleHeading":"Article","role":"article","title":"Game Structure and Dynamic Behavior","modules":[{"name":"GnustoEngine"}]},"abstract":[{"type":"text","text":"Learn how to organize your game world and bring it to life with dynamic proxies and event handlers."}],"kind":"article","hierarchy":{"paths":[["doc:\/\/GnustoEngine\/documentation\/GnustoEngine"]]},"variants":[{"paths":["\/documentation\/gnustoengine\/gamestructure"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/GameStructure","interfaceLanguage":"swift"},"sections":[],"references":{"doc://GnustoEngine/documentation/GnustoEngine/Location":{"url":"\/documentation\/gnustoengine\/location","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Location"}],"type":"topic","identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/Location","title":"Location","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Location"}],"abstract":[{"text":"Represents a distinct place or room within the game world that the player can visit.","type":"text"}]},"doc://GnustoEngine/documentation/GnustoEngine/ItemProxy":{"identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/ItemProxy","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ItemProxy","kind":"identifier"}],"abstract":[{"text":"A lightweight proxy that provides dynamic property access for items through the GameEngine.","type":"text"}],"title":"ItemProxy","role":"symbol","navigatorTitle":[{"text":"ItemProxy","kind":"identifier"}],"url":"\/documentation\/gnustoengine\/itemproxy","type":"topic"},"doc://GnustoEngine/documentation/GnustoEngine":{"role":"collection","identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine","kind":"symbol","title":"GnustoEngine","abstract":[],"url":"\/documentation\/gnustoengine","type":"topic"},"doc://GnustoEngine/documentation/GnustoEngine/GameBlueprint":{"identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/GameBlueprint","url":"\/documentation\/gnustoengine\/gameblueprint","kind":"symbol","type":"topic","navigatorTitle":[{"text":"GameBlueprint","kind":"identifier"}],"title":"GameBlueprint","role":"symbol","abstract":[{"type":"text","text":"Defines the foundational structure and core components of a Gnusto-powered game."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GameBlueprint","kind":"identifier"}]},"doc://GnustoEngine/documentation/GnustoEngine/GnustoAutoWiringPlugin":{"identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/GnustoAutoWiringPlugin","title":"Gnusto Auto-Wiring Plugin","url":"\/documentation\/gnustoengine\/gnustoautowiringplugin","kind":"article","type":"topic","abstract":[{"type":"text","text":"Eliminate boilerplate with automatic ID generation and game setup."}],"role":"article"},"gnusto-proxies.png":{"type":"image","identifier":"gnusto-proxies.png","variants":[{"traits":["1x","light"],"url":"\/images\/GnustoEngine\/gnusto-proxies.png"}],"alt":"Gnusto Proxies"},"doc://GnustoEngine/documentation/GnustoEngine/PlayerProxy":{"navigatorTitle":[{"text":"PlayerProxy","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PlayerProxy","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/gnustoengine\/playerproxy","abstract":[{"text":"A lightweight proxy that provides dynamic property access for the player character through the GameEngine.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/PlayerProxy","title":"PlayerProxy"},"doc://GnustoEngine/documentation/GnustoEngine/LocationProxy":{"type":"topic","url":"\/documentation\/gnustoengine\/locationproxy","title":"LocationProxy","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LocationProxy","kind":"identifier"}],"identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/LocationProxy","navigatorTitle":[{"text":"LocationProxy","kind":"identifier"}],"abstract":[{"text":"A lightweight proxy that provides dynamic property access for locations through the GameEngine.","type":"text"}],"role":"symbol","kind":"symbol"},"doc://GnustoEngine/documentation/GnustoEngine/Item":{"url":"\/documentation\/gnustoengine\/item","identifier":"doc:\/\/GnustoEngine\/documentation\/GnustoEngine\/Item","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Represents an interactive object or entity within the game world, such as a brass lantern,"},{"type":"text","text":" "},{"type":"text","text":"a rusty key, a treasure chest, or even a non-player character (NPC)."}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Item"}],"navigatorTitle":[{"kind":"identifier","text":"Item"}],"title":"Item"}}}