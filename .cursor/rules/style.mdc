---
description:
globs:
alwaysApply: true
---
# Style Guide

- Break up multiline strings with heredocs and backslashes:

```swift
// Wrong:
let cloakroom = Location(
    id: "cloakroom",
    name: "Cloakroom",
    description: "The walls of this small room were clearly once lined with hooks, though now only one remains. The exit is a door to the east.",
    exits: [
        .east: Exit(destination: "foyer")
    ]
)

// Right:
let cloakroom = Location(
    id: "cloakroom",
    name: "Cloakroom",
    // ðŸ’¡ Break up long text before the 100th column
    description: """
        The walls of this small room were clearly once lined with hooks, though now only one \
        remains. The exit is a door to the east.
        """,
    exits: [
        // ðŸ’¡ Use trailing commas in lists
        .east: Exit(destination: "foyer"),
    ]
)
```

- Two or more arguments should go on multiple lines when defining and calling functions an initializers, unless the full method signature is less than 80 characters.

```swift
// Wrong:
init(id: ID, turns: Int, action: @escaping @MainActor (GameEngine) async -> Void) {...}

func debugAddItem(id: ItemID, name: String, properties: Set<ItemProperty> = [], size: Int = 5, parent: ParentEntity = .nowhere) {...}

engine.debugAddItem(id: testItem.id, name: testItem.name, properties: testItem.properties, parent: .player)

// Right:
init(
    id: ID,
    turns: Int,
    action: @escaping @MainActor (GameEngine) async -> Void
) {...}

func debugAddItem(
    id: ItemID,
    name: String,
    properties: Set<ItemProperty> = [],
    size: Int = 5,
    parent: ParentEntity = .nowhere
) {...}

engine.debugAddItem(
    id: testItem.id,
    name: testItem.name,
    properties: testItem.properties,
    parent: .player
)

// ðŸ’¡ Exception for short two-argument method signatures
func print(_ text: String, style: TextStyle)

// ðŸ’¡ Exception for unnamed parameters, when call still fits on one line
ioHandler.ioHandler.print("You are likely to be eaten by a grue.", style: .normal)
```

- Multi-condition if's and guards

```swift
// Wrong:
if significantTokens.count == 1, let directionWord = significantTokens.first, let direction = vocabulary.directions[directionWord] {...}

guard let targetItem = await engine.itemSnapshot(with: targetItemID),
      targetItem.parent == .player else {...}

// Right:
if significantTokens.count == 1,
   let directionWord = significantTokens.first,
   let direction = vocabulary.directions[directionWord]
{
    ...
}

guard
    let targetItem = await engine.itemSnapshot(with: targetItemID),
    targetItem.parent == .player
else {
    ...
}

guard let targetItemID = command.directObject else {...}
```

- Public functions should use variadic arguments for simple collections

```swift
// Wrong:
public init(
    name: String,
    exits: [Direction : Exit] = [:],
    properties: Set<LocationProperty> = [],
    globals: [ItemID] = []
) {...}

// Right:
public init(
    name: String,
    exits: [Direction : Exit] = [:],
    properties: LocationProperty...,
    globals: ItemID...
) {...}
```

- NEVER add redundant type annotations

```swift
// Wrong:
let change: StateChange = StateChange(  // Redundant type annotation
    entityId: EntityID.global,  // Type already specified in function signature
    propertyKey: StatePropertyKey.gameSpecificState(key: key),  // Type already specified in function signature
    newValue: value
)

// Right:
let change = StateChange(
    entityId: .global,
    propertyKey: .gameSpecificState(key: key),
    newValue: value
)
```
