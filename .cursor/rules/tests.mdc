---
description: 
globs: *Tests.swift
alwaysApply: false
---
# Tests

- Always use `Swift Testing`
- @MainActor-isolated tests calling other @MainActor-isolated functions or properties within that scope should omit the explicit `await` to avoid compiler redundancy warning

## Testing Game Output:

```swift
// Wrong:
let output = await mockIO.recordedOutput
#expect(output.contains { $0.text == "You can't take things out of the stone statue." }, "Expected non-container message")
#expect(output.count == 1)

// Right:
let output = await mockIO.flush()  // ðŸ’¡ Use `flush()` rather than `output.contains` and `output.count`
expectNoDifference(output, "You can't take things out of the stone statue.")
```