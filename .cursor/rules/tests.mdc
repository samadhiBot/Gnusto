---
description:
globs: *Tests.swift
alwaysApply: false
---
# Tests

- Always use `Swift Testing`
- @MainActor-isolated tests calling other @MainActor-isolated functions or properties within that scope should omit the explicit `await` to avoid compiler redundancy warning

## Testing Game Output:

```swift
// Wrong:
let output = await mockIO.recordedOutput
#expect(output.contains { $0.text == "You can't take things out of the stone statue." }, "Expected non-container message")
#expect(output.count == 1)

// Right:
let output = await mockIO.flush()  // ðŸ’¡ Use `flush()` rather than `output.contains` and `output.count`
expectNoDifference(output, "You can't take things out of the stone statue.")
```

## Mocks

- Use [MinimalGame.swift](mdc:Tests/GnustoEngineTests/Support/MinimalGame.swift) for a simple `GameBlueprint`
- Use [MockIOHandler.swift](mdc:Tests/GnustoEngineTests/Mocks/MockIOHandler.swift) for a mock `IOHandler`
  - Use `mockIO.flush()` and `expectNoDifference(...)` to test engine output
- Use @MockParser.swift for a mock `Parser`

```swift
@Test("Examine simple object (held)")
func testExamineSimpleObjectHeld() async throws {
    // Given
    let key = Item(
        id: "key",
        name: "brass key",
        longDescription: "A small brass key.",
        properties: .takable,
        parent: .player
    )

    let game = MinimalGame(items: [key])
    let mockIO = await MockIOHandler()
    let mockParser = MockParser()
    let engine = GameEngine(
        game: game,
        parser: mockParser,
        ioHandler: mockIO
    )

    let command = Command(verbID: "examine", directObject: "key", rawInput: "examine key")

    // When
    try await handler.perform(command: command, engine: engine)

    // Then
    let finalItemState = engine.itemSnapshot(with: "key")
    #expect(finalItemState?.hasProperty(ItemProperty.touched) == true)

    let output = await mockIO.flush()
    expectNoDifference(output, "A small brass key.")
}
```
