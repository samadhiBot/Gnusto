---
description:
globs:
alwaysApply: true
---
# Gnusto Interactive Fiction Engine

- The Gnusto Interactive Fiction Engine enables faithful translations of the original ZIL-based interactive fiction classics, accurately replicating the original gameplay mechanics and stories
- It provides a clean, elegant and ergonomic foundation for creating new works of interactive fiction
- It adheres to the highest standards of software craftsmanship, with clean, SOLID, modular, maintainable code
- All of the Gnusto Interactive Fiction Engine's code is well-tested, with 80-90% coverage
- It is easy customize and extend ANY and ALL of the built-in functionality
- It utilizes modern Swift standards, features and optimizations under the hood
- `Docs/References/Zork 1` is ALWAYS the definitive reference for ZIL behavior

## Design principles

- Common operations should have simple, direct APIs.

  Any need for workarounds in client game code shows that the current engine design isn't fully considering the client game developer's experience.

- The cleanest code is no code.

  Minimize boilerplate. The presence of the Gnusto Interactive Fiction Engine should be as unobtrusive as possible, so developers can focus on their game worlds. It should make game creation as easy, fun and intuitive as possible.

## Foundational Rules

- ALWAYS refer to `Sources/GnustoEngine` and `Tests/GnustoEngineTests` before making changes, to ensure you follow existing conventions and APIs
- When adding, modifying or reviewing functionality, ALWAYS refer to the original ZIL source code in `Docs/References`
  - Use `Docs/References/Cloak of Darkness` to quickly learn the fundamentals of how some functionality was handled in ZIL
  - Use `Docs/References/Zork 1` for the canonical mechanics and phrases, e.g. "It is pitch black. You are likely to be eaten by a grue."
  - Nostalgia is the heart of the Gnusto engine, so ALWAYS honor the past by using phrases and response from the classics
  - Use `Docs/References/Hitchhikers Guide to the Galaxy` to study more advanced puzzles and techniques
  - Use `Docs/References/A Mind Forever Voyaging` to study the later state of the art in the classical era of ZIL programming
- ALWAYS provide comprehensive tests when adding or modifying functionality
- NEVER move on to the next task without providing comprehensive tests
- NEVER resort to `@unchecked Sendable`

## Current Sprint

- The current development sprint is based on `Docs/ROADMAP.md`. All design decisions must take the Gnusto Engine Roadmap document into account and serve to further the goals specified within.
  - The current epic is detailed in `Docs/ENHANCED_ACTION_HANDLING.md`. See `Implementation Phases` for next steps.
